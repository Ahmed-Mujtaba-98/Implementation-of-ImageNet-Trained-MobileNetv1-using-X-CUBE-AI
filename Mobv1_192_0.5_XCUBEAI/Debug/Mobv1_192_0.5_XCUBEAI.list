
Mobv1_192_0.5_XCUBEAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08005820  08005820  00015820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  08005c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000138  240001e4  08005e64  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00030000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f6e9  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003733  00000000  00000000  0003f8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000a1c5  00000000  00000000  0004302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a08  00000000  00000000  0004d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000e08  00000000  00000000  0004dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036a7b  00000000  00000000  0004ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013a76  00000000  00000000  00085483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015d550  00000000  00000000  00098ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f6449  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000029d4  00000000  00000000  001f649c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000b4  00000000  00000000  001f8e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000183  00000000  00000000  001f8f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005804 	.word	0x08005804

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	08005804 	.word	0x08005804

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b510      	push	{r4, lr}
 800068a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068c:	224c      	movs	r2, #76	; 0x4c
 800068e:	2100      	movs	r1, #0
 8000690:	a809      	add	r0, sp, #36	; 0x24
 8000692:	f002 fe07 	bl	80032a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	a801      	add	r0, sp, #4
 800069c:	f002 fe02 	bl	80032a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f000 fc2b 	bl	8000efc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <SystemClock_Config+0xb4>)
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80006ba:	9200      	str	r2, [sp, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xb8>)
 80006be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80006c0:	f041 0101 	orr.w	r1, r1, #1
 80006c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80006c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006c8:	f002 0201 	and.w	r2, r2, #1
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d0:	699a      	ldr	r2, [r3, #24]
 80006d2:	0494      	lsls	r4, r2, #18
 80006d4:	d5fc      	bpl.n	80006d0 <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d6:	2001      	movs	r0, #1
 80006d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 480;
 80006dc:	2404      	movs	r4, #4
 80006de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e2:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 480;
 80006e6:	e9cd 4214 	strd	r4, r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006ec:	2214      	movs	r2, #20
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006f0:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fc:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fe:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f000 fc1f 	bl	8000f44 <HAL_RCC_OscConfig>
 8000706:	b108      	cbz	r0, 800070c <SystemClock_Config+0x84>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070a:	e7fe      	b.n	800070a <SystemClock_Config+0x82>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	223f      	movs	r2, #63	; 0x3f
 800070e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000710:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000714:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000720:	e9cd 1304 	strd	r1, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000724:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000726:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072c:	f000 ff3c 	bl	80015a8 <HAL_RCC_ClockConfig>
 8000730:	b108      	cbz	r0, 8000736 <SystemClock_Config+0xae>
 8000732:	b672      	cpsid	i
  while (1)
 8000734:	e7fe      	b.n	8000734 <SystemClock_Config+0xac>
}
 8000736:	b01c      	add	sp, #112	; 0x70
 8000738:	bd10      	pop	{r4, pc}
 800073a:	bf00      	nop
 800073c:	58024800 	.word	0x58024800
 8000740:	58000400 	.word	0x58000400

08000744 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000744:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <main+0x130>)
{
 8000746:	b507      	push	{r0, r1, r2, lr}
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800074e:	d111      	bne.n	8000774 <main+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000754:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000758:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800075c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000760:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800076a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <main+0x130>)
 8000776:	6953      	ldr	r3, [r2, #20]
 8000778:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800077c:	d123      	bne.n	80007c6 <main+0x82>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800077e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000782:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000786:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800078a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800078e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000792:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000796:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000798:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800079c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800079e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007a2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007a4:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80007a8:	d2f9      	bcs.n	800079e <main+0x5a>
    } while(sets-- != 0U);
 80007aa:	3b20      	subs	r3, #32
 80007ac:	f113 0f20 	cmn.w	r3, #32
 80007b0:	d1f2      	bne.n	8000798 <main+0x54>
 80007b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007b6:	6953      	ldr	r3, [r2, #20]
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007c2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80007c6:	f000 f9b1 	bl	8000b2c <HAL_Init>
  SystemClock_Config();
 80007ca:	f7ff ff5d 	bl	8000688 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <main+0x134>)
  hcrc.Instance = CRC;
 80007d0:	482a      	ldr	r0, [pc, #168]	; (800087c <main+0x138>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ee:	f042 0208 	orr.w	r2, r2, #8
 80007f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	9b01      	ldr	r3, [sp, #4]
  hcrc.Instance = CRC;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <main+0x13c>)
 8000804:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800080a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800080e:	2301      	movs	r3, #1
 8000810:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000812:	f000 fa2b 	bl	8000c6c <HAL_CRC_Init>
 8000816:	b108      	cbz	r0, 800081c <main+0xd8>
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
  while (1)
 800081a:	e7fe      	b.n	800081a <main+0xd6>
  huart3.Instance = USART3;
 800081c:	4c19      	ldr	r4, [pc, #100]	; (8000884 <main+0x140>)
  huart3.Init.BaudRate = 115200;
 800081e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <main+0x144>)
  huart3.Init.Parity = UART_PARITY_NONE;
 8000824:	6120      	str	r0, [r4, #16]
  huart3.Init.BaudRate = 115200;
 8000826:	e9c4 2300 	strd	r2, r3, [r4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800082a:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800082c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000830:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000834:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083c:	4620      	mov	r0, r4
 800083e:	f002 fa36 	bl	8002cae <HAL_UART_Init>
 8000842:	4601      	mov	r1, r0
 8000844:	b108      	cbz	r0, 800084a <main+0x106>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x104>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	4620      	mov	r0, r4
 800084c:	f002 fa9d 	bl	8002d8a <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4601      	mov	r1, r0
 8000852:	b108      	cbz	r0, 8000858 <main+0x114>
 8000854:	b672      	cpsid	i
  while (1)
 8000856:	e7fe      	b.n	8000856 <main+0x112>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	4620      	mov	r0, r4
 800085a:	f002 faba 	bl	8002dd2 <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	b108      	cbz	r0, 8000864 <main+0x120>
 8000860:	b672      	cpsid	i
  while (1)
 8000862:	e7fe      	b.n	8000862 <main+0x11e>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000864:	4620      	mov	r0, r4
 8000866:	f002 fa75 	bl	8002d54 <HAL_UARTEx_DisableFifoMode>
 800086a:	b108      	cbz	r0, 8000870 <main+0x12c>
 800086c:	b672      	cpsid	i
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0x12a>
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x12c>
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	58024400 	.word	0x58024400
 800087c:	2400029c 	.word	0x2400029c
 8000880:	58024c00 	.word	0x58024c00
 8000884:	2400020c 	.word	0x2400020c
 8000888:	40004800 	.word	0x40004800

0800088c <Error_Handler>:
 800088c:	b672      	cpsid	i
  while (1)
 800088e:	e7fe      	b.n	800088e <Error_Handler+0x2>

08000890 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <HAL_MspInit+0x20>)
{
 8000892:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000894:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000898:	f042 0202 	orr.w	r2, r2, #2
 800089c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80008a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	b002      	add	sp, #8
 80008ae:	4770      	bx	lr
 80008b0:	58024400 	.word	0x58024400

080008b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80008b4:	6802      	ldr	r2, [r0, #0]
{
 80008b6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_CRC_MspInit+0x2c>)
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d10d      	bne.n	80008da <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008be:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80008c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008c6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80008ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008da:	b002      	add	sp, #8
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	58024c00 	.word	0x58024c00

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b510      	push	{r4, lr}
 80008e6:	b0b6      	sub	sp, #216	; 0xd8
 80008e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	2214      	movs	r2, #20
 80008ec:	2100      	movs	r1, #0
 80008ee:	a802      	add	r0, sp, #8
 80008f0:	f002 fcd8 	bl	80032a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	22bc      	movs	r2, #188	; 0xbc
 80008f6:	2100      	movs	r1, #0
 80008f8:	a807      	add	r0, sp, #28
 80008fa:	f002 fcd3 	bl	80032a4 <memset>
  if(huart->Instance==USART3)
 80008fe:	6822      	ldr	r2, [r4, #0]
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_MspInit+0x88>)
 8000902:	429a      	cmp	r2, r3
 8000904:	d130      	bne.n	8000968 <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000906:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800090a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000910:	f001 f8a6 	bl	8001a60 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	b108      	cbz	r0, 800091a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8000916:	f7ff ffb9 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	a902      	add	r1, sp, #8
 800091e:	4815      	ldr	r0, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000920:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000924:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000928:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800092c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000930:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000934:	9200      	str	r2, [sp, #0]
 8000936:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800093c:	f042 0208 	orr.w	r2, r2, #8
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000960:	2307      	movs	r3, #7
 8000962:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f000 f9de 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000968:	b036      	add	sp, #216	; 0xd8
 800096a:	bd10      	pop	{r4, pc}
 800096c:	40004800 	.word	0x40004800
 8000970:	58024400 	.word	0x58024400
 8000974:	58020c00 	.word	0x58020c00

08000978 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler>

0800097a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler>

0800097c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler>

0800097e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler>

08000980 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler>

08000982 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 b8fe 	b.w	8000b88 <HAL_IncTick>

0800098c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <_sbrk+0x30>)
{
 800098e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8000990:	6819      	ldr	r1, [r3, #0]
{
 8000992:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000994:	b909      	cbnz	r1, 800099a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000996:	490a      	ldr	r1, [pc, #40]	; (80009c0 <_sbrk+0x34>)
 8000998:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4909      	ldr	r1, [pc, #36]	; (80009c4 <_sbrk+0x38>)
 800099e:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <_sbrk+0x3c>)
 80009a0:	4402      	add	r2, r0
 80009a2:	1b09      	subs	r1, r1, r4
 80009a4:	428a      	cmp	r2, r1
 80009a6:	d906      	bls.n	80009b6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80009a8:	f002 fa80 	bl	8002eac <__errno>
 80009ac:	230c      	movs	r3, #12
 80009ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80009b4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80009b6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80009b8:	e7fc      	b.n	80009b4 <_sbrk+0x28>
 80009ba:	bf00      	nop
 80009bc:	24000200 	.word	0x24000200
 80009c0:	20000000 	.word	0x20000000
 80009c4:	24080000 	.word	0x24080000
 80009c8:	00000800 	.word	0x00000800

080009cc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <SystemInit+0x98>)
 80009ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <SystemInit+0x9c>)
 80009dc:	6813      	ldr	r3, [r2, #0]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d805      	bhi.n	80009f2 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	f043 0307 	orr.w	r3, r3, #7
 80009f0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <SystemInit+0xa0>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <SystemInit+0xa4>)
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a06:	4918      	ldr	r1, [pc, #96]	; (8000a68 <SystemInit+0x9c>)
  RCC->CR &= 0xEAF6ED7FU;
 8000a08:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a0a:	680a      	ldr	r2, [r1, #0]
 8000a0c:	0712      	lsls	r2, r2, #28
 8000a0e:	d505      	bpl.n	8000a1c <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a10:	680a      	ldr	r2, [r1, #0]
 8000a12:	f022 020f 	bic.w	r2, r2, #15
 8000a16:	f042 0207 	orr.w	r2, r2, #7
 8000a1a:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a1c:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a1e:	4915      	ldr	r1, [pc, #84]	; (8000a74 <SystemInit+0xa8>)
  RCC->D1CFGR = 0x00000000;
 8000a20:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000a22:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000a24:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000a26:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a28:	4913      	ldr	r1, [pc, #76]	; (8000a78 <SystemInit+0xac>)
 8000a2a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a2c:	4913      	ldr	r1, [pc, #76]	; (8000a7c <SystemInit+0xb0>)
 8000a2e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a32:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a36:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a3a:	6819      	ldr	r1, [r3, #0]
 8000a3c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000a40:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a42:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <SystemInit+0xb4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	0c1b      	lsrs	r3, r3, #16
 8000a4a:	041b      	lsls	r3, r3, #16
 8000a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a50:	d202      	bcs.n	8000a58 <SystemInit+0x8c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <SystemInit+0xb8>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0xbc>)
 8000a5a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a5e:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	52002000 	.word	0x52002000
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a74:	02020200 	.word	0x02020200
 8000a78:	01ff0000 	.word	0x01ff0000
 8000a7c:	01010280 	.word	0x01010280
 8000a80:	5c001000 	.word	0x5c001000
 8000a84:	51008108 	.word	0x51008108
 8000a88:	52004000 	.word	0x52004000

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f7ff ff9c 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f002 fbb5 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fe41 	bl	8000744 <main>
  bx  lr
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ac8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000acc:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8000ad0:	08005c80 	.word	0x08005c80
  ldr r2, =_sbss
 8000ad4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8000ad8:	2400031c 	.word	0x2400031c

08000adc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC3_IRQHandler>
	...

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_InitTick+0x40>)
{
 8000ae4:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000ae6:	7818      	ldrb	r0, [r3, #0]
 8000ae8:	b908      	cbnz	r0, 8000aee <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8000aea:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aec:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_InitTick+0x44>)
 8000af4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000af8:	6810      	ldr	r0, [r2, #0]
 8000afa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000afe:	f000 f89f 	bl	8000c40 <HAL_SYSTICK_Config>
 8000b02:	4604      	mov	r4, r0
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1f0      	bne.n	8000aea <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	2d0f      	cmp	r5, #15
 8000b0a:	d8ee      	bhi.n	8000aea <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4629      	mov	r1, r5
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f862 	bl	8000bdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_InitTick+0x48>)
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8000b1e:	e7e5      	b.n	8000aec <HAL_InitTick+0xc>
 8000b20:	24000008 	.word	0x24000008
 8000b24:	24000000 	.word	0x24000000
 8000b28:	2400000c 	.word	0x2400000c

08000b2c <HAL_Init>:
{
 8000b2c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f842 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b34:	f000 fc98 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8000b38:	490f      	ldr	r1, [pc, #60]	; (8000b78 <HAL_Init+0x4c>)
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_Init+0x50>)
 8000b3c:	698b      	ldr	r3, [r1, #24]
 8000b3e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000b42:	5cd3      	ldrb	r3, [r2, r3]
 8000b44:	f003 031f 	and.w	r3, r3, #31
 8000b48:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b4a:	698b      	ldr	r3, [r1, #24]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_Init+0x54>)
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	fa20 f303 	lsr.w	r3, r0, r3
 8000b5c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_Init+0x58>)
 8000b60:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff ffbc 	bl	8000ae0 <HAL_InitTick>
 8000b68:	4604      	mov	r4, r0
 8000b6a:	b918      	cbnz	r0, 8000b74 <HAL_Init+0x48>
  HAL_MspInit();
 8000b6c:	f7ff fe90 	bl	8000890 <HAL_MspInit>
}
 8000b70:	4620      	mov	r0, r4
 8000b72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b74:	2401      	movs	r4, #1
 8000b76:	e7fb      	b.n	8000b70 <HAL_Init+0x44>
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	08005820 	.word	0x08005820
 8000b80:	24000004 	.word	0x24000004
 8000b84:	24000000 	.word	0x24000000

08000b88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_IncTick+0x10>)
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <HAL_IncTick+0x14>)
 8000b8c:	6811      	ldr	r1, [r2, #0]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	440b      	add	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	240002c0 	.word	0x240002c0
 8000b9c:	24000008 	.word	0x24000008

08000ba0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <HAL_GetTick+0x8>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	240002c0 	.word	0x240002c0

08000bac <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <HAL_GetREVID+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
}
 8000bb0:	0c00      	lsrs	r0, r0, #16
 8000bb2:	4770      	bx	lr
 8000bb4:	5c001000 	.word	0x5c001000

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000bc6:	0412      	lsls	r2, r2, #16
 8000bc8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bd4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b530      	push	{r4, r5, lr}
 8000be0:	68dc      	ldr	r4, [r3, #12]
 8000be2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	2d04      	cmp	r5, #4
 8000bee:	bf28      	it	cs
 8000bf0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	bf8c      	ite	hi
 8000bfa:	3c03      	subhi	r4, #3
 8000bfc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfe:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000c02:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c04:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	fa01 f104 	lsl.w	r1, r1, r4
 8000c14:	ea41 0302 	orr.w	r3, r1, r2
 8000c18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c1c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	db06      	blt.n	8000c2e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c28:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c2c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	f000 000f 	and.w	r0, r0, #15
 8000c32:	4a02      	ldr	r2, [pc, #8]	; (8000c3c <HAL_NVIC_SetPriority+0x60>)
 8000c34:	5413      	strb	r3, [r2, r0]
 8000c36:	e7f9      	b.n	8000c2c <HAL_NVIC_SetPriority+0x50>
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	e000ed14 	.word	0xe000ed14

08000c40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	3801      	subs	r0, #1
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c46:	d20a      	bcs.n	8000c5e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	21f0      	movs	r1, #240	; 0xf0
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c6c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c6e:	4604      	mov	r4, r0
 8000c70:	b908      	cbnz	r0, 8000c76 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8000c72:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000c74:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c76:	7f43      	ldrb	r3, [r0, #29]
 8000c78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c7c:	b913      	cbnz	r3, 8000c84 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8000c7e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000c80:	f7ff fe18 	bl	80008b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c84:	2302      	movs	r3, #2
 8000c86:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c88:	7923      	ldrb	r3, [r4, #4]
 8000c8a:	b9e3      	cbnz	r3, 8000cc6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_CRC_Init+0x70>)
 8000c90:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	f022 0218 	bic.w	r2, r2, #24
 8000c98:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000c9a:	7962      	ldrb	r2, [r4, #5]
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	b9d2      	cbnz	r2, 8000cd6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000ca4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8000ca6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	6961      	ldr	r1, [r4, #20]
 8000cac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000cb0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cb2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000cb4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8000cc4:	e7d6      	b.n	8000c74 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cc6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_CRCEx_Polynomial_Set>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d0e2      	beq.n	8000c9a <HAL_CRC_Init+0x2e>
 8000cd4:	e7cd      	b.n	8000c72 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cd6:	6922      	ldr	r2, [r4, #16]
 8000cd8:	e7e4      	b.n	8000ca4 <HAL_CRC_Init+0x38>
 8000cda:	bf00      	nop
 8000cdc:	04c11db7 	.word	0x04c11db7

08000ce0 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ce0:	231f      	movs	r3, #31
{
 8000ce2:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	d306      	bcc.n	8000cf6 <HAL_CRCEx_Polynomial_Set+0x16>
 8000ce8:	fa21 f403 	lsr.w	r4, r1, r3
 8000cec:	07e4      	lsls	r4, r4, #31
 8000cee:	d5f9      	bpl.n	8000ce4 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8000cf0:	2a08      	cmp	r2, #8
 8000cf2:	d014      	beq.n	8000d1e <HAL_CRCEx_Polynomial_Set+0x3e>
 8000cf4:	d802      	bhi.n	8000cfc <HAL_CRCEx_Polynomial_Set+0x1c>
 8000cf6:	b13a      	cbz	r2, 8000d08 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8000cfa:	e00d      	b.n	8000d18 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8000cfc:	2a10      	cmp	r2, #16
 8000cfe:	d00c      	beq.n	8000d1a <HAL_CRCEx_Polynomial_Set+0x3a>
 8000d00:	2a18      	cmp	r2, #24
 8000d02:	d1f9      	bne.n	8000cf8 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8000d04:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000d08:	6800      	ldr	r0, [r0, #0]
 8000d0a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000d0c:	6883      	ldr	r3, [r0, #8]
 8000d0e:	f023 0318 	bic.w	r3, r3, #24
 8000d12:	431a      	orrs	r2, r3
 8000d14:	6082      	str	r2, [r0, #8]
 8000d16:	2000      	movs	r0, #0
}
 8000d18:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8000d1a:	2b07      	cmp	r3, #7
 8000d1c:	e7f3      	b.n	8000d06 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	e7f1      	b.n	8000d06 <HAL_CRCEx_Polynomial_Set+0x26>
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8000d28:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d2a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 8000d2e:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8000ef8 <HAL_GPIO_Init+0x1d4>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d32:	680a      	ldr	r2, [r1, #0]
 8000d34:	fa32 f403 	lsrs.w	r4, r2, r3
 8000d38:	d102      	bne.n	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8000d3a:	b003      	add	sp, #12
 8000d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8000d48:	ea1c 0202 	ands.w	r2, ip, r2
 8000d4c:	f000 80bb 	beq.w	8000ec6 <HAL_GPIO_Init+0x1a2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d50:	684d      	ldr	r5, [r1, #4]
 8000d52:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000d56:	2603      	movs	r6, #3
 8000d58:	f005 0403 	and.w	r4, r5, #3
 8000d5c:	fa06 f608 	lsl.w	r6, r6, r8
 8000d60:	1e67      	subs	r7, r4, #1
 8000d62:	43f6      	mvns	r6, r6
 8000d64:	2f01      	cmp	r7, #1
 8000d66:	d834      	bhi.n	8000dd2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000d68:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d6a:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	68cf      	ldr	r7, [r1, #12]
 8000d70:	fa07 f708 	lsl.w	r7, r7, r8
 8000d74:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d78:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d7a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d7c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000d84:	409f      	lsls	r7, r3
 8000d86:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000d8a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d8c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d90:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	688f      	ldr	r7, [r1, #8]
 8000d96:	fa07 f708 	lsl.w	r7, r7, r8
 8000d9a:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8000d9e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	d119      	bne.n	8000dd6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8000da2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000da6:	f003 0b07 	and.w	fp, r3, #7
 8000daa:	f04f 0c0f 	mov.w	ip, #15
 8000dae:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000db2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8000db6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dba:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000dbe:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dc2:	690f      	ldr	r7, [r1, #16]
 8000dc4:	fa07 f70b 	lsl.w	r7, r7, fp
 8000dc8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000dcc:	f8ca 7020 	str.w	r7, [sl, #32]
 8000dd0:	e001      	b.n	8000dd6 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	2c03      	cmp	r4, #3
 8000dd4:	d1da      	bne.n	8000d8c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8000dd6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd8:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ddc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000de0:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de4:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8000de8:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dea:	d06c      	beq.n	8000ec6 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dec:	4e40      	ldr	r6, [pc, #256]	; (8000ef0 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dee:	f003 0703 	and.w	r7, r3, #3
 8000df2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dfa:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	f044 0402 	orr.w	r4, r4, #2
 8000e00:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 8000e04:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 8000e08:	f023 0603 	bic.w	r6, r3, #3
 8000e0c:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 8000e10:	f004 0402 	and.w	r4, r4, #2
 8000e14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e18:	9401      	str	r4, [sp, #4]
 8000e1a:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e1c:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e20:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e24:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e28:	4c32      	ldr	r4, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x1d0>)
 8000e2a:	42a0      	cmp	r0, r4
 8000e2c:	d04d      	beq.n	8000eca <HAL_GPIO_Init+0x1a6>
 8000e2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e32:	42a0      	cmp	r0, r4
 8000e34:	d04b      	beq.n	8000ece <HAL_GPIO_Init+0x1aa>
 8000e36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e3a:	42a0      	cmp	r0, r4
 8000e3c:	d049      	beq.n	8000ed2 <HAL_GPIO_Init+0x1ae>
 8000e3e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e42:	42a0      	cmp	r0, r4
 8000e44:	d047      	beq.n	8000ed6 <HAL_GPIO_Init+0x1b2>
 8000e46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e4a:	42a0      	cmp	r0, r4
 8000e4c:	d045      	beq.n	8000eda <HAL_GPIO_Init+0x1b6>
 8000e4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e52:	42a0      	cmp	r0, r4
 8000e54:	d043      	beq.n	8000ede <HAL_GPIO_Init+0x1ba>
 8000e56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e5a:	42a0      	cmp	r0, r4
 8000e5c:	d041      	beq.n	8000ee2 <HAL_GPIO_Init+0x1be>
 8000e5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e62:	42a0      	cmp	r0, r4
 8000e64:	d03f      	beq.n	8000ee6 <HAL_GPIO_Init+0x1c2>
 8000e66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e6a:	42a0      	cmp	r0, r4
 8000e6c:	d03d      	beq.n	8000eea <HAL_GPIO_Init+0x1c6>
 8000e6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e72:	42a0      	cmp	r0, r4
 8000e74:	bf0c      	ite	eq
 8000e76:	2409      	moveq	r4, #9
 8000e78:	240a      	movne	r4, #10
 8000e7a:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7c:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 8000e7e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e82:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e86:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8000e88:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 8000e8c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8000e90:	bf54      	ite	pl
 8000e92:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e94:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 8000e96:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000e98:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e9a:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8000e9c:	bf54      	ite	pl
 8000e9e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ea0:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8000ea4:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8000ea8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8000eac:	bf54      	ite	pl
 8000eae:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000eb0:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb2:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8000eb4:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8000eb8:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8000ebc:	bf54      	ite	pl
 8000ebe:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000ec0:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000ec2:	f8ce 4000 	str.w	r4, [lr]
    position++;
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	e733      	b.n	8000d32 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eca:	2400      	movs	r4, #0
 8000ecc:	e7d5      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ece:	2401      	movs	r4, #1
 8000ed0:	e7d3      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ed2:	2402      	movs	r4, #2
 8000ed4:	e7d1      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ed6:	2403      	movs	r4, #3
 8000ed8:	e7cf      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000eda:	2404      	movs	r4, #4
 8000edc:	e7cd      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ede:	2405      	movs	r4, #5
 8000ee0:	e7cb      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ee2:	2406      	movs	r4, #6
 8000ee4:	e7c9      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000ee6:	2407      	movs	r4, #7
 8000ee8:	e7c7      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000eea:	2408      	movs	r4, #8
 8000eec:	e7c5      	b.n	8000e7a <HAL_GPIO_Init+0x156>
 8000eee:	bf00      	nop
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58020000 	.word	0x58020000
 8000ef8:	58000080 	.word	0x58000080

08000efc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000efc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000efe:	4c10      	ldr	r4, [pc, #64]	; (8000f40 <HAL_PWREx_ConfigSupply+0x44>)
 8000f00:	68e3      	ldr	r3, [r4, #12]
 8000f02:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f06:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f08:	d105      	bne.n	8000f16 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f0a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f0e:	1a18      	subs	r0, r3, r0
 8000f10:	bf18      	it	ne
 8000f12:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000f14:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	4318      	orrs	r0, r3
 8000f1c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8000f1e:	f7ff fe3f 	bl	8000ba0 <HAL_GetTick>
 8000f22:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	049b      	lsls	r3, r3, #18
 8000f28:	d501      	bpl.n	8000f2e <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e7f2      	b.n	8000f14 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f2e:	f7ff fe37 	bl	8000ba0 <HAL_GetTick>
 8000f32:	1b40      	subs	r0, r0, r5
 8000f34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f38:	d9f4      	bls.n	8000f24 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e7ea      	b.n	8000f14 <HAL_PWREx_ConfigSupply+0x18>
 8000f3e:	bf00      	nop
 8000f40:	58024800 	.word	0x58024800

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f46:	4604      	mov	r4, r0
 8000f48:	b908      	cbnz	r0, 8000f4e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e08b      	b.n	8001066 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	6803      	ldr	r3, [r0, #0]
 8000f50:	07df      	lsls	r7, r3, #31
 8000f52:	d45e      	bmi.n	8001012 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	079e      	lsls	r6, r3, #30
 8000f58:	f100 80af 	bmi.w	80010ba <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	06da      	lsls	r2, r3, #27
 8000f60:	d527      	bpl.n	8000fb2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f62:	4ba7      	ldr	r3, [pc, #668]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 8000f64:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f66:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f68:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000f6c:	2a08      	cmp	r2, #8
 8000f6e:	d007      	beq.n	8000f80 <HAL_RCC_OscConfig+0x3c>
 8000f70:	2a18      	cmp	r2, #24
 8000f72:	f040 8107 	bne.w	8001184 <HAL_RCC_OscConfig+0x240>
 8000f76:	f001 0203 	and.w	r2, r1, #3
 8000f7a:	2a01      	cmp	r2, #1
 8000f7c:	f040 8102 	bne.w	8001184 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	d502      	bpl.n	8000f8c <HAL_RCC_OscConfig+0x48>
 8000f86:	69e3      	ldr	r3, [r4, #28]
 8000f88:	2b80      	cmp	r3, #128	; 0x80
 8000f8a:	d1de      	bne.n	8000f4a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f8c:	f7ff fe0e 	bl	8000bac <HAL_GetREVID>
 8000f90:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f94:	6a21      	ldr	r1, [r4, #32]
 8000f96:	4298      	cmp	r0, r3
 8000f98:	4b99      	ldr	r3, [pc, #612]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 8000f9a:	f200 80ec 	bhi.w	8001176 <HAL_RCC_OscConfig+0x232>
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8000fa6:	bf0c      	ite	eq
 8000fa8:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8000fac:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8000fb0:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	0719      	lsls	r1, r3, #28
 8000fb6:	f100 8127 	bmi.w	8001208 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	069a      	lsls	r2, r3, #26
 8000fbe:	f100 8148 	bmi.w	8001252 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	075d      	lsls	r5, r3, #29
 8000fc6:	d51e      	bpl.n	8001006 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8000fc8:	4d8e      	ldr	r5, [pc, #568]	; (8001204 <HAL_RCC_OscConfig+0x2c0>)
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000fd2:	f7ff fde5 	bl	8000ba0 <HAL_GetTick>
 8000fd6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	05da      	lsls	r2, r3, #23
 8000fdc:	f140 815e 	bpl.w	800129c <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	4d87      	ldr	r5, [pc, #540]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	f040 8160 	bne.w	80012aa <HAL_RCC_OscConfig+0x366>
 8000fea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fdd3 	bl	8000ba0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ffa:	4e81      	ldr	r6, [pc, #516]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8000ffc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ffe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001000:	079b      	lsls	r3, r3, #30
 8001002:	f140 8178 	bpl.w	80012f6 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001006:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001008:	2800      	cmp	r0, #0
 800100a:	f040 817b 	bne.w	8001304 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 800100e:	2000      	movs	r0, #0
 8001010:	e029      	b.n	8001066 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001012:	4b7b      	ldr	r3, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 8001014:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001016:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001018:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800101c:	2a10      	cmp	r2, #16
 800101e:	d005      	beq.n	800102c <HAL_RCC_OscConfig+0xe8>
 8001020:	2a18      	cmp	r2, #24
 8001022:	d10a      	bne.n	800103a <HAL_RCC_OscConfig+0xf6>
 8001024:	f001 0203 	and.w	r2, r1, #3
 8001028:	2a02      	cmp	r2, #2
 800102a:	d106      	bne.n	800103a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	039d      	lsls	r5, r3, #14
 8001030:	d590      	bpl.n	8000f54 <HAL_RCC_OscConfig+0x10>
 8001032:	6863      	ldr	r3, [r4, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d18d      	bne.n	8000f54 <HAL_RCC_OscConfig+0x10>
 8001038:	e787      	b.n	8000f4a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103a:	6862      	ldr	r2, [r4, #4]
 800103c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001040:	d112      	bne.n	8001068 <HAL_RCC_OscConfig+0x124>
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001048:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800104a:	f7ff fda9 	bl	8000ba0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800104e:	4e6c      	ldr	r6, [pc, #432]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8001050:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001052:	6833      	ldr	r3, [r6, #0]
 8001054:	0398      	lsls	r0, r3, #14
 8001056:	f53f af7d 	bmi.w	8000f54 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105a:	f7ff fda1 	bl	8000ba0 <HAL_GetTick>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	2864      	cmp	r0, #100	; 0x64
 8001062:	d9f6      	bls.n	8001052 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
}
 8001066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001068:	4d65      	ldr	r5, [pc, #404]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	b99a      	cbnz	r2, 8001096 <HAL_RCC_OscConfig+0x152>
 800106e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001072:	602b      	str	r3, [r5, #0]
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800107c:	f7ff fd90 	bl	8000ba0 <HAL_GetTick>
 8001080:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	0399      	lsls	r1, r3, #14
 8001086:	f57f af65 	bpl.w	8000f54 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108a:	f7ff fd89 	bl	8000ba0 <HAL_GetTick>
 800108e:	1b80      	subs	r0, r0, r6
 8001090:	2864      	cmp	r0, #100	; 0x64
 8001092:	d9f6      	bls.n	8001082 <HAL_RCC_OscConfig+0x13e>
 8001094:	e7e6      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001096:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	602b      	str	r3, [r5, #0]
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	602b      	str	r3, [r5, #0]
 80010aa:	e7ce      	b.n	800104a <HAL_RCC_OscConfig+0x106>
 80010ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b0:	602b      	str	r3, [r5, #0]
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b8:	e7f6      	b.n	80010a8 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4b51      	ldr	r3, [pc, #324]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 80010bc:	68e1      	ldr	r1, [r4, #12]
 80010be:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80010c2:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80010c6:	d003      	beq.n	80010d0 <HAL_RCC_OscConfig+0x18c>
 80010c8:	2a18      	cmp	r2, #24
 80010ca:	d12b      	bne.n	8001124 <HAL_RCC_OscConfig+0x1e0>
 80010cc:	0782      	lsls	r2, r0, #30
 80010ce:	d129      	bne.n	8001124 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	075b      	lsls	r3, r3, #29
 80010d4:	d502      	bpl.n	80010dc <HAL_RCC_OscConfig+0x198>
 80010d6:	2900      	cmp	r1, #0
 80010d8:	f43f af37 	beq.w	8000f4a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010dc:	4d48      	ldr	r5, [pc, #288]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
 80010de:	682a      	ldr	r2, [r5, #0]
 80010e0:	f022 0219 	bic.w	r2, r2, #25
 80010e4:	430a      	orrs	r2, r1
 80010e6:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80010e8:	f7ff fd5a 	bl	8000ba0 <HAL_GetTick>
 80010ec:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	075f      	lsls	r7, r3, #29
 80010f2:	d511      	bpl.n	8001118 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	f7ff fd5a 	bl	8000bac <HAL_GetREVID>
 80010f8:	f241 0303 	movw	r3, #4099	; 0x1003
 80010fc:	6922      	ldr	r2, [r4, #16]
 80010fe:	4298      	cmp	r0, r3
 8001100:	686b      	ldr	r3, [r5, #4]
 8001102:	d822      	bhi.n	800114a <HAL_RCC_OscConfig+0x206>
 8001104:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001108:	2a40      	cmp	r2, #64	; 0x40
 800110a:	bf0c      	ite	eq
 800110c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8001110:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8001114:	606b      	str	r3, [r5, #4]
 8001116:	e721      	b.n	8000f5c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fd42 	bl	8000ba0 <HAL_GetTick>
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	2802      	cmp	r0, #2
 8001120:	d9e5      	bls.n	80010ee <HAL_RCC_OscConfig+0x1aa>
 8001122:	e79f      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001124:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001126:	b1a9      	cbz	r1, 8001154 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001128:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800112c:	4d34      	ldr	r5, [pc, #208]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001132:	f7ff fd35 	bl	8000ba0 <HAL_GetTick>
 8001136:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	0758      	lsls	r0, r3, #29
 800113c:	d4da      	bmi.n	80010f4 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fd2f 	bl	8000ba0 <HAL_GetTick>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	2802      	cmp	r0, #2
 8001146:	d9f7      	bls.n	8001138 <HAL_RCC_OscConfig+0x1f4>
 8001148:	e78c      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800114e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001152:	e7df      	b.n	8001114 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8001154:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001158:	4e29      	ldr	r6, [pc, #164]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_DISABLE();
 800115a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800115c:	f7ff fd20 	bl	8000ba0 <HAL_GetTick>
 8001160:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001162:	6833      	ldr	r3, [r6, #0]
 8001164:	0759      	lsls	r1, r3, #29
 8001166:	f57f aef9 	bpl.w	8000f5c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fd19 	bl	8000ba0 <HAL_GetTick>
 800116e:	1b40      	subs	r0, r0, r5
 8001170:	2802      	cmp	r0, #2
 8001172:	d9f6      	bls.n	8001162 <HAL_RCC_OscConfig+0x21e>
 8001174:	e776      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800117c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	e716      	b.n	8000fb2 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001184:	69e2      	ldr	r2, [r4, #28]
 8001186:	b34a      	cbz	r2, 80011dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8001188:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800118a:	4d1d      	ldr	r5, [pc, #116]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_CSI_ENABLE();
 800118c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001190:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001192:	f7ff fd05 	bl	8000ba0 <HAL_GetTick>
 8001196:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	05df      	lsls	r7, r3, #23
 800119c:	d511      	bpl.n	80011c2 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800119e:	f7ff fd05 	bl	8000bac <HAL_GetREVID>
 80011a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80011a6:	6a22      	ldr	r2, [r4, #32]
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d810      	bhi.n	80011ce <HAL_RCC_OscConfig+0x28a>
 80011ac:	686b      	ldr	r3, [r5, #4]
 80011ae:	2a20      	cmp	r2, #32
 80011b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011b4:	bf0c      	ite	eq
 80011b6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80011ba:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80011be:	606b      	str	r3, [r5, #4]
 80011c0:	e6f7      	b.n	8000fb2 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011c2:	f7ff fced 	bl	8000ba0 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9e5      	bls.n	8001198 <HAL_RCC_OscConfig+0x254>
 80011cc:	e74a      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011ce:	68eb      	ldr	r3, [r5, #12]
 80011d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80011d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011d8:	60eb      	str	r3, [r5, #12]
 80011da:	e6ea      	b.n	8000fb2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 80011dc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011de:	4e08      	ldr	r6, [pc, #32]	; (8001200 <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_CSI_DISABLE();
 80011e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011e6:	f7ff fcdb 	bl	8000ba0 <HAL_GetTick>
 80011ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011ec:	6833      	ldr	r3, [r6, #0]
 80011ee:	05d8      	lsls	r0, r3, #23
 80011f0:	f57f aedf 	bpl.w	8000fb2 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011f4:	f7ff fcd4 	bl	8000ba0 <HAL_GetTick>
 80011f8:	1b40      	subs	r0, r0, r5
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f6      	bls.n	80011ec <HAL_RCC_OscConfig+0x2a8>
 80011fe:	e731      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
 8001200:	58024400 	.word	0x58024400
 8001204:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001208:	6963      	ldr	r3, [r4, #20]
 800120a:	4d96      	ldr	r5, [pc, #600]	; (8001464 <HAL_RCC_OscConfig+0x520>)
 800120c:	b183      	cbz	r3, 8001230 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800120e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001216:	f7ff fcc3 	bl	8000ba0 <HAL_GetTick>
 800121a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800121c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800121e:	079b      	lsls	r3, r3, #30
 8001220:	f53f aecb 	bmi.w	8000fba <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001224:	f7ff fcbc 	bl	8000ba0 <HAL_GetTick>
 8001228:	1b80      	subs	r0, r0, r6
 800122a:	2802      	cmp	r0, #2
 800122c:	d9f6      	bls.n	800121c <HAL_RCC_OscConfig+0x2d8>
 800122e:	e719      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8001230:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001238:	f7ff fcb2 	bl	8000ba0 <HAL_GetTick>
 800123c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800123e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001240:	079f      	lsls	r7, r3, #30
 8001242:	f57f aeba 	bpl.w	8000fba <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fcab 	bl	8000ba0 <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	2802      	cmp	r0, #2
 800124e:	d9f6      	bls.n	800123e <HAL_RCC_OscConfig+0x2fa>
 8001250:	e708      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001252:	69a3      	ldr	r3, [r4, #24]
 8001254:	4d83      	ldr	r5, [pc, #524]	; (8001464 <HAL_RCC_OscConfig+0x520>)
 8001256:	b183      	cbz	r3, 800127a <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001260:	f7ff fc9e 	bl	8000ba0 <HAL_GetTick>
 8001264:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	0498      	lsls	r0, r3, #18
 800126a:	f53f aeaa 	bmi.w	8000fc2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800126e:	f7ff fc97 	bl	8000ba0 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	2802      	cmp	r0, #2
 8001276:	d9f6      	bls.n	8001266 <HAL_RCC_OscConfig+0x322>
 8001278:	e6f4      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001280:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001282:	f7ff fc8d 	bl	8000ba0 <HAL_GetTick>
 8001286:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	0499      	lsls	r1, r3, #18
 800128c:	f57f ae99 	bpl.w	8000fc2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001290:	f7ff fc86 	bl	8000ba0 <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2802      	cmp	r0, #2
 8001298:	d9f6      	bls.n	8001288 <HAL_RCC_OscConfig+0x344>
 800129a:	e6e3      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800129c:	f7ff fc80 	bl	8000ba0 <HAL_GetTick>
 80012a0:	1b80      	subs	r0, r0, r6
 80012a2:	2864      	cmp	r0, #100	; 0x64
 80012a4:	f67f ae98 	bls.w	8000fd8 <HAL_RCC_OscConfig+0x94>
 80012a8:	e6dc      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012aa:	b9b3      	cbnz	r3, 80012da <HAL_RCC_OscConfig+0x396>
 80012ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	672b      	str	r3, [r5, #112]	; 0x70
 80012b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ba:	f023 0304 	bic.w	r3, r3, #4
 80012be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc6e 	bl	8000ba0 <HAL_GetTick>
 80012c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c8:	0798      	lsls	r0, r3, #30
 80012ca:	f57f ae9c 	bpl.w	8001006 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fc67 	bl	8000ba0 <HAL_GetTick>
 80012d2:	1b80      	subs	r0, r0, r6
 80012d4:	42b8      	cmp	r0, r7
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x382>
 80012d8:	e6c4      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012da:	2b05      	cmp	r3, #5
 80012dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012de:	d103      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3a4>
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	672b      	str	r3, [r5, #112]	; 0x70
 80012e6:	e680      	b.n	8000fea <HAL_RCC_OscConfig+0xa6>
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	672b      	str	r3, [r5, #112]	; 0x70
 80012ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	e67c      	b.n	8000ff0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fc53 	bl	8000ba0 <HAL_GetTick>
 80012fa:	1b40      	subs	r0, r0, r5
 80012fc:	42b8      	cmp	r0, r7
 80012fe:	f67f ae7e 	bls.w	8000ffe <HAL_RCC_OscConfig+0xba>
 8001302:	e6af      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001304:	4d57      	ldr	r5, [pc, #348]	; (8001464 <HAL_RCC_OscConfig+0x520>)
 8001306:	692b      	ldr	r3, [r5, #16]
 8001308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800130c:	2b18      	cmp	r3, #24
 800130e:	d07a      	beq.n	8001406 <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8001310:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001312:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001318:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	d167      	bne.n	80013ec <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800131c:	f7ff fc40 	bl	8000ba0 <HAL_GetTick>
 8001320:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	0199      	lsls	r1, r3, #6
 8001326:	d45b      	bmi.n	80013e0 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800132a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800132c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001330:	f023 0303 	bic.w	r3, r3, #3
 8001334:	4313      	orrs	r3, r2
 8001336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001338:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800133c:	62ab      	str	r3, [r5, #40]	; 0x28
 800133e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001342:	3b01      	subs	r3, #1
 8001344:	3a01      	subs	r2, #1
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	0412      	lsls	r2, r2, #16
 800134a:	b29b      	uxth	r3, r3
 800134c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001350:	4313      	orrs	r3, r2
 8001352:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001354:	3a01      	subs	r2, #1
 8001356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800135a:	4313      	orrs	r3, r2
 800135c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800135e:	3a01      	subs	r2, #1
 8001360:	0612      	lsls	r2, r2, #24
 8001362:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001366:	4313      	orrs	r3, r2
 8001368:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800136a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001372:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001374:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800137a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800137e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001382:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001384:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001386:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001388:	f023 030c 	bic.w	r3, r3, #12
 800138c:	4313      	orrs	r3, r2
 800138e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001390:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001392:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001394:	f023 0302 	bic.w	r3, r3, #2
 8001398:	4313      	orrs	r3, r2
 800139a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800139c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013aa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80013ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80013b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013c4:	f7ff fbec 	bl	8000ba0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013c8:	4d26      	ldr	r5, [pc, #152]	; (8001464 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 80013ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013cc:	682b      	ldr	r3, [r5, #0]
 80013ce:	019a      	lsls	r2, r3, #6
 80013d0:	f53f ae1d 	bmi.w	800100e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fbe4 	bl	8000ba0 <HAL_GetTick>
 80013d8:	1b00      	subs	r0, r0, r4
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9f6      	bls.n	80013cc <HAL_RCC_OscConfig+0x488>
 80013de:	e641      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fbde 	bl	8000ba0 <HAL_GetTick>
 80013e4:	1b80      	subs	r0, r0, r6
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d99b      	bls.n	8001322 <HAL_RCC_OscConfig+0x3de>
 80013ea:	e63b      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbd8 	bl	8000ba0 <HAL_GetTick>
 80013f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	f57f ae0a 	bpl.w	800100e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fbd1 	bl	8000ba0 <HAL_GetTick>
 80013fe:	1b00      	subs	r0, r0, r4
 8001400:	2802      	cmp	r0, #2
 8001402:	d9f6      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4ae>
 8001404:	e62e      	b.n	8001064 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001406:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001408:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800140a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140c:	f43f ae2b 	beq.w	8001066 <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001410:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001414:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001416:	4281      	cmp	r1, r0
 8001418:	f47f ad97 	bne.w	8000f4a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800141c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001420:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001422:	428a      	cmp	r2, r1
 8001424:	f47f ad91 	bne.w	8000f4a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001428:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800142a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800142e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001430:	4291      	cmp	r1, r2
 8001432:	f47f ad8a 	bne.w	8000f4a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001436:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001438:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800143c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800143e:	4291      	cmp	r1, r2
 8001440:	f47f ad83 	bne.w	8000f4a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001446:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800144a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800144c:	4291      	cmp	r1, r2
 800144e:	f47f ad7c 	bne.w	8000f4a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001452:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001454:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001458:	3801      	subs	r0, #1
  return HAL_OK;
 800145a:	1a18      	subs	r0, r3, r0
 800145c:	bf18      	it	ne
 800145e:	2001      	movne	r0, #1
 8001460:	e601      	b.n	8001066 <HAL_RCC_OscConfig+0x122>
 8001462:	bf00      	nop
 8001464:	58024400 	.word	0x58024400

08001468 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <HAL_RCC_GetSysClockFreq+0x124>)
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001470:	2a10      	cmp	r2, #16
{
 8001472:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001474:	f000 8086 	beq.w	8001584 <HAL_RCC_GetSysClockFreq+0x11c>
 8001478:	2a18      	cmp	r2, #24
 800147a:	d00c      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x2e>
 800147c:	2a00      	cmp	r2, #0
 800147e:	f040 8083 	bne.w	8001588 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4842      	ldr	r0, [pc, #264]	; (8001590 <HAL_RCC_GetSysClockFreq+0x128>)
 8001486:	f012 0f20 	tst.w	r2, #32
 800148a:	d003      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001492:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001494:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001496:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001498:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800149a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 800149c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80014a0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014a4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80014a6:	d0f5      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014a8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80014ac:	f002 0201 	and.w	r2, r2, #1
 80014b0:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80014b4:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014b8:	4362      	muls	r2, r4
 80014ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80014be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c2:	2901      	cmp	r1, #1
 80014c4:	ee07 2a90 	vmov	s15, r2
 80014c8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80014cc:	d04c      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x100>
 80014ce:	2902      	cmp	r1, #2
 80014d0:	d03c      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0xe4>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d148      	bne.n	8001568 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	0692      	lsls	r2, r2, #26
 80014da:	d527      	bpl.n	800152c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <HAL_RCC_GetSysClockFreq+0x128>)
 80014e0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80014e6:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80014e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ec:	ee07 2a10 	vmov	s14, r2
 80014f0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80014f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80014f8:	ee06 3a90 	vmov	s13, r3
 80014fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001504:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800150a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001514:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001516:	ee07 3a10 	vmov	s14, r3
 800151a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800151e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001522:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001526:	ee17 0a90 	vmov	r0, s15
 800152a:	e7b3      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001532:	ee07 3a10 	vmov	s14, r3
 8001536:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001542:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001594 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001546:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800154a:	e7dd      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001552:	ee07 3a10 	vmov	s14, r3
 8001556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001562:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001598 <HAL_RCC_GetSysClockFreq+0x130>
 8001566:	e7ee      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800156e:	ee07 3a10 	vmov	s14, r3
 8001572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800157e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800159c <HAL_RCC_GetSysClockFreq+0x134>
 8001582:	e7e0      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001586:	e785      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800158a:	e783      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x2c>
 800158c:	58024400 	.word	0x58024400
 8001590:	03d09000 	.word	0x03d09000
 8001594:	4c742400 	.word	0x4c742400
 8001598:	4af42400 	.word	0x4af42400
 800159c:	4a742400 	.word	0x4a742400
 80015a0:	007a1200 	.word	0x007a1200
 80015a4:	003d0900 	.word	0x003d0900

080015a8 <HAL_RCC_ClockConfig>:
{
 80015a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ac:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80015ae:	4604      	mov	r4, r0
 80015b0:	b910      	cbnz	r0, 80015b8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4a88      	ldr	r2, [pc, #544]	; (80017dc <HAL_RCC_ClockConfig+0x234>)
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	428b      	cmp	r3, r1
 80015c2:	f0c0 8093 	bcc.w	80016ec <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	075f      	lsls	r7, r3, #29
 80015ca:	f100 809b 	bmi.w	8001704 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ce:	071e      	lsls	r6, r3, #28
 80015d0:	d50b      	bpl.n	80015ea <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80015d2:	4983      	ldr	r1, [pc, #524]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 80015d4:	6966      	ldr	r6, [r4, #20]
 80015d6:	69c8      	ldr	r0, [r1, #28]
 80015d8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80015dc:	4286      	cmp	r6, r0
 80015de:	d904      	bls.n	80015ea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80015e0:	69ca      	ldr	r2, [r1, #28]
 80015e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015e6:	4332      	orrs	r2, r6
 80015e8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	06d8      	lsls	r0, r3, #27
 80015ec:	d50b      	bpl.n	8001606 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80015ee:	497c      	ldr	r1, [pc, #496]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 80015f0:	69a6      	ldr	r6, [r4, #24]
 80015f2:	69c8      	ldr	r0, [r1, #28]
 80015f4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80015f8:	4286      	cmp	r6, r0
 80015fa:	d904      	bls.n	8001606 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015fc:	69ca      	ldr	r2, [r1, #28]
 80015fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001602:	4332      	orrs	r2, r6
 8001604:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001606:	0699      	lsls	r1, r3, #26
 8001608:	d50b      	bpl.n	8001622 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800160a:	4975      	ldr	r1, [pc, #468]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 800160c:	69e6      	ldr	r6, [r4, #28]
 800160e:	6a08      	ldr	r0, [r1, #32]
 8001610:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001614:	4286      	cmp	r6, r0
 8001616:	d904      	bls.n	8001622 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001618:	6a0a      	ldr	r2, [r1, #32]
 800161a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800161e:	4332      	orrs	r2, r6
 8001620:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001622:	079a      	lsls	r2, r3, #30
 8001624:	d50b      	bpl.n	800163e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001626:	496e      	ldr	r1, [pc, #440]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 8001628:	68e6      	ldr	r6, [r4, #12]
 800162a:	6988      	ldr	r0, [r1, #24]
 800162c:	f000 000f 	and.w	r0, r0, #15
 8001630:	4286      	cmp	r6, r0
 8001632:	d904      	bls.n	800163e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	698a      	ldr	r2, [r1, #24]
 8001636:	f022 020f 	bic.w	r2, r2, #15
 800163a:	4332      	orrs	r2, r6
 800163c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	07df      	lsls	r7, r3, #31
 8001640:	d46e      	bmi.n	8001720 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	079e      	lsls	r6, r3, #30
 8001646:	f100 80a1 	bmi.w	800178c <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164a:	4964      	ldr	r1, [pc, #400]	; (80017dc <HAL_RCC_ClockConfig+0x234>)
 800164c:	680a      	ldr	r2, [r1, #0]
 800164e:	f002 020f 	and.w	r2, r2, #15
 8001652:	42aa      	cmp	r2, r5
 8001654:	f200 80a8 	bhi.w	80017a8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001658:	0758      	lsls	r0, r3, #29
 800165a:	f100 80b1 	bmi.w	80017c0 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165e:	0719      	lsls	r1, r3, #28
 8001660:	d50b      	bpl.n	800167a <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001662:	495f      	ldr	r1, [pc, #380]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 8001664:	6965      	ldr	r5, [r4, #20]
 8001666:	69c8      	ldr	r0, [r1, #28]
 8001668:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800166c:	4285      	cmp	r5, r0
 800166e:	d204      	bcs.n	800167a <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001670:	69ca      	ldr	r2, [r1, #28]
 8001672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001676:	432a      	orrs	r2, r5
 8001678:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167a:	06da      	lsls	r2, r3, #27
 800167c:	d50b      	bpl.n	8001696 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800167e:	4958      	ldr	r1, [pc, #352]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 8001680:	69a5      	ldr	r5, [r4, #24]
 8001682:	69c8      	ldr	r0, [r1, #28]
 8001684:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001688:	4285      	cmp	r5, r0
 800168a:	d204      	bcs.n	8001696 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800168c:	69ca      	ldr	r2, [r1, #28]
 800168e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001692:	432a      	orrs	r2, r5
 8001694:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001696:	069b      	lsls	r3, r3, #26
 8001698:	d50b      	bpl.n	80016b2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 800169c:	69e0      	ldr	r0, [r4, #28]
 800169e:	6a11      	ldr	r1, [r2, #32]
 80016a0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80016a4:	4288      	cmp	r0, r1
 80016a6:	d204      	bcs.n	80016b2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016a8:	6a13      	ldr	r3, [r2, #32]
 80016aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ae:	4303      	orrs	r3, r0
 80016b0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b2:	f7ff fed9 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 80016b6:	494a      	ldr	r1, [pc, #296]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_RCC_ClockConfig+0x23c>)
 80016ba:	698b      	ldr	r3, [r1, #24]
 80016bc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c8:	698b      	ldr	r3, [r1, #24]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <HAL_RCC_ClockConfig+0x240>)
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	fa20 f303 	lsr.w	r3, r0, r3
 80016da:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_RCC_ClockConfig+0x244>)
 80016de:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCC_ClockConfig+0x248>)
}
 80016e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f7ff b9fa 	b.w	8000ae0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f023 030f 	bic.w	r3, r3, #15
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	428b      	cmp	r3, r1
 80016fe:	f47f af58 	bne.w	80015b2 <HAL_RCC_ClockConfig+0xa>
 8001702:	e760      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001704:	4936      	ldr	r1, [pc, #216]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 8001706:	6926      	ldr	r6, [r4, #16]
 8001708:	6988      	ldr	r0, [r1, #24]
 800170a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800170e:	4286      	cmp	r6, r0
 8001710:	f67f af5d 	bls.w	80015ce <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001714:	698a      	ldr	r2, [r1, #24]
 8001716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800171a:	4332      	orrs	r2, r6
 800171c:	618a      	str	r2, [r1, #24]
 800171e:	e756      	b.n	80015ce <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 8001722:	68a1      	ldr	r1, [r4, #8]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800172a:	430a      	orrs	r2, r1
 800172c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001730:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	2a02      	cmp	r2, #2
 8001734:	d11d      	bne.n	8001772 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001736:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800173a:	f43f af3a 	beq.w	80015b2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4e28      	ldr	r6, [pc, #160]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001744:	6933      	ldr	r3, [r6, #16]
 8001746:	f023 0307 	bic.w	r3, r3, #7
 800174a:	4313      	orrs	r3, r2
 800174c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800174e:	f7ff fa27 	bl	8000ba0 <HAL_GetTick>
 8001752:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001754:	6933      	ldr	r3, [r6, #16]
 8001756:	6862      	ldr	r2, [r4, #4]
 8001758:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800175c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001760:	f43f af6f 	beq.w	8001642 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7ff fa1c 	bl	8000ba0 <HAL_GetTick>
 8001768:	1bc0      	subs	r0, r0, r7
 800176a:	4540      	cmp	r0, r8
 800176c:	d9f2      	bls.n	8001754 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 800176e:	2003      	movs	r0, #3
 8001770:	e720      	b.n	80015b4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	2a03      	cmp	r2, #3
 8001774:	d102      	bne.n	800177c <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001776:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800177a:	e7de      	b.n	800173a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800177c:	2a01      	cmp	r2, #1
 800177e:	d102      	bne.n	8001786 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001780:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001784:	e7d9      	b.n	800173a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001786:	f013 0f04 	tst.w	r3, #4
 800178a:	e7d6      	b.n	800173a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800178c:	4914      	ldr	r1, [pc, #80]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 800178e:	68e6      	ldr	r6, [r4, #12]
 8001790:	6988      	ldr	r0, [r1, #24]
 8001792:	f000 000f 	and.w	r0, r0, #15
 8001796:	4286      	cmp	r6, r0
 8001798:	f4bf af57 	bcs.w	800164a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	698a      	ldr	r2, [r1, #24]
 800179e:	f022 020f 	bic.w	r2, r2, #15
 80017a2:	4332      	orrs	r2, r6
 80017a4:	618a      	str	r2, [r1, #24]
 80017a6:	e750      	b.n	800164a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	680a      	ldr	r2, [r1, #0]
 80017aa:	f022 020f 	bic.w	r2, r2, #15
 80017ae:	432a      	orrs	r2, r5
 80017b0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	680a      	ldr	r2, [r1, #0]
 80017b4:	f002 020f 	and.w	r2, r2, #15
 80017b8:	42aa      	cmp	r2, r5
 80017ba:	f47f aefa 	bne.w	80015b2 <HAL_RCC_ClockConfig+0xa>
 80017be:	e74b      	b.n	8001658 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <HAL_RCC_ClockConfig+0x238>)
 80017c2:	6925      	ldr	r5, [r4, #16]
 80017c4:	6988      	ldr	r0, [r1, #24]
 80017c6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80017ca:	4285      	cmp	r5, r0
 80017cc:	f4bf af47 	bcs.w	800165e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017d0:	698a      	ldr	r2, [r1, #24]
 80017d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017d6:	432a      	orrs	r2, r5
 80017d8:	618a      	str	r2, [r1, #24]
 80017da:	e740      	b.n	800165e <HAL_RCC_ClockConfig+0xb6>
 80017dc:	52002000 	.word	0x52002000
 80017e0:	58024400 	.word	0x58024400
 80017e4:	08005820 	.word	0x08005820
 80017e8:	24000004 	.word	0x24000004
 80017ec:	24000000 	.word	0x24000000
 80017f0:	2400000c 	.word	0x2400000c

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80017f6:	4c0c      	ldr	r4, [pc, #48]	; (8001828 <HAL_RCC_GetHCLKFreq+0x34>)
 80017f8:	f7ff fe36 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <HAL_RCC_GetHCLKFreq+0x38>)
 80017fe:	69a3      	ldr	r3, [r4, #24]
 8001800:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001804:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001806:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001808:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800180c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001810:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa22 f003 	lsr.w	r0, r2, r3
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_RCC_GetHCLKFreq+0x3c>)
 8001820:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_RCC_GetHCLKFreq+0x40>)
 8001824:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8001826:	bd10      	pop	{r4, pc}
 8001828:	58024400 	.word	0x58024400
 800182c:	08005820 	.word	0x08005820
 8001830:	24000004 	.word	0x24000004
 8001834:	24000000 	.word	0x24000000

08001838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001838:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800183a:	f7ff ffdb 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800184e:	40d8      	lsrs	r0, r3
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop
 8001854:	58024400 	.word	0x58024400
 8001858:	08005820 	.word	0x08005820

0800185c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800185c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800185e:	f7ff ffc9 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001872:	40d8      	lsrs	r0, r3
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop
 8001878:	58024400 	.word	0x58024400
 800187c:	08005820 	.word	0x08005820

08001880 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001882:	4c3a      	ldr	r4, [pc, #232]	; (800196c <RCCEx_PLL2_Config+0xec>)
{
 8001884:	4606      	mov	r6, r0
 8001886:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001888:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b03      	cmp	r3, #3
 8001890:	d069      	beq.n	8001966 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001898:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800189a:	f7ff f981 	bl	8000ba0 <HAL_GetTick>
 800189e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	011a      	lsls	r2, r3, #4
 80018a4:	d44b      	bmi.n	800193e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80018a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018a8:	6832      	ldr	r2, [r6, #0]
 80018aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80018b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80018b4:	68b3      	ldr	r3, [r6, #8]
 80018b6:	68f2      	ldr	r2, [r6, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	3a01      	subs	r2, #1
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	0412      	lsls	r2, r2, #16
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80018c6:	4313      	orrs	r3, r2
 80018c8:	6872      	ldr	r2, [r6, #4]
 80018ca:	3a01      	subs	r2, #1
 80018cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018d0:	4313      	orrs	r3, r2
 80018d2:	6932      	ldr	r2, [r6, #16]
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0612      	lsls	r2, r2, #24
 80018d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80018dc:	4313      	orrs	r3, r2
 80018de:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80018e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018e2:	6972      	ldr	r2, [r6, #20]
 80018e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018e8:	4313      	orrs	r3, r2
 80018ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80018ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018ee:	69b2      	ldr	r2, [r6, #24]
 80018f0:	f023 0320 	bic.w	r3, r3, #32
 80018f4:	4313      	orrs	r3, r2
 80018f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80018f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018fa:	f023 0310 	bic.w	r3, r3, #16
 80018fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8001900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001902:	69f2      	ldr	r2, [r6, #28]
 8001904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001908:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800190c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001910:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800191a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800191c:	b9b5      	cbnz	r5, 800194c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800191e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001922:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8001924:	4c11      	ldr	r4, [pc, #68]	; (800196c <RCCEx_PLL2_Config+0xec>)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800192c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192e:	f7ff f937 	bl	8000ba0 <HAL_GetTick>
 8001932:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	d50f      	bpl.n	800195a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800193a:	2000      	movs	r0, #0
 800193c:	e005      	b.n	800194a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800193e:	f7ff f92f 	bl	8000ba0 <HAL_GetTick>
 8001942:	1bc0      	subs	r0, r0, r7
 8001944:	2802      	cmp	r0, #2
 8001946:	d9ab      	bls.n	80018a0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001948:	2003      	movs	r0, #3
}
 800194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800194c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800194e:	bf0c      	ite	eq
 8001950:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001954:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001958:	e7e3      	b.n	8001922 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800195a:	f7ff f921 	bl	8000ba0 <HAL_GetTick>
 800195e:	1b40      	subs	r0, r0, r5
 8001960:	2802      	cmp	r0, #2
 8001962:	d9e7      	bls.n	8001934 <RCCEx_PLL2_Config+0xb4>
 8001964:	e7f0      	b.n	8001948 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	e7ef      	b.n	800194a <RCCEx_PLL2_Config+0xca>
 800196a:	bf00      	nop
 800196c:	58024400 	.word	0x58024400

08001970 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001972:	4c3a      	ldr	r4, [pc, #232]	; (8001a5c <RCCEx_PLL3_Config+0xec>)
{
 8001974:	4606      	mov	r6, r0
 8001976:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b03      	cmp	r3, #3
 8001980:	d069      	beq.n	8001a56 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001988:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198a:	f7ff f909 	bl	8000ba0 <HAL_GetTick>
 800198e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	009a      	lsls	r2, r3, #2
 8001994:	d44b      	bmi.n	8001a2e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001998:	6832      	ldr	r2, [r6, #0]
 800199a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800199e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80019a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80019a4:	68b3      	ldr	r3, [r6, #8]
 80019a6:	68f2      	ldr	r2, [r6, #12]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	3a01      	subs	r2, #1
 80019ac:	025b      	lsls	r3, r3, #9
 80019ae:	0412      	lsls	r2, r2, #16
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80019b6:	4313      	orrs	r3, r2
 80019b8:	6872      	ldr	r2, [r6, #4]
 80019ba:	3a01      	subs	r2, #1
 80019bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019c0:	4313      	orrs	r3, r2
 80019c2:	6932      	ldr	r2, [r6, #16]
 80019c4:	3a01      	subs	r2, #1
 80019c6:	0612      	lsls	r2, r2, #24
 80019c8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80019cc:	4313      	orrs	r3, r2
 80019ce:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80019d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019d2:	6972      	ldr	r2, [r6, #20]
 80019d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019d8:	4313      	orrs	r3, r2
 80019da:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80019dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019de:	69b2      	ldr	r2, [r6, #24]
 80019e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019e4:	4313      	orrs	r3, r2
 80019e6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80019e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80019f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019f2:	69f2      	ldr	r2, [r6, #28]
 80019f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a00:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001a0c:	b9b5      	cbnz	r5, 8001a3c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001a12:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001a14:	4c11      	ldr	r4, [pc, #68]	; (8001a5c <RCCEx_PLL3_Config+0xec>)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1e:	f7ff f8bf 	bl	8000ba0 <HAL_GetTick>
 8001a22:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	d50f      	bpl.n	8001a4a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	e005      	b.n	8001a3a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001a2e:	f7ff f8b7 	bl	8000ba0 <HAL_GetTick>
 8001a32:	1bc0      	subs	r0, r0, r7
 8001a34:	2802      	cmp	r0, #2
 8001a36:	d9ab      	bls.n	8001990 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001a38:	2003      	movs	r0, #3
}
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001a3c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001a3e:	bf0c      	ite	eq
 8001a40:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001a44:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8001a48:	e7e3      	b.n	8001a12 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001a4a:	f7ff f8a9 	bl	8000ba0 <HAL_GetTick>
 8001a4e:	1b40      	subs	r0, r0, r5
 8001a50:	2802      	cmp	r0, #2
 8001a52:	d9e7      	bls.n	8001a24 <RCCEx_PLL3_Config+0xb4>
 8001a54:	e7f0      	b.n	8001a38 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e7ef      	b.n	8001a3a <RCCEx_PLL3_Config+0xca>
 8001a5a:	bf00      	nop
 8001a5c:	58024400 	.word	0x58024400

08001a60 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a64:	6806      	ldr	r6, [r0, #0]
{
 8001a66:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a68:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001a6e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a74:	d02e      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001a76:	d813      	bhi.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001a78:	b1f3      	cbz	r3, 8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7e:	d021      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001a80:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001a82:	682b      	ldr	r3, [r5, #0]
 8001a84:	05dc      	lsls	r4, r3, #23
 8001a86:	f140 80ea 	bpl.w	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001a8a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	f200 80e5 	bhi.w	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001a92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a96:	0024      	.short	0x0024
 8001a98:	00dd002b 	.word	0x00dd002b
 8001a9c:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001aa4:	d1ec      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001aa6:	4ab3      	ldr	r2, [pc, #716]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8001aac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001aae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ab6:	e7e4      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ab8:	4aae      	ldr	r2, [pc, #696]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001aba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001ac2:	e7f0      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	3004      	adds	r0, #4
 8001ac8:	f7ff feda 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001acc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1d7      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8001ad2:	e7e8      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	3024      	adds	r0, #36	; 0x24
 8001ad8:	f7ff ff4a 	bl	8001970 <RCCEx_PLL3_Config>
 8001adc:	e7f6      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ade:	4aa5      	ldr	r2, [pc, #660]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001ae0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ae8:	4634      	mov	r4, r6
 8001aea:	e004      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001aec:	2100      	movs	r1, #0
 8001aee:	1d28      	adds	r0, r5, #4
 8001af0:	f7ff fec6 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001af4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001af6:	2c00      	cmp	r4, #0
 8001af8:	f040 80b3 	bne.w	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x202>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001afc:	4a9d      	ldr	r2, [pc, #628]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001afe:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001b00:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	0598      	lsls	r0, r3, #22
 8001b0e:	d50d      	bpl.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001b10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b12:	2b80      	cmp	r3, #128	; 0x80
 8001b14:	f000 80c2 	beq.w	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8001b18:	f200 80a5 	bhi.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80b1 	beq.w	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8001b22:	2b40      	cmp	r3, #64	; 0x40
 8001b24:	f000 80b4 	beq.w	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8001b28:	2601      	movs	r6, #1
 8001b2a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	0559      	lsls	r1, r3, #21
 8001b30:	d510      	bpl.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001b32:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3a:	f000 80d4 	beq.w	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001b3e:	f200 80b5 	bhi.w	8001cac <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80c3 	beq.w	8001cce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8001b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4c:	f000 80c5 	beq.w	8001cda <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8001b50:	2601      	movs	r6, #1
 8001b52:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	051a      	lsls	r2, r3, #20
 8001b58:	d510      	bpl.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001b5a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b62:	f000 80e5 	beq.w	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001b66:	f200 80c6 	bhi.w	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80d4 	beq.w	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	f000 80d6 	beq.w	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8001b78:	2601      	movs	r6, #1
 8001b7a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001b7c:	682b      	ldr	r3, [r5, #0]
 8001b7e:	019b      	lsls	r3, r3, #6
 8001b80:	d50d      	bpl.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8001b82:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	f000 80ed 	beq.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001b8a:	f200 80d9 	bhi.w	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80d9 	beq.w	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	f000 80df 	beq.w	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001b9a:	2601      	movs	r6, #1
 8001b9c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	04df      	lsls	r7, r3, #19
 8001ba2:	d50f      	bpl.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001ba4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	f000 8101 	beq.w	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8001bae:	f200 80e3 	bhi.w	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80f0 	beq.w	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8001bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbc:	f000 80f2 	beq.w	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8001bc0:	2601      	movs	r6, #1
 8001bc2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	0498      	lsls	r0, r3, #18
 8001bc8:	d50f      	bpl.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001bca:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd0:	f000 810e 	beq.w	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8001bd4:	f200 80f4 	bhi.w	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80fa 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	f000 80ff 	beq.w	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001be6:	2601      	movs	r6, #1
 8001be8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	0459      	lsls	r1, r3, #17
 8001bee:	d510      	bpl.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001bf0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf8:	f000 811b 	beq.w	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8001bfc:	f200 8100 	bhi.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8106 	beq.w	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8001c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c0a:	f000 810c 	beq.w	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8001c0e:	2601      	movs	r6, #1
 8001c10:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	d50d      	bpl.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    switch(PeriphClkInit->FdcanClockSelection)
 8001c18:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c1e:	f000 8110 	beq.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c26:	f000 811a 	beq.w	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 810e 	beq.w	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001c30:	2601      	movs	r6, #1
 8001c32:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	01db      	lsls	r3, r3, #7
 8001c38:	f140 8127 	bpl.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch(PeriphClkInit->FmcClockSelection)
 8001c3c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	f200 8167 	bhi.w	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8001c44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c48:	01130118 	.word	0x01130118
 8001c4c:	0118015f 	.word	0x0118015f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c50:	2100      	movs	r1, #0
 8001c52:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001c56:	f7ff fe8b 	bl	8001970 <RCCEx_PLL3_Config>
 8001c5a:	e74b      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c5c:	2601      	movs	r6, #1
 8001c5e:	4634      	mov	r4, r6
 8001c60:	e753      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8001c62:	4626      	mov	r6, r4
 8001c64:	e751      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001c66:	2bc0      	cmp	r3, #192	; 0xc0
 8001c68:	d003      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6e:	f47f af5b 	bne.w	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8001c72:	b9cc      	cbnz	r4, 8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001c74:	4a3f      	ldr	r2, [pc, #252]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001c76:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8001c78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001c7a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	6513      	str	r3, [r2, #80]	; 0x50
 8001c82:	e753      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c84:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001c86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c8e:	e7f0      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c90:	2100      	movs	r1, #0
 8001c92:	1d28      	adds	r0, r5, #4
 8001c94:	f7ff fdf4 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c98:	4604      	mov	r4, r0
      break;
 8001c9a:	e7ea      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ca2:	f7ff fe65 	bl	8001970 <RCCEx_PLL3_Config>
 8001ca6:	e7f7      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001ca8:	4626      	mov	r6, r4
 8001caa:	e73f      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001cb0:	d003      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cb6:	f47f af4b 	bne.w	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8001cba:	b9d4      	cbnz	r4, 8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001cbe:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001cc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cc4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ccc:	e742      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cce:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001cd0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001cd8:	e7ef      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	1d28      	adds	r0, r5, #4
 8001cde:	f7ff fdcf 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ce2:	4604      	mov	r4, r0
      break;
 8001ce4:	e7e9      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x25a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001cec:	f7ff fe40 	bl	8001970 <RCCEx_PLL3_Config>
 8001cf0:	e7f7      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8001cf2:	4626      	mov	r6, r4
 8001cf4:	e72e      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001cf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cfa:	d003      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8001cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d00:	f47f af3a 	bne.w	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8001d04:	b9d4      	cbnz	r4, 8001d3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d08:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001d0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d12:	430b      	orrs	r3, r1
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	e731      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d18:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d22:	e7ef      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d24:	2100      	movs	r1, #0
 8001d26:	1d28      	adds	r0, r5, #4
 8001d28:	f7ff fdaa 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d2c:	4604      	mov	r4, r0
      break;
 8001d2e:	e7e9      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d30:	2100      	movs	r1, #0
 8001d32:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001d36:	f7ff fe1b 	bl	8001970 <RCCEx_PLL3_Config>
 8001d3a:	e7f7      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8001d3c:	4626      	mov	r6, r4
 8001d3e:	e71d      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->QspiClockSelection)
 8001d40:	2b30      	cmp	r3, #48	; 0x30
 8001d42:	f47f af2a 	bne.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8001d46:	b99c      	cbnz	r4, 8001d70 <HAL_RCCEx_PeriphCLKConfig+0x310>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d4a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001d4c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d52:	430b      	orrs	r3, r1
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	e722      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d62:	e7f0      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001d64:	2102      	movs	r1, #2
 8001d66:	1d28      	adds	r0, r5, #4
 8001d68:	f7ff fd8a 	bl	8001880 <RCCEx_PLL2_Config>
 8001d6c:	4604      	mov	r4, r0
      break;
 8001d6e:	e7ea      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001d70:	4626      	mov	r6, r4
 8001d72:	e714      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001d74:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d82:	f47f af1d 	bne.w	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8001d86:	b9cc      	cbnz	r4, 8001dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001d88:	4aa2      	ldr	r2, [pc, #648]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001d8a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001d8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d92:	430b      	orrs	r3, r1
 8001d94:	6513      	str	r3, [r2, #80]	; 0x50
 8001d96:	e715      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d98:	4a9e      	ldr	r2, [pc, #632]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001da2:	e7f0      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001da4:	2100      	movs	r1, #0
 8001da6:	1d28      	adds	r0, r5, #4
 8001da8:	f7ff fd6a 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001dac:	4604      	mov	r4, r0
      break;
 8001dae:	e7ea      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001db0:	2100      	movs	r1, #0
 8001db2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001db6:	f7ff fddb 	bl	8001970 <RCCEx_PLL3_Config>
 8001dba:	e7f7      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8001dbc:	4626      	mov	r6, r4
 8001dbe:	e701      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001dc4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001dca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001dce:	f47f af0a 	bne.w	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8001dd2:	b99c      	cbnz	r4, 8001dfc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001dd4:	4a8f      	ldr	r2, [pc, #572]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001dd6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001dd8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001dda:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001dde:	430b      	orrs	r3, r1
 8001de0:	6513      	str	r3, [r2, #80]	; 0x50
 8001de2:	e702      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001de4:	2101      	movs	r1, #1
 8001de6:	1d28      	adds	r0, r5, #4
 8001de8:	f7ff fd4a 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001dec:	4604      	mov	r4, r0
      break;
 8001dee:	e7f0      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001df0:	2101      	movs	r1, #1
 8001df2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001df6:	f7ff fdbb 	bl	8001970 <RCCEx_PLL3_Config>
 8001dfa:	e7f7      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8001dfc:	4626      	mov	r6, r4
 8001dfe:	e6f4      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e04:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001e08:	d003      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8001e0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e0e:	f47f aefe 	bne.w	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8001e12:	b9a4      	cbnz	r4, 8001e3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001e14:	4a7f      	ldr	r2, [pc, #508]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001e16:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8001e1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e1c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	e6f5      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e26:	2101      	movs	r1, #1
 8001e28:	1d28      	adds	r0, r5, #4
 8001e2a:	f7ff fd29 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e2e:	4604      	mov	r4, r0
      break;
 8001e30:	e7ef      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e32:	2101      	movs	r1, #1
 8001e34:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001e38:	f7ff fd9a 	bl	8001970 <RCCEx_PLL3_Config>
 8001e3c:	e7f7      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8001e3e:	4626      	mov	r6, r4
 8001e40:	e6e7      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e42:	4a74      	ldr	r2, [pc, #464]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001e44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001e4c:	b96c      	cbnz	r4, 8001e6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e4e:	4a71      	ldr	r2, [pc, #452]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001e50:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8001e52:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001e54:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8001e5c:	e6ea      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	1d28      	adds	r0, r5, #4
 8001e62:	f7ff fd0d 	bl	8001880 <RCCEx_PLL2_Config>
 8001e66:	4604      	mov	r4, r0
      break;
 8001e68:	e7f0      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001e6a:	4626      	mov	r6, r4
 8001e6c:	e6e2      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e6e:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001e70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d14d      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001e7c:	4a65      	ldr	r2, [pc, #404]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001e7e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001e80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	430b      	orrs	r3, r1
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	025f      	lsls	r7, r3, #9
 8001e8e:	d54d      	bpl.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e90:	4f61      	ldr	r7, [pc, #388]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001e9a:	f7fe fe81 	bl	8000ba0 <HAL_GetTick>
 8001e9e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	05d8      	lsls	r0, r3, #23
 8001ea4:	d53a      	bpl.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if(ret == HAL_OK)
 8001ea6:	2c00      	cmp	r4, #0
 8001ea8:	d16c      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x524>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001eaa:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001eac:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8001eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eb2:	4042      	eors	r2, r0
 8001eb4:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x472>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ebc:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ebe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ec2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001ec6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001eca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001ece:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001ed0:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001ed2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001ed6:	d040      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001ede:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ee2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ee6:	d149      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8001ee8:	6908      	ldr	r0, [r1, #16]
 8001eea:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8001eec:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001ef0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001ef4:	4302      	orrs	r2, r0
 8001ef6:	610a      	str	r2, [r1, #16]
 8001ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efc:	4a45      	ldr	r2, [pc, #276]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001efe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e012      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f06:	2102      	movs	r1, #2
 8001f08:	1d28      	adds	r0, r5, #4
 8001f0a:	f7ff fcb9 	bl	8001880 <RCCEx_PLL2_Config>
 8001f0e:	4604      	mov	r4, r0
      break;
 8001f10:	e7b2      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->FmcClockSelection)
 8001f12:	2601      	movs	r6, #1
 8001f14:	4634      	mov	r4, r6
 8001f16:	e7b8      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001f18:	4626      	mov	r6, r4
 8001f1a:	e7b6      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fe40 	bl	8000ba0 <HAL_GetTick>
 8001f20:	eba0 0008 	sub.w	r0, r0, r8
 8001f24:	2864      	cmp	r0, #100	; 0x64
 8001f26:	d9bb      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x440>
        ret = HAL_TIMEOUT;
 8001f28:	2603      	movs	r6, #3
 8001f2a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	07da      	lsls	r2, r3, #31
 8001f30:	d508      	bpl.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f32:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8001f38:	d826      	bhi.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8001f3a:	b35b      	cbz	r3, 8001f94 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d032      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8001f40:	2601      	movs	r6, #1
 8001f42:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	079b      	lsls	r3, r3, #30
 8001f48:	d548      	bpl.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001f4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d85b      	bhi.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8001f50:	e8df f003 	tbb	[pc, r3]
 8001f54:	3c54373c 	.word	0x3c54373c
 8001f58:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fe21 	bl	8000ba0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f5e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
        tickstart = HAL_GetTick();
 8001f62:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f68:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8001f6c:	0799      	lsls	r1, r3, #30
 8001f6e:	d4b3      	bmi.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x478>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fe16 	bl	8000ba0 <HAL_GetTick>
 8001f74:	1bc0      	subs	r0, r0, r7
 8001f76:	4548      	cmp	r0, r9
 8001f78:	d9f6      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8001f7a:	e7d5      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7c:	690a      	ldr	r2, [r1, #16]
 8001f7e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001f82:	e7b8      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8001f84:	4626      	mov	r6, r4
 8001f86:	e7d1      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f88:	f023 0208 	bic.w	r2, r3, #8
 8001f8c:	2a20      	cmp	r2, #32
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8001f90:	2b18      	cmp	r3, #24
 8001f92:	d1d5      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if(ret == HAL_OK)
 8001f94:	b99c      	cbnz	r4, 8001fbe <HAL_RCCEx_PeriphCLKConfig+0x55e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001f96:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001f98:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8001f9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001f9c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6553      	str	r3, [r2, #84]	; 0x54
 8001fa4:	e7ce      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	1d28      	adds	r0, r5, #4
 8001faa:	f7ff fc69 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001fae:	4604      	mov	r4, r0
      break;
 8001fb0:	e7f0      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001fb8:	f7ff fcda 	bl	8001970 <RCCEx_PLL3_Config>
 8001fbc:	e7f7      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8001fbe:	4626      	mov	r6, r4
 8001fc0:	e7c0      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	1d28      	adds	r0, r5, #4
 8001fc6:	f7ff fc5b 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001fca:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001fcc:	b9fc      	cbnz	r4, 800200e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8001fd0:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8001fd2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001fd4:	f023 0307 	bic.w	r3, r3, #7
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	075f      	lsls	r7, r3, #29
 8001fe0:	d52e      	bpl.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001fe2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	f200 8140 	bhi.w	800226c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8001fec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001ff0:	0018001d 	.word	0x0018001d
 8001ff4:	001d0138 	.word	0x001d0138
 8001ff8:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002002:	f7ff fcb5 	bl	8001970 <RCCEx_PLL3_Config>
 8002006:	e7e0      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002008:	2601      	movs	r6, #1
 800200a:	4634      	mov	r4, r6
 800200c:	e7e6      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800200e:	4626      	mov	r6, r4
 8002010:	e7e4      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	58024800 	.word	0x58024800
 800201c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002020:	2101      	movs	r1, #1
 8002022:	1d28      	adds	r0, r5, #4
 8002024:	f7ff fc2c 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002028:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800202a:	2c00      	cmp	r4, #0
 800202c:	f040 8121 	bne.w	8002272 <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002030:	4ab2      	ldr	r2, [pc, #712]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002032:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8002036:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002038:	f023 0307 	bic.w	r3, r3, #7
 800203c:	430b      	orrs	r3, r1
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	0698      	lsls	r0, r3, #26
 8002044:	d510      	bpl.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002046:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800204a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204e:	f000 812b 	beq.w	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8002052:	f200 8110 	bhi.w	8002276 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8116 	beq.w	8002288 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800205c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002060:	f000 811c 	beq.w	800229c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002064:	2601      	movs	r6, #1
 8002066:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	0659      	lsls	r1, r3, #25
 800206c:	d510      	bpl.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x630>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800206e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	f000 8138 	beq.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800207a:	f200 811d 	bhi.w	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8123 	beq.w	80022ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002088:	f000 8129 	beq.w	80022de <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800208c:	2601      	movs	r6, #1
 800208e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	061a      	lsls	r2, r3, #24
 8002094:	d510      	bpl.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002096:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800209a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209e:	f000 8148 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 80020a2:	f200 812d 	bhi.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8133 	beq.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80020ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b0:	f000 8139 	beq.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80020b4:	2601      	movs	r6, #1
 80020b6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80020b8:	682b      	ldr	r3, [r5, #0]
 80020ba:	071b      	lsls	r3, r3, #28
 80020bc:	d514      	bpl.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80020be:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80020c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c6:	d107      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80020c8:	2102      	movs	r1, #2
 80020ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80020ce:	f7ff fc4f 	bl	8001970 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 80020d2:	2800      	cmp	r0, #0
 80020d4:	bf18      	it	ne
 80020d6:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80020d8:	4a88      	ldr	r2, [pc, #544]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80020da:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80020de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	06df      	lsls	r7, r3, #27
 80020ec:	d514      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80020ee:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d107      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80020f8:	2102      	movs	r1, #2
 80020fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80020fe:	f7ff fc37 	bl	8001970 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8002102:	2800      	cmp	r0, #0
 8002104:	bf18      	it	ne
 8002106:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002108:	4a7c      	ldr	r2, [pc, #496]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800210a:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800210e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	430b      	orrs	r3, r1
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	0318      	lsls	r0, r3, #12
 800211c:	d51a      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->AdcClockSelection)
 800211e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8002122:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002126:	f000 810c 	beq.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800212a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800212e:	d006      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8002130:	2900      	cmp	r1, #0
 8002132:	f040 810c 	bne.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002136:	1d28      	adds	r0, r5, #4
 8002138:	f7ff fba2 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800213c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800213e:	2c00      	cmp	r4, #0
 8002140:	f040 8108 	bne.w	8002354 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002144:	4a6d      	ldr	r2, [pc, #436]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002146:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800214a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800214c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002150:	430b      	orrs	r3, r1
 8002152:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	0359      	lsls	r1, r3, #13
 8002158:	d51c      	bpl.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->UsbClockSelection)
 800215a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800215e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002162:	f000 80f9 	beq.w	8002358 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8002166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800216a:	d008      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800216c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002170:	f040 80f9 	bne.w	8002366 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002174:	4a61      	ldr	r2, [pc, #388]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002176:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800217e:	2c00      	cmp	r4, #0
 8002180:	f040 80f4 	bne.w	800236c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002184:	4a5d      	ldr	r2, [pc, #372]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002186:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800218a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800218c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002190:	430b      	orrs	r3, r1
 8002192:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	03da      	lsls	r2, r3, #15
 8002198:	d509      	bpl.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->SdmmcClockSelection)
 800219a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80e7 	beq.w	8002370 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	f000 80f1 	beq.w	800238c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80021aa:	2601      	movs	r6, #1
 80021ac:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021ae:	682b      	ldr	r3, [r5, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	d507      	bpl.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x764>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80021b4:	2102      	movs	r1, #2
 80021b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80021ba:	f7ff fbd9 	bl	8001970 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 80021be:	2800      	cmp	r0, #0
 80021c0:	bf18      	it	ne
 80021c2:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	039f      	lsls	r7, r3, #14
 80021c8:	d50a      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    switch(PeriphClkInit->RngClockSelection)
 80021ca:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80021cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80021d0:	f000 80f2 	beq.w	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
 80021d4:	f200 80e2 	bhi.w	800239c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 80021d8:	2900      	cmp	r1, #0
 80021da:	f000 80e5 	beq.w	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80021de:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021e0:	02dc      	lsls	r4, r3, #11
 80021e2:	d506      	bpl.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x792>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021e4:	4945      	ldr	r1, [pc, #276]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80021e6:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80021e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80021ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ee:	4302      	orrs	r2, r0
 80021f0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80021f2:	00d8      	lsls	r0, r3, #3
 80021f4:	d507      	bpl.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80021f6:	4941      	ldr	r1, [pc, #260]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80021f8:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 80021fc:	690a      	ldr	r2, [r1, #16]
 80021fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002202:	4302      	orrs	r2, r0
 8002204:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002206:	0299      	lsls	r1, r3, #10
 8002208:	d506      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800220a:	493c      	ldr	r1, [pc, #240]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800220c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800220e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002210:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002214:	4302      	orrs	r2, r0
 8002216:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	d509      	bpl.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800221c:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800221e:	6911      	ldr	r1, [r2, #16]
 8002220:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002224:	6111      	str	r1, [r2, #16]
 8002226:	6911      	ldr	r1, [r2, #16]
 8002228:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800222c:	4301      	orrs	r1, r0
 800222e:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002230:	2b00      	cmp	r3, #0
 8002232:	da06      	bge.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002234:	4931      	ldr	r1, [pc, #196]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002236:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002238:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800223a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800223e:	4302      	orrs	r2, r0
 8002240:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	d507      	bpl.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 8002248:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800224c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800224e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002252:	430b      	orrs	r3, r1
 8002254:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002256:	1e30      	subs	r0, r6, #0
 8002258:	bf18      	it	ne
 800225a:	2001      	movne	r0, #1
 800225c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002260:	2101      	movs	r1, #1
 8002262:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002266:	f7ff fb83 	bl	8001970 <RCCEx_PLL3_Config>
 800226a:	e6dd      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800226c:	2601      	movs	r6, #1
 800226e:	4634      	mov	r4, r6
 8002270:	e6e6      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 8002272:	4626      	mov	r6, r4
 8002274:	e6e4      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002276:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800227a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800227e:	d003      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8002280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002284:	f47f aeee 	bne.w	8002064 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if(ret == HAL_OK)
 8002288:	b9a4      	cbnz	r4, 80022b4 <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 800228c:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8002290:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002292:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002296:	430b      	orrs	r3, r1
 8002298:	6553      	str	r3, [r2, #84]	; 0x54
 800229a:	e6e5      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x608>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800229c:	2100      	movs	r1, #0
 800229e:	1d28      	adds	r0, r5, #4
 80022a0:	f7ff faee 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022a4:	4604      	mov	r4, r0
      break;
 80022a6:	e7ef      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x828>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022a8:	2102      	movs	r1, #2
 80022aa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022ae:	f7ff fb5f 	bl	8001970 <RCCEx_PLL3_Config>
 80022b2:	e7f7      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80022b4:	4626      	mov	r6, r4
 80022b6:	e6d7      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80022b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80022c0:	d003      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80022c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80022c6:	f47f aee1 	bne.w	800208c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    if(ret == HAL_OK)
 80022ca:	b9a4      	cbnz	r4, 80022f6 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x89c>)
 80022ce:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80022d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80022d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80022d8:	430b      	orrs	r3, r1
 80022da:	6593      	str	r3, [r2, #88]	; 0x58
 80022dc:	e6d8      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022de:	2100      	movs	r1, #0
 80022e0:	1d28      	adds	r0, r5, #4
 80022e2:	f7ff facd 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022e6:	4604      	mov	r4, r0
      break;
 80022e8:	e7ef      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022ea:	2102      	movs	r1, #2
 80022ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022f0:	f7ff fb3e 	bl	8001970 <RCCEx_PLL3_Config>
 80022f4:	e7f7      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80022f6:	4626      	mov	r6, r4
 80022f8:	e6ca      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002304:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002308:	d003      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800230a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800230e:	f47f aed1 	bne.w	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    if(ret == HAL_OK)
 8002312:	b9a4      	cbnz	r4, 800233e <HAL_RCCEx_PeriphCLKConfig+0x8de>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002316:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800231a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800231c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002320:	430b      	orrs	r3, r1
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
 8002324:	e6c8      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002326:	2100      	movs	r1, #0
 8002328:	1d28      	adds	r0, r5, #4
 800232a:	f7ff faa9 	bl	8001880 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800232e:	4604      	mov	r4, r0
      break;
 8002330:	e7ef      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002332:	2102      	movs	r1, #2
 8002334:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002338:	f7ff fb1a 	bl	8001970 <RCCEx_PLL3_Config>
 800233c:	e7f7      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 800233e:	4626      	mov	r6, r4
 8002340:	e6ba      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x658>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002342:	2102      	movs	r1, #2
 8002344:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002348:	f7ff fb12 	bl	8001970 <RCCEx_PLL3_Config>
 800234c:	e6f6      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
    switch(PeriphClkInit->AdcClockSelection)
 800234e:	2601      	movs	r6, #1
 8002350:	4634      	mov	r4, r6
 8002352:	e6ff      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8002354:	4626      	mov	r6, r4
 8002356:	e6fd      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002358:	2101      	movs	r1, #1
 800235a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800235e:	f7ff fb07 	bl	8001970 <RCCEx_PLL3_Config>
 8002362:	4604      	mov	r4, r0
      break;
 8002364:	e70b      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x71e>
    switch(PeriphClkInit->UsbClockSelection)
 8002366:	2601      	movs	r6, #1
 8002368:	4634      	mov	r4, r6
 800236a:	e713      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800236c:	4626      	mov	r6, r4
 800236e:	e711      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8002372:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800237a:	b96c      	cbnz	r4, 8002398 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800237e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8002380:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	430b      	orrs	r3, r1
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	e710      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x74e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800238c:	2102      	movs	r1, #2
 800238e:	1d28      	adds	r0, r5, #4
 8002390:	f7ff fa76 	bl	8001880 <RCCEx_PLL2_Config>
 8002394:	4604      	mov	r4, r0
      break;
 8002396:	e7f0      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8002398:	4626      	mov	r6, r4
 800239a:	e708      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x74e>
    switch(PeriphClkInit->RngClockSelection)
 800239c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80023a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80023a4:	f47f af1b 	bne.w	80021de <HAL_RCCEx_PeriphCLKConfig+0x77e>
    if(ret == HAL_OK)
 80023a8:	b964      	cbnz	r4, 80023c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80023ac:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80023ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023b2:	430a      	orrs	r2, r1
 80023b4:	6542      	str	r2, [r0, #84]	; 0x54
 80023b6:	e713      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 80023ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80023bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023c0:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80023c2:	e7f1      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80023c4:	4626      	mov	r6, r4
 80023c6:	e70b      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80023c8:	58024400 	.word	0x58024400

080023cc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80023cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80023ce:	f7ff fa11 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	f003 031f 	and.w	r3, r3, #31
}
 80023e2:	40d8      	lsrs	r0, r3
 80023e4:	bd08      	pop	{r3, pc}
 80023e6:	bf00      	nop
 80023e8:	58024400 	.word	0x58024400
 80023ec:	08005820 	.word	0x08005820

080023f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 80023f2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023f4:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80023f6:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80023f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80023fa:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80023fe:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002402:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8002404:	f000 808d 	beq.w	8002522 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
    switch (pllsource)
 8002408:	ee07 1a90 	vmov	s15, r1
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800240c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002410:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002414:	f004 0403 	and.w	r4, r4, #3
 8002418:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800241c:	434b      	muls	r3, r1
    switch (pllsource)
 800241e:	2c01      	cmp	r4, #1
 8002420:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 800242c:	d06b      	beq.n	8002506 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 800242e:	2c02      	cmp	r4, #2
 8002430:	d05b      	beq.n	80024ea <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 8002432:	2c00      	cmp	r4, #0
 8002434:	d167      	bne.n	8002506 <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	d546      	bpl.n	80024ca <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800243c:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800243e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002440:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002444:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800244a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800244c:	ee07 2a10 	vmov	s14, r2
 8002450:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002454:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002458:	ee06 3a90 	vmov	s13, r3
 800245c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002464:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002468:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800246a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800246e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002470:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002474:	ee07 3a10 	vmov	s14, r3
 8002478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800247c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002480:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002484:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002488:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800248c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800248e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002492:	ee07 3a10 	vmov	s14, r3
 8002496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800249a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800249e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80024a6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80024aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024ac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80024b0:	ee07 3a10 	vmov	s14, r3
 80024b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024b8:	ee37 6a06 	vadd.f32	s12, s14, s12
 80024bc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80024c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80024c4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024cc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002534 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80024d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d4:	ee07 3a10 	vmov	s14, r3
 80024d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024e4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80024e8:	e7be      	b.n	8002468 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80024ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80024ec:	eddf 5a12 	vldr	s11, [pc, #72]	; 8002538 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80024f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f4:	ee07 3a10 	vmov	s14, r3
 80024f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002504:	e7ee      	b.n	80024e4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002506:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002508:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800253c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	ee07 3a10 	vmov	s14, r3
 8002514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002520:	e7e0      	b.n	80024e4 <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002522:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002526:	6081      	str	r1, [r0, #8]
}
 8002528:	e7ce      	b.n	80024c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800252a:	bf00      	nop
 800252c:	58024400 	.word	0x58024400
 8002530:	03d09000 	.word	0x03d09000
 8002534:	4c742400 	.word	0x4c742400
 8002538:	4af42400 	.word	0x4af42400
 800253c:	4a742400 	.word	0x4a742400

08002540 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002540:	4a4e      	ldr	r2, [pc, #312]	; (800267c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 8002542:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002544:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002546:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002548:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800254a:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800254e:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002552:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8002554:	f000 808d 	beq.w	8002672 <HAL_RCCEx_GetPLL3ClockFreq+0x132>
    switch (pllsource)
 8002558:	ee07 1a90 	vmov	s15, r1
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800255c:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002560:	f3c5 01cc 	ubfx	r1, r5, #3, #13
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002564:	f004 0403 	and.w	r4, r4, #3
 8002568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800256c:	434b      	muls	r3, r1
    switch (pllsource)
 800256e:	2c01      	cmp	r4, #1
 8002570:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 800257c:	d06b      	beq.n	8002656 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 800257e:	2c02      	cmp	r4, #2
 8002580:	d05b      	beq.n	800263a <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 8002582:	2c00      	cmp	r4, #0
 8002584:	d167      	bne.n	8002656 <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	d546      	bpl.n	800261a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800258c:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800258e:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002590:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002596:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800259a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800259c:	ee07 2a10 	vmov	s14, r2
 80025a0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80025a4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80025a8:	ee06 3a90 	vmov	s13, r3
 80025ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b4:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80025b8:	4a30      	ldr	r2, [pc, #192]	; (800267c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80025ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80025be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80025c4:	ee07 3a10 	vmov	s14, r3
 80025c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80025d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80025d8:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80025dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025de:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80025e2:	ee07 3a10 	vmov	s14, r3
 80025e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 80025ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80025f6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80025fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025fc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002600:	ee07 3a10 	vmov	s14, r3
 8002604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002608:	ee37 6a06 	vadd.f32	s12, s14, s12
 800260c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002610:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002614:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8002618:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800261a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800261c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8002684 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	ee07 3a10 	vmov	s14, r3
 8002628:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002634:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002638:	e7be      	b.n	80025b8 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800263a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800263c:	eddf 5a12 	vldr	s11, [pc, #72]	; 8002688 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8002640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002644:	ee07 3a10 	vmov	s14, r3
 8002648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002654:	e7ee      	b.n	8002634 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8002656:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002658:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800268c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	ee07 3a10 	vmov	s14, r3
 8002664:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002670:	e7e0      	b.n	8002634 <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002672:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002676:	6081      	str	r1, [r0, #8]
}
 8002678:	e7ce      	b.n	8002618 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800267a:	bf00      	nop
 800267c:	58024400 	.word	0x58024400
 8002680:	03d09000 	.word	0x03d09000
 8002684:	4c742400 	.word	0x4c742400
 8002688:	4af42400 	.word	0x4af42400
 800268c:	4a742400 	.word	0x4a742400

08002690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002694:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002696:	69c0      	ldr	r0, [r0, #28]
{
 8002698:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800269a:	6921      	ldr	r1, [r4, #16]
 800269c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800269e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a0:	430a      	orrs	r2, r1
 80026a2:	6961      	ldr	r1, [r4, #20]
 80026a4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a6:	49a4      	ldr	r1, [pc, #656]	; (8002938 <UART_SetConfig+0x2a8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026aa:	4029      	ands	r1, r5
 80026ac:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ae:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026b8:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ba:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026bc:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026be:	4a9f      	ldr	r2, [pc, #636]	; (800293c <UART_SetConfig+0x2ac>)
 80026c0:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026c2:	bf1c      	itt	ne
 80026c4:	6a22      	ldrne	r2, [r4, #32]
 80026c6:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 80026ce:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80026d2:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026d6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	f022 020f 	bic.w	r2, r2, #15
 80026de:	430a      	orrs	r2, r1
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026e2:	4a97      	ldr	r2, [pc, #604]	; (8002940 <UART_SetConfig+0x2b0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d11b      	bne.n	8002720 <UART_SetConfig+0x90>
 80026e8:	4b96      	ldr	r3, [pc, #600]	; (8002944 <UART_SetConfig+0x2b4>)
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f0:	2b28      	cmp	r3, #40	; 0x28
 80026f2:	d86c      	bhi.n	80027ce <UART_SetConfig+0x13e>
 80026f4:	4a94      	ldr	r2, [pc, #592]	; (8002948 <UART_SetConfig+0x2b8>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	f040 8101 	bne.w	8002902 <UART_SetConfig+0x272>
  {
    switch (clocksource)
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 80bf 	bhi.w	8002884 <UART_SetConfig+0x1f4>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d861      	bhi.n	80027ce <UART_SetConfig+0x13e>
 800270a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800270e:	00e6      	.short	0x00e6
 8002710:	006000eb 	.word	0x006000eb
 8002714:	00ee0060 	.word	0x00ee0060
 8002718:	00600060 	.word	0x00600060
 800271c:	00f30060 	.word	0x00f30060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002720:	4a8a      	ldr	r2, [pc, #552]	; (800294c <UART_SetConfig+0x2bc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d107      	bne.n	8002736 <UART_SetConfig+0xa6>
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <UART_SetConfig+0x2b4>)
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	2b05      	cmp	r3, #5
 8002730:	d84d      	bhi.n	80027ce <UART_SetConfig+0x13e>
 8002732:	4a87      	ldr	r2, [pc, #540]	; (8002950 <UART_SetConfig+0x2c0>)
 8002734:	e7df      	b.n	80026f6 <UART_SetConfig+0x66>
 8002736:	4a87      	ldr	r2, [pc, #540]	; (8002954 <UART_SetConfig+0x2c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d107      	bne.n	800274c <UART_SetConfig+0xbc>
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <UART_SetConfig+0x2b4>)
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	2b05      	cmp	r3, #5
 8002746:	d842      	bhi.n	80027ce <UART_SetConfig+0x13e>
 8002748:	4a83      	ldr	r2, [pc, #524]	; (8002958 <UART_SetConfig+0x2c8>)
 800274a:	e7d4      	b.n	80026f6 <UART_SetConfig+0x66>
 800274c:	4a83      	ldr	r2, [pc, #524]	; (800295c <UART_SetConfig+0x2cc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d107      	bne.n	8002762 <UART_SetConfig+0xd2>
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <UART_SetConfig+0x2b4>)
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	2b05      	cmp	r3, #5
 800275c:	d837      	bhi.n	80027ce <UART_SetConfig+0x13e>
 800275e:	4a80      	ldr	r2, [pc, #512]	; (8002960 <UART_SetConfig+0x2d0>)
 8002760:	e7c9      	b.n	80026f6 <UART_SetConfig+0x66>
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <UART_SetConfig+0x2d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d107      	bne.n	8002778 <UART_SetConfig+0xe8>
 8002768:	4b76      	ldr	r3, [pc, #472]	; (8002944 <UART_SetConfig+0x2b4>)
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	2b05      	cmp	r3, #5
 8002772:	d82c      	bhi.n	80027ce <UART_SetConfig+0x13e>
 8002774:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <UART_SetConfig+0x2d8>)
 8002776:	e7be      	b.n	80026f6 <UART_SetConfig+0x66>
 8002778:	4a7c      	ldr	r2, [pc, #496]	; (800296c <UART_SetConfig+0x2dc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d107      	bne.n	800278e <UART_SetConfig+0xfe>
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <UART_SetConfig+0x2b4>)
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002786:	2b28      	cmp	r3, #40	; 0x28
 8002788:	d821      	bhi.n	80027ce <UART_SetConfig+0x13e>
 800278a:	4a79      	ldr	r2, [pc, #484]	; (8002970 <UART_SetConfig+0x2e0>)
 800278c:	e7b3      	b.n	80026f6 <UART_SetConfig+0x66>
 800278e:	4a79      	ldr	r2, [pc, #484]	; (8002974 <UART_SetConfig+0x2e4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d107      	bne.n	80027a4 <UART_SetConfig+0x114>
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <UART_SetConfig+0x2b4>)
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	2b05      	cmp	r3, #5
 800279e:	d816      	bhi.n	80027ce <UART_SetConfig+0x13e>
 80027a0:	4a75      	ldr	r2, [pc, #468]	; (8002978 <UART_SetConfig+0x2e8>)
 80027a2:	e7a8      	b.n	80026f6 <UART_SetConfig+0x66>
 80027a4:	4a75      	ldr	r2, [pc, #468]	; (800297c <UART_SetConfig+0x2ec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d107      	bne.n	80027ba <UART_SetConfig+0x12a>
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <UART_SetConfig+0x2b4>)
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d80b      	bhi.n	80027ce <UART_SetConfig+0x13e>
 80027b6:	4a72      	ldr	r2, [pc, #456]	; (8002980 <UART_SetConfig+0x2f0>)
 80027b8:	e79d      	b.n	80026f6 <UART_SetConfig+0x66>
 80027ba:	4a60      	ldr	r2, [pc, #384]	; (800293c <UART_SetConfig+0x2ac>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d106      	bne.n	80027ce <UART_SetConfig+0x13e>
 80027c0:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80027c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d901      	bls.n	80027d2 <UART_SetConfig+0x142>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ce:	2001      	movs	r0, #1
 80027d0:	e00e      	b.n	80027f0 <UART_SetConfig+0x160>
 80027d2:	496c      	ldr	r1, [pc, #432]	; (8002984 <UART_SetConfig+0x2f4>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d023      	beq.n	8002822 <UART_SetConfig+0x192>
 80027da:	d811      	bhi.n	8002800 <UART_SetConfig+0x170>
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d016      	beq.n	800280e <UART_SetConfig+0x17e>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d019      	beq.n	8002818 <UART_SetConfig+0x188>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d1f2      	bne.n	80027ce <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80027e8:	f7ff fdf0 	bl	80023cc <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80027ec:	bb10      	cbnz	r0, 8002834 <UART_SetConfig+0x1a4>
 80027ee:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 80027f0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80027f4:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027f6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80027f8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 80027fc:	b007      	add	sp, #28
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (clocksource)
 8002800:	2b20      	cmp	r3, #32
 8002802:	d03d      	beq.n	8002880 <UART_SetConfig+0x1f0>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d1e2      	bne.n	80027ce <UART_SetConfig+0x13e>
 8002808:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800280c:	e012      	b.n	8002834 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800280e:	4668      	mov	r0, sp
 8002810:	f7ff fdee 	bl	80023f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8002814:	9801      	ldr	r0, [sp, #4]
        break;
 8002816:	e7e9      	b.n	80027ec <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002818:	a803      	add	r0, sp, #12
 800281a:	f7ff fe91 	bl	8002540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800281e:	9804      	ldr	r0, [sp, #16]
        break;
 8002820:	e7e4      	b.n	80027ec <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	4858      	ldr	r0, [pc, #352]	; (8002988 <UART_SetConfig+0x2f8>)
 8002826:	f013 0f20 	tst.w	r3, #32
 800282a:	d003      	beq.n	8002834 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002832:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <UART_SetConfig+0x2fc>)
 8002836:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002838:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800283a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800283e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002842:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002846:	4299      	cmp	r1, r3
 8002848:	d8c1      	bhi.n	80027ce <UART_SetConfig+0x13e>
 800284a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800284e:	d8be      	bhi.n	80027ce <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002850:	2300      	movs	r3, #0
 8002852:	2100      	movs	r1, #0
 8002854:	f7fd fd9c 	bl	8000390 <__aeabi_uldivmod>
 8002858:	462a      	mov	r2, r5
 800285a:	020f      	lsls	r7, r1, #8
 800285c:	2300      	movs	r3, #0
 800285e:	0206      	lsls	r6, r0, #8
 8002860:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002864:	0868      	lsrs	r0, r5, #1
 8002866:	1830      	adds	r0, r6, r0
 8002868:	f147 0100 	adc.w	r1, r7, #0
 800286c:	f7fd fd90 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <UART_SetConfig+0x300>)
 8002872:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002876:	429a      	cmp	r2, r3
 8002878:	d8a9      	bhi.n	80027ce <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	60d8      	str	r0, [r3, #12]
 800287e:	e7b6      	b.n	80027ee <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8002880:	4844      	ldr	r0, [pc, #272]	; (8002994 <UART_SetConfig+0x304>)
 8002882:	e7d7      	b.n	8002834 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8002884:	2b20      	cmp	r3, #32
 8002886:	d03a      	beq.n	80028fe <UART_SetConfig+0x26e>
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d00b      	beq.n	80028a4 <UART_SetConfig+0x214>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d19e      	bne.n	80027ce <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <UART_SetConfig+0x2b4>)
 8002892:	483d      	ldr	r0, [pc, #244]	; (8002988 <UART_SetConfig+0x2f8>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f012 0f20 	tst.w	r2, #32
 800289a:	d003      	beq.n	80028a4 <UART_SetConfig+0x214>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80028a2:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <UART_SetConfig+0x2fc>)
 80028a8:	6862      	ldr	r2, [r4, #4]
 80028aa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	0850      	lsrs	r0, r2, #1
 80028b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b8:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028bc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028c0:	f1a0 0210 	sub.w	r2, r0, #16
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d882      	bhi.n	80027ce <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028c8:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028cc:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80028d0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028d2:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80028d4:	4318      	orrs	r0, r3
 80028d6:	60d0      	str	r0, [r2, #12]
 80028d8:	e789      	b.n	80027ee <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80028da:	f7fe ffad 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80028de:	2800      	cmp	r0, #0
 80028e0:	d085      	beq.n	80027ee <UART_SetConfig+0x15e>
 80028e2:	e7df      	b.n	80028a4 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7fe ffba 	bl	800185c <HAL_RCC_GetPCLK2Freq>
        break;
 80028e8:	e7f9      	b.n	80028de <UART_SetConfig+0x24e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028ea:	4668      	mov	r0, sp
 80028ec:	f7ff fd80 	bl	80023f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80028f0:	9801      	ldr	r0, [sp, #4]
        break;
 80028f2:	e7f4      	b.n	80028de <UART_SetConfig+0x24e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80028f4:	a803      	add	r0, sp, #12
 80028f6:	f7ff fe23 	bl	8002540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80028fa:	9804      	ldr	r0, [sp, #16]
        break;
 80028fc:	e7ef      	b.n	80028de <UART_SetConfig+0x24e>
        pclk = (uint32_t) CSI_VALUE;
 80028fe:	4825      	ldr	r0, [pc, #148]	; (8002994 <UART_SetConfig+0x304>)
 8002900:	e7d0      	b.n	80028a4 <UART_SetConfig+0x214>
    switch (clocksource)
 8002902:	2b08      	cmp	r3, #8
 8002904:	d848      	bhi.n	8002998 <UART_SetConfig+0x308>
 8002906:	2b08      	cmp	r3, #8
 8002908:	f63f af61 	bhi.w	80027ce <UART_SetConfig+0x13e>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <UART_SetConfig+0x284>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	080029db 	.word	0x080029db
 8002918:	080029e7 	.word	0x080029e7
 800291c:	080027cf 	.word	0x080027cf
 8002920:	080027cf 	.word	0x080027cf
 8002924:	080029ed 	.word	0x080029ed
 8002928:	080027cf 	.word	0x080027cf
 800292c:	080027cf 	.word	0x080027cf
 8002930:	080027cf 	.word	0x080027cf
 8002934:	080029f7 	.word	0x080029f7
 8002938:	cfff69f3 	.word	0xcfff69f3
 800293c:	58000c00 	.word	0x58000c00
 8002940:	40011000 	.word	0x40011000
 8002944:	58024400 	.word	0x58024400
 8002948:	08005830 	.word	0x08005830
 800294c:	40004400 	.word	0x40004400
 8002950:	08005859 	.word	0x08005859
 8002954:	40004800 	.word	0x40004800
 8002958:	08005859 	.word	0x08005859
 800295c:	40004c00 	.word	0x40004c00
 8002960:	08005859 	.word	0x08005859
 8002964:	40005000 	.word	0x40005000
 8002968:	08005859 	.word	0x08005859
 800296c:	40011400 	.word	0x40011400
 8002970:	08005830 	.word	0x08005830
 8002974:	40007800 	.word	0x40007800
 8002978:	08005859 	.word	0x08005859
 800297c:	40007c00 	.word	0x40007c00
 8002980:	08005859 	.word	0x08005859
 8002984:	0800585f 	.word	0x0800585f
 8002988:	03d09000 	.word	0x03d09000
 800298c:	08005866 	.word	0x08005866
 8002990:	000ffcff 	.word	0x000ffcff
 8002994:	003d0900 	.word	0x003d0900
 8002998:	2b20      	cmp	r3, #32
 800299a:	d031      	beq.n	8002a00 <UART_SetConfig+0x370>
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d031      	beq.n	8002a04 <UART_SetConfig+0x374>
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	f47f af14 	bne.w	80027ce <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <UART_SetConfig+0x37c>)
 80029a8:	4819      	ldr	r0, [pc, #100]	; (8002a10 <UART_SetConfig+0x380>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f012 0f20 	tst.w	r2, #32
 80029b0:	d003      	beq.n	80029ba <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80029b8:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029bc:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <UART_SetConfig+0x384>)
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80029c4:	fbb0 f0f2 	udiv	r0, r0, r2
 80029c8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80029cc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80029d4:	f1a0 0210 	sub.w	r2, r0, #16
 80029d8:	e74d      	b.n	8002876 <UART_SetConfig+0x1e6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80029da:	f7fe ff2d 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80029de:	2800      	cmp	r0, #0
 80029e0:	f43f af05 	beq.w	80027ee <UART_SetConfig+0x15e>
 80029e4:	e7e9      	b.n	80029ba <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e6:	f7fe ff39 	bl	800185c <HAL_RCC_GetPCLK2Freq>
        break;
 80029ea:	e7f8      	b.n	80029de <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80029ec:	4668      	mov	r0, sp
 80029ee:	f7ff fcff 	bl	80023f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80029f2:	9801      	ldr	r0, [sp, #4]
        break;
 80029f4:	e7f3      	b.n	80029de <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80029f6:	a803      	add	r0, sp, #12
 80029f8:	f7ff fda2 	bl	8002540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80029fc:	9804      	ldr	r0, [sp, #16]
        break;
 80029fe:	e7ee      	b.n	80029de <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <UART_SetConfig+0x388>)
 8002a02:	e7da      	b.n	80029ba <UART_SetConfig+0x32a>
    switch (clocksource)
 8002a04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a08:	e7d7      	b.n	80029ba <UART_SetConfig+0x32a>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	03d09000 	.word	0x03d09000
 8002a14:	08005866 	.word	0x08005866
 8002a18:	003d0900 	.word	0x003d0900

08002a1c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1e:	07da      	lsls	r2, r3, #31
{
 8002a20:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a22:	d506      	bpl.n	8002a32 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a24:	6801      	ldr	r1, [r0, #0]
 8002a26:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a28:	684a      	ldr	r2, [r1, #4]
 8002a2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a2e:	4322      	orrs	r2, r4
 8002a30:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a32:	079c      	lsls	r4, r3, #30
 8002a34:	d506      	bpl.n	8002a44 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a36:	6801      	ldr	r1, [r0, #0]
 8002a38:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a3a:	684a      	ldr	r2, [r1, #4]
 8002a3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a40:	4322      	orrs	r2, r4
 8002a42:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a44:	0759      	lsls	r1, r3, #29
 8002a46:	d506      	bpl.n	8002a56 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a4c:	684a      	ldr	r2, [r1, #4]
 8002a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a52:	4322      	orrs	r2, r4
 8002a54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a56:	071a      	lsls	r2, r3, #28
 8002a58:	d506      	bpl.n	8002a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a5a:	6801      	ldr	r1, [r0, #0]
 8002a5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a5e:	684a      	ldr	r2, [r1, #4]
 8002a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a64:	4322      	orrs	r2, r4
 8002a66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a68:	06dc      	lsls	r4, r3, #27
 8002a6a:	d506      	bpl.n	8002a7a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a6c:	6801      	ldr	r1, [r0, #0]
 8002a6e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002a70:	688a      	ldr	r2, [r1, #8]
 8002a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a76:	4322      	orrs	r2, r4
 8002a78:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7a:	0699      	lsls	r1, r3, #26
 8002a7c:	d506      	bpl.n	8002a8c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a7e:	6801      	ldr	r1, [r0, #0]
 8002a80:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002a82:	688a      	ldr	r2, [r1, #8]
 8002a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a88:	4322      	orrs	r2, r4
 8002a8a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a8c:	065a      	lsls	r2, r3, #25
 8002a8e:	d510      	bpl.n	8002ab2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a90:	6801      	ldr	r1, [r0, #0]
 8002a92:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002a94:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a96:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a9a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002a9e:	ea42 0204 	orr.w	r2, r2, r4
 8002aa2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aa4:	d105      	bne.n	8002ab2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aa6:	684a      	ldr	r2, [r1, #4]
 8002aa8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002aaa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002aae:	4322      	orrs	r2, r4
 8002ab0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	d506      	bpl.n	8002ac4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ab6:	6802      	ldr	r2, [r0, #0]
 8002ab8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002aba:	6853      	ldr	r3, [r2, #4]
 8002abc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6053      	str	r3, [r2, #4]
  }
}
 8002ac4:	bd10      	pop	{r4, pc}

08002ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aca:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460e      	mov	r6, r1
 8002ad2:	4615      	mov	r5, r2
 8002ad4:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	69d3      	ldr	r3, [r2, #28]
 8002ada:	ea36 0303 	bics.w	r3, r6, r3
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	42ab      	cmp	r3, r5
 8002ae6:	d001      	beq.n	8002aec <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e027      	b.n	8002b3c <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002af0:	d0f2      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe f855 	bl	8000ba0 <HAL_GetTick>
 8002af6:	1bc0      	subs	r0, r0, r7
 8002af8:	4540      	cmp	r0, r8
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	d802      	bhi.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002afe:	f1b8 0f00 	cmp.w	r8, #0
 8002b02:	d11d      	bne.n	8002b40 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	e840 3200 	strex	r2, r3, [r0]
 8002b10:	2a00      	cmp	r2, #0
 8002b12:	d1f7      	bne.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	f100 0308 	add.w	r3, r0, #8
 8002b18:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	f100 0108 	add.w	r1, r0, #8
 8002b24:	e841 3200 	strex	r2, r3, [r1]
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d1f3      	bne.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002b32:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8002b36:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002b38:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8002b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b40:	6803      	ldr	r3, [r0, #0]
 8002b42:	075a      	lsls	r2, r3, #29
 8002b44:	d5c7      	bpl.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b46:	69c3      	ldr	r3, [r0, #28]
 8002b48:	051b      	lsls	r3, r3, #20
 8002b4a:	d5c4      	bpl.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b50:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	e840 3200 	strex	r2, r3, [r0]
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d1f7      	bne.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	f100 0308 	add.w	r3, r0, #8
 8002b66:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	f100 0108 	add.w	r1, r0, #8
 8002b72:	e841 3200 	strex	r2, r3, [r1]
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d1f3      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002b80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b84:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002b88:	e7d5      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x70>

08002b8a <HAL_UART_Transmit>:
{
 8002b8a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002b8e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b90:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8002b94:	4604      	mov	r4, r0
 8002b96:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002b98:	2b20      	cmp	r3, #32
{
 8002b9a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9c:	d150      	bne.n	8002c40 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d04c      	beq.n	8002c3c <HAL_UART_Transmit+0xb2>
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	d04a      	beq.n	8002c3c <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002ba6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d048      	beq.n	8002c40 <HAL_UART_Transmit+0xb6>
 8002bae:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002bb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bbc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8002bc0:	f7fd ffee 	bl	8000ba0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002bc6:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8002bc8:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002bd0:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd4:	d103      	bne.n	8002bde <HAL_UART_Transmit+0x54>
 8002bd6:	6922      	ldr	r2, [r4, #16]
 8002bd8:	b90a      	cbnz	r2, 8002bde <HAL_UART_Transmit+0x54>
 8002bda:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002bdc:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8002bde:	2200      	movs	r2, #0
 8002be0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8002be4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002bec:	b292      	uxth	r2, r2
 8002bee:	b942      	cbnz	r2, 8002c02 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf0:	2140      	movs	r1, #64	; 0x40
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ff67 	bl	8002ac6 <UART_WaitOnFlagUntilTimeout>
 8002bf8:	b958      	cbnz	r0, 8002c12 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8002c00:	e008      	b.n	8002c14 <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	2200      	movs	r2, #0
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	4620      	mov	r0, r4
 8002c08:	9303      	str	r3, [sp, #12]
 8002c0a:	f7ff ff5c 	bl	8002ac6 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	9b03      	ldr	r3, [sp, #12]
 8002c10:	b118      	cbz	r0, 8002c1a <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8002c12:	2003      	movs	r0, #3
}
 8002c14:	b004      	add	sp, #16
 8002c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 8002c1a:	6821      	ldr	r1, [r4, #0]
 8002c1c:	b95e      	cbnz	r6, 8002c36 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c26:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002c28:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8002c34:	e7d6      	b.n	8002be4 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c36:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002c3a:	e7f4      	b.n	8002c26 <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e7e9      	b.n	8002c14 <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8002c40:	2002      	movs	r0, #2
 8002c42:	e7e7      	b.n	8002c14 <HAL_UART_Transmit+0x8a>

08002c44 <UART_CheckIdleState>:
{
 8002c44:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	2500      	movs	r5, #0
{
 8002c48:	4604      	mov	r4, r0
 8002c4a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8002c50:	f7fd ffa6 	bl	8000ba0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c54:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002c56:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	0711      	lsls	r1, r2, #28
 8002c5c:	d417      	bmi.n	8002c8e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	0752      	lsls	r2, r2, #29
 8002c64:	d509      	bpl.n	8002c7a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c66:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c6e:	4620      	mov	r0, r4
 8002c70:	9200      	str	r2, [sp, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f7ff ff27 	bl	8002ac6 <UART_WaitOnFlagUntilTimeout>
 8002c78:	b9b0      	cbnz	r0, 8002ca8 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8002c7a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002c82:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8002c86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8002c8c:	e00d      	b.n	8002caa <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c8e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c92:	9003      	str	r0, [sp, #12]
 8002c94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c98:	4620      	mov	r0, r4
 8002c9a:	9200      	str	r2, [sp, #0]
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	f7ff ff12 	bl	8002ac6 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	9b03      	ldr	r3, [sp, #12]
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d0da      	beq.n	8002c5e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002ca8:	2003      	movs	r0, #3
}
 8002caa:	b005      	add	sp, #20
 8002cac:	bd30      	pop	{r4, r5, pc}

08002cae <HAL_UART_Init>:
{
 8002cae:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	b350      	cbz	r0, 8002d0a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002cb8:	b91b      	cbnz	r3, 8002cc2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002cba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8002cbe:	f7fd fe11 	bl	80008e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002cc2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cc6:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd4:	f7ff fcdc 	bl	8002690 <UART_SetConfig>
 8002cd8:	2801      	cmp	r0, #1
 8002cda:	d016      	beq.n	8002d0a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cde:	b113      	cbz	r3, 8002ce6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff fe9b 	bl	8002a1c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002ce8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
}
 8002d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002d04:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002d06:	f7ff bf9d 	b.w	8002c44 <UART_CheckIdleState>
}
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	bd10      	pop	{r4, pc}
	...

08002d10 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d10:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8002d12:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d14:	b91b      	cbnz	r3, 8002d1e <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8002d16:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002d1a:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d1c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d1e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d20:	4d0a      	ldr	r5, [pc, #40]	; (8002d4c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d22:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d24:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d26:	4c0a      	ldr	r4, [pc, #40]	; (8002d50 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d28:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d2c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d2e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d30:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d38:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d3c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d3e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d46:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8002d4a:	e7e7      	b.n	8002d1c <UARTEx_SetNbDataToProcess+0xc>
 8002d4c:	08005886 	.word	0x08005886
 8002d50:	0800587e 	.word	0x0800587e

08002d54 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8002d54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d014      	beq.n	8002d86 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d5c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d5e:	2324      	movs	r3, #36	; 0x24
 8002d60:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d64:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8002d66:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d68:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d76:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002d78:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8002d7a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8002d7e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8002d82:	4618      	mov	r0, r3
 8002d84:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002d86:	2002      	movs	r0, #2
}
 8002d88:	4770      	bx	lr

08002d8a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002d8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002d90:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d01b      	beq.n	8002dce <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8002d96:	2301      	movs	r3, #1
 8002d98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	2324      	movs	r3, #36	; 0x24
 8002d9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002da2:	6803      	ldr	r3, [r0, #0]
 8002da4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002db4:	4311      	orrs	r1, r2
 8002db6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002db8:	f7ff ffaa 	bl	8002d10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dbc:	6803      	ldr	r3, [r0, #0]
 8002dbe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002dce:	2002      	movs	r0, #2
 8002dd0:	e7fc      	b.n	8002dcc <HAL_UARTEx_SetTxFifoThreshold+0x42>

08002dd2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8002dd2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8002dd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8002dd8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d01b      	beq.n	8002e16 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8002dde:	2301      	movs	r3, #1
 8002de0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	2324      	movs	r3, #36	; 0x24
 8002de6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dea:	6803      	ldr	r3, [r0, #0]
 8002dec:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002e00:	f7ff ff86 	bl	8002d10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e04:	6803      	ldr	r3, [r0, #0]
 8002e06:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8002e14:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8002e16:	2002      	movs	r0, #2
 8002e18:	e7fc      	b.n	8002e14 <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08002e1c <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8002e1c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8002e1e:	1e14      	subs	r4, r2, #0
 8002e20:	da0a      	bge.n	8002e38 <_write+0x1c>
 8002e22:	3801      	subs	r0, #1
 8002e24:	2801      	cmp	r0, #1
 8002e26:	d907      	bls.n	8002e38 <_write+0x1c>
    errno = EBADF;
 8002e28:	f000 f840 	bl	8002eac <__errno>
    return -1;
 8002e2c:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 8002e30:	2309      	movs	r3, #9
 8002e32:	6003      	str	r3, [r0, #0]
        HAL_MAX_DELAY);
  else
    status = HAL_OK;

  return (status == HAL_OK ? count : 0);
}
 8002e34:	4620      	mov	r0, r4
 8002e36:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <_write+0x38>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f9      	beq.n	8002e34 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8002e40:	b2a2      	uxth	r2, r4
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <_write+0x3c>)
 8002e48:	f7ff fe9f 	bl	8002b8a <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	bf18      	it	ne
 8002e50:	2400      	movne	r4, #0
 8002e52:	e7ef      	b.n	8002e34 <_write+0x18>
 8002e54:	24000010 	.word	0x24000010
 8002e58:	2400020c 	.word	0x2400020c

08002e5c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002e5c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002e5e:	4d11      	ldr	r5, [pc, #68]	; (8002ea4 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002e60:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8002e62:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002e64:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002e68:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002e6c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002e70:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002e72:	f000 fa01 	bl	8003278 <malloc>

  /* remember size */
  if (ptr) {
 8002e76:	b1a0      	cbz	r0, 8002ea2 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002e78:	1903      	adds	r3, r0, r4
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002e7c:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	07db      	lsls	r3, r3, #31
 8002e84:	d50c      	bpl.n	8002ea0 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002e86:	68eb      	ldr	r3, [r5, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002e8c:	686b      	ldr	r3, [r5, #4]
 8002e8e:	4423      	add	r3, r4
 8002e90:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002e92:	69ab      	ldr	r3, [r5, #24]
 8002e94:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002e96:	696b      	ldr	r3, [r5, #20]
 8002e98:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8002e9a:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8002e9c:	bf88      	it	hi
 8002e9e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002ea0:	3004      	adds	r0, #4
}
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	240002d0 	.word	0x240002d0
 8002ea8:	efdcba98 	.word	0xefdcba98

08002eac <__errno>:
 8002eac:	4b01      	ldr	r3, [pc, #4]	; (8002eb4 <__errno+0x8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	24000014 	.word	0x24000014

08002eb8 <__sflush_r>:
 8002eb8:	898a      	ldrh	r2, [r1, #12]
 8002eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	0710      	lsls	r0, r2, #28
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	d458      	bmi.n	8002f78 <__sflush_r+0xc0>
 8002ec6:	684b      	ldr	r3, [r1, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	dc05      	bgt.n	8002ed8 <__sflush_r+0x20>
 8002ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc02      	bgt.n	8002ed8 <__sflush_r+0x20>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eda:	2e00      	cmp	r6, #0
 8002edc:	d0f9      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ee4:	682f      	ldr	r7, [r5, #0]
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	d032      	beq.n	8002f50 <__sflush_r+0x98>
 8002eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	075a      	lsls	r2, r3, #29
 8002ef0:	d505      	bpl.n	8002efe <__sflush_r+0x46>
 8002ef2:	6863      	ldr	r3, [r4, #4]
 8002ef4:	1ac0      	subs	r0, r0, r3
 8002ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef8:	b10b      	cbz	r3, 8002efe <__sflush_r+0x46>
 8002efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	2300      	movs	r3, #0
 8002f00:	4602      	mov	r2, r0
 8002f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f04:	6a21      	ldr	r1, [r4, #32]
 8002f06:	4628      	mov	r0, r5
 8002f08:	47b0      	blx	r6
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	d106      	bne.n	8002f1e <__sflush_r+0x66>
 8002f10:	6829      	ldr	r1, [r5, #0]
 8002f12:	291d      	cmp	r1, #29
 8002f14:	d82c      	bhi.n	8002f70 <__sflush_r+0xb8>
 8002f16:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <__sflush_r+0x108>)
 8002f18:	40ca      	lsrs	r2, r1
 8002f1a:	07d6      	lsls	r6, r2, #31
 8002f1c:	d528      	bpl.n	8002f70 <__sflush_r+0xb8>
 8002f1e:	2200      	movs	r2, #0
 8002f20:	6062      	str	r2, [r4, #4]
 8002f22:	04d9      	lsls	r1, r3, #19
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	d504      	bpl.n	8002f34 <__sflush_r+0x7c>
 8002f2a:	1c42      	adds	r2, r0, #1
 8002f2c:	d101      	bne.n	8002f32 <__sflush_r+0x7a>
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	b903      	cbnz	r3, 8002f34 <__sflush_r+0x7c>
 8002f32:	6560      	str	r0, [r4, #84]	; 0x54
 8002f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f36:	602f      	str	r7, [r5, #0]
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d0ca      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f40:	4299      	cmp	r1, r3
 8002f42:	d002      	beq.n	8002f4a <__sflush_r+0x92>
 8002f44:	4628      	mov	r0, r5
 8002f46:	f000 f9b5 	bl	80032b4 <_free_r>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f4e:	e7c1      	b.n	8002ed4 <__sflush_r+0x1c>
 8002f50:	6a21      	ldr	r1, [r4, #32]
 8002f52:	2301      	movs	r3, #1
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b0      	blx	r6
 8002f58:	1c41      	adds	r1, r0, #1
 8002f5a:	d1c7      	bne.n	8002eec <__sflush_r+0x34>
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0c4      	beq.n	8002eec <__sflush_r+0x34>
 8002f62:	2b1d      	cmp	r3, #29
 8002f64:	d001      	beq.n	8002f6a <__sflush_r+0xb2>
 8002f66:	2b16      	cmp	r3, #22
 8002f68:	d101      	bne.n	8002f6e <__sflush_r+0xb6>
 8002f6a:	602f      	str	r7, [r5, #0]
 8002f6c:	e7b1      	b.n	8002ed2 <__sflush_r+0x1a>
 8002f6e:	89a3      	ldrh	r3, [r4, #12]
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f74:	81a3      	strh	r3, [r4, #12]
 8002f76:	e7ad      	b.n	8002ed4 <__sflush_r+0x1c>
 8002f78:	690f      	ldr	r7, [r1, #16]
 8002f7a:	2f00      	cmp	r7, #0
 8002f7c:	d0a9      	beq.n	8002ed2 <__sflush_r+0x1a>
 8002f7e:	0793      	lsls	r3, r2, #30
 8002f80:	680e      	ldr	r6, [r1, #0]
 8002f82:	bf08      	it	eq
 8002f84:	694b      	ldreq	r3, [r1, #20]
 8002f86:	600f      	str	r7, [r1, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	eba6 0807 	sub.w	r8, r6, r7
 8002f90:	608b      	str	r3, [r1, #8]
 8002f92:	f1b8 0f00 	cmp.w	r8, #0
 8002f96:	dd9c      	ble.n	8002ed2 <__sflush_r+0x1a>
 8002f98:	6a21      	ldr	r1, [r4, #32]
 8002f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f9c:	4643      	mov	r3, r8
 8002f9e:	463a      	mov	r2, r7
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	47b0      	blx	r6
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	dc06      	bgt.n	8002fb6 <__sflush_r+0xfe>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e78e      	b.n	8002ed4 <__sflush_r+0x1c>
 8002fb6:	4407      	add	r7, r0
 8002fb8:	eba8 0800 	sub.w	r8, r8, r0
 8002fbc:	e7e9      	b.n	8002f92 <__sflush_r+0xda>
 8002fbe:	bf00      	nop
 8002fc0:	20400001 	.word	0x20400001

08002fc4 <_fflush_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	690b      	ldr	r3, [r1, #16]
 8002fc8:	4605      	mov	r5, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	b913      	cbnz	r3, 8002fd4 <_fflush_r+0x10>
 8002fce:	2500      	movs	r5, #0
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
 8002fd4:	b118      	cbz	r0, 8002fde <_fflush_r+0x1a>
 8002fd6:	6983      	ldr	r3, [r0, #24]
 8002fd8:	b90b      	cbnz	r3, 8002fde <_fflush_r+0x1a>
 8002fda:	f000 f887 	bl	80030ec <__sinit>
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <_fflush_r+0x6c>)
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	d11b      	bne.n	800301c <_fflush_r+0x58>
 8002fe4:	686c      	ldr	r4, [r5, #4]
 8002fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ef      	beq.n	8002fce <_fflush_r+0xa>
 8002fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff0:	07d0      	lsls	r0, r2, #31
 8002ff2:	d404      	bmi.n	8002ffe <_fflush_r+0x3a>
 8002ff4:	0599      	lsls	r1, r3, #22
 8002ff6:	d402      	bmi.n	8002ffe <_fflush_r+0x3a>
 8002ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffa:	f000 f93a 	bl	8003272 <__retarget_lock_acquire_recursive>
 8002ffe:	4628      	mov	r0, r5
 8003000:	4621      	mov	r1, r4
 8003002:	f7ff ff59 	bl	8002eb8 <__sflush_r>
 8003006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003008:	07da      	lsls	r2, r3, #31
 800300a:	4605      	mov	r5, r0
 800300c:	d4e0      	bmi.n	8002fd0 <_fflush_r+0xc>
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	059b      	lsls	r3, r3, #22
 8003012:	d4dd      	bmi.n	8002fd0 <_fflush_r+0xc>
 8003014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003016:	f000 f92d 	bl	8003274 <__retarget_lock_release_recursive>
 800301a:	e7d9      	b.n	8002fd0 <_fflush_r+0xc>
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <_fflush_r+0x70>)
 800301e:	429c      	cmp	r4, r3
 8003020:	d101      	bne.n	8003026 <_fflush_r+0x62>
 8003022:	68ac      	ldr	r4, [r5, #8]
 8003024:	e7df      	b.n	8002fe6 <_fflush_r+0x22>
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <_fflush_r+0x74>)
 8003028:	429c      	cmp	r4, r3
 800302a:	bf08      	it	eq
 800302c:	68ec      	ldreq	r4, [r5, #12]
 800302e:	e7da      	b.n	8002fe6 <_fflush_r+0x22>
 8003030:	080058b0 	.word	0x080058b0
 8003034:	080058d0 	.word	0x080058d0
 8003038:	08005890 	.word	0x08005890

0800303c <std>:
 800303c:	2300      	movs	r3, #0
 800303e:	b510      	push	{r4, lr}
 8003040:	4604      	mov	r4, r0
 8003042:	e9c0 3300 	strd	r3, r3, [r0]
 8003046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800304a:	6083      	str	r3, [r0, #8]
 800304c:	8181      	strh	r1, [r0, #12]
 800304e:	6643      	str	r3, [r0, #100]	; 0x64
 8003050:	81c2      	strh	r2, [r0, #14]
 8003052:	6183      	str	r3, [r0, #24]
 8003054:	4619      	mov	r1, r3
 8003056:	2208      	movs	r2, #8
 8003058:	305c      	adds	r0, #92	; 0x5c
 800305a:	f000 f923 	bl	80032a4 <memset>
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <std+0x38>)
 8003060:	6263      	str	r3, [r4, #36]	; 0x24
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <std+0x3c>)
 8003064:	62a3      	str	r3, [r4, #40]	; 0x28
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <std+0x40>)
 8003068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <std+0x44>)
 800306c:	6224      	str	r4, [r4, #32]
 800306e:	6323      	str	r3, [r4, #48]	; 0x30
 8003070:	bd10      	pop	{r4, pc}
 8003072:	bf00      	nop
 8003074:	08003cad 	.word	0x08003cad
 8003078:	08003ccf 	.word	0x08003ccf
 800307c:	08003d07 	.word	0x08003d07
 8003080:	08003d2b 	.word	0x08003d2b

08003084 <_cleanup_r>:
 8003084:	4901      	ldr	r1, [pc, #4]	; (800308c <_cleanup_r+0x8>)
 8003086:	f000 b8af 	b.w	80031e8 <_fwalk_reent>
 800308a:	bf00      	nop
 800308c:	08002fc5 	.word	0x08002fc5

08003090 <__sfmoreglue>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	1e4a      	subs	r2, r1, #1
 8003094:	2568      	movs	r5, #104	; 0x68
 8003096:	4355      	muls	r5, r2
 8003098:	460e      	mov	r6, r1
 800309a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800309e:	f000 f959 	bl	8003354 <_malloc_r>
 80030a2:	4604      	mov	r4, r0
 80030a4:	b140      	cbz	r0, 80030b8 <__sfmoreglue+0x28>
 80030a6:	2100      	movs	r1, #0
 80030a8:	e9c0 1600 	strd	r1, r6, [r0]
 80030ac:	300c      	adds	r0, #12
 80030ae:	60a0      	str	r0, [r4, #8]
 80030b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030b4:	f000 f8f6 	bl	80032a4 <memset>
 80030b8:	4620      	mov	r0, r4
 80030ba:	bd70      	pop	{r4, r5, r6, pc}

080030bc <__sfp_lock_acquire>:
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <__sfp_lock_acquire+0x8>)
 80030be:	f000 b8d8 	b.w	8003272 <__retarget_lock_acquire_recursive>
 80030c2:	bf00      	nop
 80030c4:	24000314 	.word	0x24000314

080030c8 <__sfp_lock_release>:
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <__sfp_lock_release+0x8>)
 80030ca:	f000 b8d3 	b.w	8003274 <__retarget_lock_release_recursive>
 80030ce:	bf00      	nop
 80030d0:	24000314 	.word	0x24000314

080030d4 <__sinit_lock_acquire>:
 80030d4:	4801      	ldr	r0, [pc, #4]	; (80030dc <__sinit_lock_acquire+0x8>)
 80030d6:	f000 b8cc 	b.w	8003272 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	2400030f 	.word	0x2400030f

080030e0 <__sinit_lock_release>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__sinit_lock_release+0x8>)
 80030e2:	f000 b8c7 	b.w	8003274 <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	2400030f 	.word	0x2400030f

080030ec <__sinit>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
 80030f0:	f7ff fff0 	bl	80030d4 <__sinit_lock_acquire>
 80030f4:	69a3      	ldr	r3, [r4, #24]
 80030f6:	b11b      	cbz	r3, 8003100 <__sinit+0x14>
 80030f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fc:	f7ff bff0 	b.w	80030e0 <__sinit_lock_release>
 8003100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003104:	6523      	str	r3, [r4, #80]	; 0x50
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <__sinit+0x68>)
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <__sinit+0x6c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	62a2      	str	r2, [r4, #40]	; 0x28
 800310e:	42a3      	cmp	r3, r4
 8003110:	bf04      	itt	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	61a3      	streq	r3, [r4, #24]
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f820 	bl	800315c <__sfp>
 800311c:	6060      	str	r0, [r4, #4]
 800311e:	4620      	mov	r0, r4
 8003120:	f000 f81c 	bl	800315c <__sfp>
 8003124:	60a0      	str	r0, [r4, #8]
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f818 	bl	800315c <__sfp>
 800312c:	2200      	movs	r2, #0
 800312e:	60e0      	str	r0, [r4, #12]
 8003130:	2104      	movs	r1, #4
 8003132:	6860      	ldr	r0, [r4, #4]
 8003134:	f7ff ff82 	bl	800303c <std>
 8003138:	68a0      	ldr	r0, [r4, #8]
 800313a:	2201      	movs	r2, #1
 800313c:	2109      	movs	r1, #9
 800313e:	f7ff ff7d 	bl	800303c <std>
 8003142:	68e0      	ldr	r0, [r4, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	2112      	movs	r1, #18
 8003148:	f7ff ff78 	bl	800303c <std>
 800314c:	2301      	movs	r3, #1
 800314e:	61a3      	str	r3, [r4, #24]
 8003150:	e7d2      	b.n	80030f8 <__sinit+0xc>
 8003152:	bf00      	nop
 8003154:	080058f0 	.word	0x080058f0
 8003158:	08003085 	.word	0x08003085

0800315c <__sfp>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	4607      	mov	r7, r0
 8003160:	f7ff ffac 	bl	80030bc <__sfp_lock_acquire>
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <__sfp+0x84>)
 8003166:	681e      	ldr	r6, [r3, #0]
 8003168:	69b3      	ldr	r3, [r6, #24]
 800316a:	b913      	cbnz	r3, 8003172 <__sfp+0x16>
 800316c:	4630      	mov	r0, r6
 800316e:	f7ff ffbd 	bl	80030ec <__sinit>
 8003172:	3648      	adds	r6, #72	; 0x48
 8003174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003178:	3b01      	subs	r3, #1
 800317a:	d503      	bpl.n	8003184 <__sfp+0x28>
 800317c:	6833      	ldr	r3, [r6, #0]
 800317e:	b30b      	cbz	r3, 80031c4 <__sfp+0x68>
 8003180:	6836      	ldr	r6, [r6, #0]
 8003182:	e7f7      	b.n	8003174 <__sfp+0x18>
 8003184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003188:	b9d5      	cbnz	r5, 80031c0 <__sfp+0x64>
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <__sfp+0x88>)
 800318c:	60e3      	str	r3, [r4, #12]
 800318e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003192:	6665      	str	r5, [r4, #100]	; 0x64
 8003194:	f000 f86c 	bl	8003270 <__retarget_lock_init_recursive>
 8003198:	f7ff ff96 	bl	80030c8 <__sfp_lock_release>
 800319c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031a4:	6025      	str	r5, [r4, #0]
 80031a6:	61a5      	str	r5, [r4, #24]
 80031a8:	2208      	movs	r2, #8
 80031aa:	4629      	mov	r1, r5
 80031ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031b0:	f000 f878 	bl	80032a4 <memset>
 80031b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031bc:	4620      	mov	r0, r4
 80031be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c0:	3468      	adds	r4, #104	; 0x68
 80031c2:	e7d9      	b.n	8003178 <__sfp+0x1c>
 80031c4:	2104      	movs	r1, #4
 80031c6:	4638      	mov	r0, r7
 80031c8:	f7ff ff62 	bl	8003090 <__sfmoreglue>
 80031cc:	4604      	mov	r4, r0
 80031ce:	6030      	str	r0, [r6, #0]
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d1d5      	bne.n	8003180 <__sfp+0x24>
 80031d4:	f7ff ff78 	bl	80030c8 <__sfp_lock_release>
 80031d8:	230c      	movs	r3, #12
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	e7ee      	b.n	80031bc <__sfp+0x60>
 80031de:	bf00      	nop
 80031e0:	080058f0 	.word	0x080058f0
 80031e4:	ffff0001 	.word	0xffff0001

080031e8 <_fwalk_reent>:
 80031e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ec:	4606      	mov	r6, r0
 80031ee:	4688      	mov	r8, r1
 80031f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031f4:	2700      	movs	r7, #0
 80031f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031fa:	f1b9 0901 	subs.w	r9, r9, #1
 80031fe:	d505      	bpl.n	800320c <_fwalk_reent+0x24>
 8003200:	6824      	ldr	r4, [r4, #0]
 8003202:	2c00      	cmp	r4, #0
 8003204:	d1f7      	bne.n	80031f6 <_fwalk_reent+0xe>
 8003206:	4638      	mov	r0, r7
 8003208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800320c:	89ab      	ldrh	r3, [r5, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d907      	bls.n	8003222 <_fwalk_reent+0x3a>
 8003212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003216:	3301      	adds	r3, #1
 8003218:	d003      	beq.n	8003222 <_fwalk_reent+0x3a>
 800321a:	4629      	mov	r1, r5
 800321c:	4630      	mov	r0, r6
 800321e:	47c0      	blx	r8
 8003220:	4307      	orrs	r7, r0
 8003222:	3568      	adds	r5, #104	; 0x68
 8003224:	e7e9      	b.n	80031fa <_fwalk_reent+0x12>
	...

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4d0d      	ldr	r5, [pc, #52]	; (8003260 <__libc_init_array+0x38>)
 800322c:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	2600      	movs	r6, #0
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	4d0b      	ldr	r5, [pc, #44]	; (8003268 <__libc_init_array+0x40>)
 800323a:	4c0c      	ldr	r4, [pc, #48]	; (800326c <__libc_init_array+0x44>)
 800323c:	f002 fae2 	bl	8005804 <_init>
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	2600      	movs	r6, #0
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	08005c78 	.word	0x08005c78
 8003264:	08005c78 	.word	0x08005c78
 8003268:	08005c78 	.word	0x08005c78
 800326c:	08005c7c 	.word	0x08005c7c

08003270 <__retarget_lock_init_recursive>:
 8003270:	4770      	bx	lr

08003272 <__retarget_lock_acquire_recursive>:
 8003272:	4770      	bx	lr

08003274 <__retarget_lock_release_recursive>:
 8003274:	4770      	bx	lr
	...

08003278 <malloc>:
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <malloc+0xc>)
 800327a:	4601      	mov	r1, r0
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f000 b869 	b.w	8003354 <_malloc_r>
 8003282:	bf00      	nop
 8003284:	24000014 	.word	0x24000014

08003288 <memcpy>:
 8003288:	440a      	add	r2, r1
 800328a:	4291      	cmp	r1, r2
 800328c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003290:	d100      	bne.n	8003294 <memcpy+0xc>
 8003292:	4770      	bx	lr
 8003294:	b510      	push	{r4, lr}
 8003296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800329a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800329e:	4291      	cmp	r1, r2
 80032a0:	d1f9      	bne.n	8003296 <memcpy+0xe>
 80032a2:	bd10      	pop	{r4, pc}

080032a4 <memset>:
 80032a4:	4402      	add	r2, r0
 80032a6:	4603      	mov	r3, r0
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d100      	bne.n	80032ae <memset+0xa>
 80032ac:	4770      	bx	lr
 80032ae:	f803 1b01 	strb.w	r1, [r3], #1
 80032b2:	e7f9      	b.n	80032a8 <memset+0x4>

080032b4 <_free_r>:
 80032b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032b6:	2900      	cmp	r1, #0
 80032b8:	d048      	beq.n	800334c <_free_r+0x98>
 80032ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032be:	9001      	str	r0, [sp, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f1a1 0404 	sub.w	r4, r1, #4
 80032c6:	bfb8      	it	lt
 80032c8:	18e4      	addlt	r4, r4, r3
 80032ca:	f001 fbab 	bl	8004a24 <__malloc_lock>
 80032ce:	4a20      	ldr	r2, [pc, #128]	; (8003350 <_free_r+0x9c>)
 80032d0:	9801      	ldr	r0, [sp, #4]
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4615      	mov	r5, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x32>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	b003      	add	sp, #12
 80032de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032e2:	f001 bba5 	b.w	8004a30 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90b      	bls.n	8003302 <_free_r+0x4e>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf04      	itt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	bf04      	itt	eq
 80032fa:	1852      	addeq	r2, r2, r1
 80032fc:	6022      	streq	r2, [r4, #0]
 80032fe:	602c      	str	r4, [r5, #0]
 8003300:	e7ec      	b.n	80032dc <_free_r+0x28>
 8003302:	461a      	mov	r2, r3
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	b10b      	cbz	r3, 800330c <_free_r+0x58>
 8003308:	42a3      	cmp	r3, r4
 800330a:	d9fa      	bls.n	8003302 <_free_r+0x4e>
 800330c:	6811      	ldr	r1, [r2, #0]
 800330e:	1855      	adds	r5, r2, r1
 8003310:	42a5      	cmp	r5, r4
 8003312:	d10b      	bne.n	800332c <_free_r+0x78>
 8003314:	6824      	ldr	r4, [r4, #0]
 8003316:	4421      	add	r1, r4
 8003318:	1854      	adds	r4, r2, r1
 800331a:	42a3      	cmp	r3, r4
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	d1dd      	bne.n	80032dc <_free_r+0x28>
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	6053      	str	r3, [r2, #4]
 8003326:	4421      	add	r1, r4
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	e7d7      	b.n	80032dc <_free_r+0x28>
 800332c:	d902      	bls.n	8003334 <_free_r+0x80>
 800332e:	230c      	movs	r3, #12
 8003330:	6003      	str	r3, [r0, #0]
 8003332:	e7d3      	b.n	80032dc <_free_r+0x28>
 8003334:	6825      	ldr	r5, [r4, #0]
 8003336:	1961      	adds	r1, r4, r5
 8003338:	428b      	cmp	r3, r1
 800333a:	bf04      	itt	eq
 800333c:	6819      	ldreq	r1, [r3, #0]
 800333e:	685b      	ldreq	r3, [r3, #4]
 8003340:	6063      	str	r3, [r4, #4]
 8003342:	bf04      	itt	eq
 8003344:	1949      	addeq	r1, r1, r5
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	6054      	str	r4, [r2, #4]
 800334a:	e7c7      	b.n	80032dc <_free_r+0x28>
 800334c:	b003      	add	sp, #12
 800334e:	bd30      	pop	{r4, r5, pc}
 8003350:	24000204 	.word	0x24000204

08003354 <_malloc_r>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	1ccd      	adds	r5, r1, #3
 8003358:	f025 0503 	bic.w	r5, r5, #3
 800335c:	3508      	adds	r5, #8
 800335e:	2d0c      	cmp	r5, #12
 8003360:	bf38      	it	cc
 8003362:	250c      	movcc	r5, #12
 8003364:	2d00      	cmp	r5, #0
 8003366:	4606      	mov	r6, r0
 8003368:	db01      	blt.n	800336e <_malloc_r+0x1a>
 800336a:	42a9      	cmp	r1, r5
 800336c:	d903      	bls.n	8003376 <_malloc_r+0x22>
 800336e:	230c      	movs	r3, #12
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	2000      	movs	r0, #0
 8003374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003376:	f001 fb55 	bl	8004a24 <__malloc_lock>
 800337a:	4921      	ldr	r1, [pc, #132]	; (8003400 <_malloc_r+0xac>)
 800337c:	680a      	ldr	r2, [r1, #0]
 800337e:	4614      	mov	r4, r2
 8003380:	b99c      	cbnz	r4, 80033aa <_malloc_r+0x56>
 8003382:	4f20      	ldr	r7, [pc, #128]	; (8003404 <_malloc_r+0xb0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b923      	cbnz	r3, 8003392 <_malloc_r+0x3e>
 8003388:	4621      	mov	r1, r4
 800338a:	4630      	mov	r0, r6
 800338c:	f000 fc7e 	bl	8003c8c <_sbrk_r>
 8003390:	6038      	str	r0, [r7, #0]
 8003392:	4629      	mov	r1, r5
 8003394:	4630      	mov	r0, r6
 8003396:	f000 fc79 	bl	8003c8c <_sbrk_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	d123      	bne.n	80033e6 <_malloc_r+0x92>
 800339e:	230c      	movs	r3, #12
 80033a0:	6033      	str	r3, [r6, #0]
 80033a2:	4630      	mov	r0, r6
 80033a4:	f001 fb44 	bl	8004a30 <__malloc_unlock>
 80033a8:	e7e3      	b.n	8003372 <_malloc_r+0x1e>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	1b5b      	subs	r3, r3, r5
 80033ae:	d417      	bmi.n	80033e0 <_malloc_r+0x8c>
 80033b0:	2b0b      	cmp	r3, #11
 80033b2:	d903      	bls.n	80033bc <_malloc_r+0x68>
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	441c      	add	r4, r3
 80033b8:	6025      	str	r5, [r4, #0]
 80033ba:	e004      	b.n	80033c6 <_malloc_r+0x72>
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	42a2      	cmp	r2, r4
 80033c0:	bf0c      	ite	eq
 80033c2:	600b      	streq	r3, [r1, #0]
 80033c4:	6053      	strne	r3, [r2, #4]
 80033c6:	4630      	mov	r0, r6
 80033c8:	f001 fb32 	bl	8004a30 <__malloc_unlock>
 80033cc:	f104 000b 	add.w	r0, r4, #11
 80033d0:	1d23      	adds	r3, r4, #4
 80033d2:	f020 0007 	bic.w	r0, r0, #7
 80033d6:	1ac2      	subs	r2, r0, r3
 80033d8:	d0cc      	beq.n	8003374 <_malloc_r+0x20>
 80033da:	1a1b      	subs	r3, r3, r0
 80033dc:	50a3      	str	r3, [r4, r2]
 80033de:	e7c9      	b.n	8003374 <_malloc_r+0x20>
 80033e0:	4622      	mov	r2, r4
 80033e2:	6864      	ldr	r4, [r4, #4]
 80033e4:	e7cc      	b.n	8003380 <_malloc_r+0x2c>
 80033e6:	1cc4      	adds	r4, r0, #3
 80033e8:	f024 0403 	bic.w	r4, r4, #3
 80033ec:	42a0      	cmp	r0, r4
 80033ee:	d0e3      	beq.n	80033b8 <_malloc_r+0x64>
 80033f0:	1a21      	subs	r1, r4, r0
 80033f2:	4630      	mov	r0, r6
 80033f4:	f000 fc4a 	bl	8003c8c <_sbrk_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d1dd      	bne.n	80033b8 <_malloc_r+0x64>
 80033fc:	e7cf      	b.n	800339e <_malloc_r+0x4a>
 80033fe:	bf00      	nop
 8003400:	24000204 	.word	0x24000204
 8003404:	24000208 	.word	0x24000208

08003408 <__cvt>:
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340a:	ed2d 8b02 	vpush	{d8}
 800340e:	eeb0 8b40 	vmov.f64	d8, d0
 8003412:	b085      	sub	sp, #20
 8003414:	4617      	mov	r7, r2
 8003416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003418:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800341a:	ee18 2a90 	vmov	r2, s17
 800341e:	f025 0520 	bic.w	r5, r5, #32
 8003422:	2a00      	cmp	r2, #0
 8003424:	bfb6      	itet	lt
 8003426:	222d      	movlt	r2, #45	; 0x2d
 8003428:	2200      	movge	r2, #0
 800342a:	eeb1 8b40 	vneglt.f64	d8, d0
 800342e:	2d46      	cmp	r5, #70	; 0x46
 8003430:	460c      	mov	r4, r1
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	d004      	beq.n	8003440 <__cvt+0x38>
 8003436:	2d45      	cmp	r5, #69	; 0x45
 8003438:	d100      	bne.n	800343c <__cvt+0x34>
 800343a:	3401      	adds	r4, #1
 800343c:	2102      	movs	r1, #2
 800343e:	e000      	b.n	8003442 <__cvt+0x3a>
 8003440:	2103      	movs	r1, #3
 8003442:	ab03      	add	r3, sp, #12
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	ab02      	add	r3, sp, #8
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	4622      	mov	r2, r4
 800344c:	4633      	mov	r3, r6
 800344e:	eeb0 0b48 	vmov.f64	d0, d8
 8003452:	f000 fd3d 	bl	8003ed0 <_dtoa_r>
 8003456:	2d47      	cmp	r5, #71	; 0x47
 8003458:	d109      	bne.n	800346e <__cvt+0x66>
 800345a:	07fb      	lsls	r3, r7, #31
 800345c:	d407      	bmi.n	800346e <__cvt+0x66>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003462:	1a1b      	subs	r3, r3, r0
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	b005      	add	sp, #20
 8003468:	ecbd 8b02 	vpop	{d8}
 800346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346e:	2d46      	cmp	r5, #70	; 0x46
 8003470:	eb00 0204 	add.w	r2, r0, r4
 8003474:	d10c      	bne.n	8003490 <__cvt+0x88>
 8003476:	7803      	ldrb	r3, [r0, #0]
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d107      	bne.n	800348c <__cvt+0x84>
 800347c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	bf1c      	itt	ne
 8003486:	f1c4 0401 	rsbne	r4, r4, #1
 800348a:	6034      	strne	r4, [r6, #0]
 800348c:	6833      	ldr	r3, [r6, #0]
 800348e:	441a      	add	r2, r3
 8003490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	bf08      	it	eq
 800349a:	9203      	streq	r2, [sp, #12]
 800349c:	2130      	movs	r1, #48	; 0x30
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d2dc      	bcs.n	800345e <__cvt+0x56>
 80034a4:	1c5c      	adds	r4, r3, #1
 80034a6:	9403      	str	r4, [sp, #12]
 80034a8:	7019      	strb	r1, [r3, #0]
 80034aa:	e7f8      	b.n	800349e <__cvt+0x96>

080034ac <__exponent>:
 80034ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ae:	4603      	mov	r3, r0
 80034b0:	2900      	cmp	r1, #0
 80034b2:	bfb8      	it	lt
 80034b4:	4249      	neglt	r1, r1
 80034b6:	f803 2b02 	strb.w	r2, [r3], #2
 80034ba:	bfb4      	ite	lt
 80034bc:	222d      	movlt	r2, #45	; 0x2d
 80034be:	222b      	movge	r2, #43	; 0x2b
 80034c0:	2909      	cmp	r1, #9
 80034c2:	7042      	strb	r2, [r0, #1]
 80034c4:	dd2a      	ble.n	800351c <__exponent+0x70>
 80034c6:	f10d 0407 	add.w	r4, sp, #7
 80034ca:	46a4      	mov	ip, r4
 80034cc:	270a      	movs	r7, #10
 80034ce:	46a6      	mov	lr, r4
 80034d0:	460a      	mov	r2, r1
 80034d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80034d6:	fb07 1516 	mls	r5, r7, r6, r1
 80034da:	3530      	adds	r5, #48	; 0x30
 80034dc:	2a63      	cmp	r2, #99	; 0x63
 80034de:	f104 34ff 	add.w	r4, r4, #4294967295
 80034e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034e6:	4631      	mov	r1, r6
 80034e8:	dcf1      	bgt.n	80034ce <__exponent+0x22>
 80034ea:	3130      	adds	r1, #48	; 0x30
 80034ec:	f1ae 0502 	sub.w	r5, lr, #2
 80034f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80034f4:	1c44      	adds	r4, r0, #1
 80034f6:	4629      	mov	r1, r5
 80034f8:	4561      	cmp	r1, ip
 80034fa:	d30a      	bcc.n	8003512 <__exponent+0x66>
 80034fc:	f10d 0209 	add.w	r2, sp, #9
 8003500:	eba2 020e 	sub.w	r2, r2, lr
 8003504:	4565      	cmp	r5, ip
 8003506:	bf88      	it	hi
 8003508:	2200      	movhi	r2, #0
 800350a:	4413      	add	r3, r2
 800350c:	1a18      	subs	r0, r3, r0
 800350e:	b003      	add	sp, #12
 8003510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003516:	f804 2f01 	strb.w	r2, [r4, #1]!
 800351a:	e7ed      	b.n	80034f8 <__exponent+0x4c>
 800351c:	2330      	movs	r3, #48	; 0x30
 800351e:	3130      	adds	r1, #48	; 0x30
 8003520:	7083      	strb	r3, [r0, #2]
 8003522:	70c1      	strb	r1, [r0, #3]
 8003524:	1d03      	adds	r3, r0, #4
 8003526:	e7f1      	b.n	800350c <__exponent+0x60>

08003528 <_printf_float>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	b08b      	sub	sp, #44	; 0x2c
 800352e:	460c      	mov	r4, r1
 8003530:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003534:	4616      	mov	r6, r2
 8003536:	461f      	mov	r7, r3
 8003538:	4605      	mov	r5, r0
 800353a:	f001 fa5d 	bl	80049f8 <_localeconv_r>
 800353e:	f8d0 b000 	ldr.w	fp, [r0]
 8003542:	4658      	mov	r0, fp
 8003544:	f7fc fecc 	bl	80002e0 <strlen>
 8003548:	2300      	movs	r3, #0
 800354a:	9308      	str	r3, [sp, #32]
 800354c:	f8d8 3000 	ldr.w	r3, [r8]
 8003550:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	3307      	adds	r3, #7
 8003558:	f023 0307 	bic.w	r3, r3, #7
 800355c:	f103 0108 	add.w	r1, r3, #8
 8003560:	f8c8 1000 	str.w	r1, [r8]
 8003564:	4682      	mov	sl, r0
 8003566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800356e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80037d0 <_printf_float+0x2a8>
 8003572:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003576:	eeb0 6bc0 	vabs.f64	d6, d0
 800357a:	eeb4 6b47 	vcmp.f64	d6, d7
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	dd24      	ble.n	80035ce <_printf_float+0xa6>
 8003584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d502      	bpl.n	8003594 <_printf_float+0x6c>
 800358e:	232d      	movs	r3, #45	; 0x2d
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <_printf_float+0x2b0>)
 8003596:	4891      	ldr	r0, [pc, #580]	; (80037dc <_printf_float+0x2b4>)
 8003598:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800359c:	bf94      	ite	ls
 800359e:	4698      	movls	r8, r3
 80035a0:	4680      	movhi	r8, r0
 80035a2:	2303      	movs	r3, #3
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	2300      	movs	r3, #0
 80035ac:	6022      	str	r2, [r4, #0]
 80035ae:	9304      	str	r3, [sp, #16]
 80035b0:	9700      	str	r7, [sp, #0]
 80035b2:	4633      	mov	r3, r6
 80035b4:	aa09      	add	r2, sp, #36	; 0x24
 80035b6:	4621      	mov	r1, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	f000 f9d3 	bl	8003964 <_printf_common>
 80035be:	3001      	adds	r0, #1
 80035c0:	f040 808a 	bne.w	80036d8 <_printf_float+0x1b0>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	b00b      	add	sp, #44	; 0x2c
 80035ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	d709      	bvc.n	80035ec <_printf_float+0xc4>
 80035d8:	ee10 3a90 	vmov	r3, s1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bfbc      	itt	lt
 80035e0:	232d      	movlt	r3, #45	; 0x2d
 80035e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035e6:	487e      	ldr	r0, [pc, #504]	; (80037e0 <_printf_float+0x2b8>)
 80035e8:	4b7e      	ldr	r3, [pc, #504]	; (80037e4 <_printf_float+0x2bc>)
 80035ea:	e7d5      	b.n	8003598 <_printf_float+0x70>
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80035f2:	9104      	str	r1, [sp, #16]
 80035f4:	1c59      	adds	r1, r3, #1
 80035f6:	d13c      	bne.n	8003672 <_printf_float+0x14a>
 80035f8:	2306      	movs	r3, #6
 80035fa:	6063      	str	r3, [r4, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	9303      	str	r3, [sp, #12]
 8003600:	ab08      	add	r3, sp, #32
 8003602:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360a:	ab07      	add	r3, sp, #28
 800360c:	6861      	ldr	r1, [r4, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	f10d 031b 	add.w	r3, sp, #27
 8003616:	4628      	mov	r0, r5
 8003618:	f7ff fef6 	bl	8003408 <__cvt>
 800361c:	9b04      	ldr	r3, [sp, #16]
 800361e:	9907      	ldr	r1, [sp, #28]
 8003620:	2b47      	cmp	r3, #71	; 0x47
 8003622:	4680      	mov	r8, r0
 8003624:	d108      	bne.n	8003638 <_printf_float+0x110>
 8003626:	1cc8      	adds	r0, r1, #3
 8003628:	db02      	blt.n	8003630 <_printf_float+0x108>
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	4299      	cmp	r1, r3
 800362e:	dd41      	ble.n	80036b4 <_printf_float+0x18c>
 8003630:	f1a9 0902 	sub.w	r9, r9, #2
 8003634:	fa5f f989 	uxtb.w	r9, r9
 8003638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800363c:	d820      	bhi.n	8003680 <_printf_float+0x158>
 800363e:	3901      	subs	r1, #1
 8003640:	464a      	mov	r2, r9
 8003642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003646:	9107      	str	r1, [sp, #28]
 8003648:	f7ff ff30 	bl	80034ac <__exponent>
 800364c:	9a08      	ldr	r2, [sp, #32]
 800364e:	9004      	str	r0, [sp, #16]
 8003650:	1813      	adds	r3, r2, r0
 8003652:	2a01      	cmp	r2, #1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	dc02      	bgt.n	800365e <_printf_float+0x136>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	07d2      	lsls	r2, r2, #31
 800365c:	d501      	bpl.n	8003662 <_printf_float+0x13a>
 800365e:	3301      	adds	r3, #1
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0a2      	beq.n	80035b0 <_printf_float+0x88>
 800366a:	232d      	movs	r3, #45	; 0x2d
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003670:	e79e      	b.n	80035b0 <_printf_float+0x88>
 8003672:	9904      	ldr	r1, [sp, #16]
 8003674:	2947      	cmp	r1, #71	; 0x47
 8003676:	d1c1      	bne.n	80035fc <_printf_float+0xd4>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1bf      	bne.n	80035fc <_printf_float+0xd4>
 800367c:	2301      	movs	r3, #1
 800367e:	e7bc      	b.n	80035fa <_printf_float+0xd2>
 8003680:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003684:	d118      	bne.n	80036b8 <_printf_float+0x190>
 8003686:	2900      	cmp	r1, #0
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	dd0b      	ble.n	80036a4 <_printf_float+0x17c>
 800368c:	6121      	str	r1, [r4, #16]
 800368e:	b913      	cbnz	r3, 8003696 <_printf_float+0x16e>
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	07d0      	lsls	r0, r2, #31
 8003694:	d502      	bpl.n	800369c <_printf_float+0x174>
 8003696:	3301      	adds	r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	65a1      	str	r1, [r4, #88]	; 0x58
 80036a0:	9304      	str	r3, [sp, #16]
 80036a2:	e7de      	b.n	8003662 <_printf_float+0x13a>
 80036a4:	b913      	cbnz	r3, 80036ac <_printf_float+0x184>
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	07d2      	lsls	r2, r2, #31
 80036aa:	d501      	bpl.n	80036b0 <_printf_float+0x188>
 80036ac:	3302      	adds	r3, #2
 80036ae:	e7f4      	b.n	800369a <_printf_float+0x172>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e7f2      	b.n	800369a <_printf_float+0x172>
 80036b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80036b8:	9b08      	ldr	r3, [sp, #32]
 80036ba:	4299      	cmp	r1, r3
 80036bc:	db05      	blt.n	80036ca <_printf_float+0x1a2>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	6121      	str	r1, [r4, #16]
 80036c2:	07d8      	lsls	r0, r3, #31
 80036c4:	d5ea      	bpl.n	800369c <_printf_float+0x174>
 80036c6:	1c4b      	adds	r3, r1, #1
 80036c8:	e7e7      	b.n	800369a <_printf_float+0x172>
 80036ca:	2900      	cmp	r1, #0
 80036cc:	bfd4      	ite	le
 80036ce:	f1c1 0202 	rsble	r2, r1, #2
 80036d2:	2201      	movgt	r2, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	e7e0      	b.n	800369a <_printf_float+0x172>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	055a      	lsls	r2, r3, #21
 80036dc:	d407      	bmi.n	80036ee <_printf_float+0x1c6>
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	4642      	mov	r2, r8
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	d12a      	bne.n	8003742 <_printf_float+0x21a>
 80036ec:	e76a      	b.n	80035c4 <_printf_float+0x9c>
 80036ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80036f2:	f240 80e2 	bls.w	80038ba <_printf_float+0x392>
 80036f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80036fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	d133      	bne.n	800376c <_printf_float+0x244>
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <_printf_float+0x2c0>)
 8003706:	2301      	movs	r3, #1
 8003708:	4631      	mov	r1, r6
 800370a:	4628      	mov	r0, r5
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	f43f af58 	beq.w	80035c4 <_printf_float+0x9c>
 8003714:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003718:	429a      	cmp	r2, r3
 800371a:	db02      	blt.n	8003722 <_printf_float+0x1fa>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	07d8      	lsls	r0, r3, #31
 8003720:	d50f      	bpl.n	8003742 <_printf_float+0x21a>
 8003722:	4653      	mov	r3, sl
 8003724:	465a      	mov	r2, fp
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f af49 	beq.w	80035c4 <_printf_float+0x9c>
 8003732:	f04f 0800 	mov.w	r8, #0
 8003736:	f104 091a 	add.w	r9, r4, #26
 800373a:	9b08      	ldr	r3, [sp, #32]
 800373c:	3b01      	subs	r3, #1
 800373e:	4543      	cmp	r3, r8
 8003740:	dc09      	bgt.n	8003756 <_printf_float+0x22e>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	f100 8108 	bmi.w	800395a <_printf_float+0x432>
 800374a:	68e0      	ldr	r0, [r4, #12]
 800374c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374e:	4298      	cmp	r0, r3
 8003750:	bfb8      	it	lt
 8003752:	4618      	movlt	r0, r3
 8003754:	e738      	b.n	80035c8 <_printf_float+0xa0>
 8003756:	2301      	movs	r3, #1
 8003758:	464a      	mov	r2, r9
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	f43f af2f 	beq.w	80035c4 <_printf_float+0x9c>
 8003766:	f108 0801 	add.w	r8, r8, #1
 800376a:	e7e6      	b.n	800373a <_printf_float+0x212>
 800376c:	9b07      	ldr	r3, [sp, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	dc3c      	bgt.n	80037ec <_printf_float+0x2c4>
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <_printf_float+0x2c0>)
 8003774:	2301      	movs	r3, #1
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f af21 	beq.w	80035c4 <_printf_float+0x9c>
 8003782:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003786:	4313      	orrs	r3, r2
 8003788:	d102      	bne.n	8003790 <_printf_float+0x268>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	07d9      	lsls	r1, r3, #31
 800378e:	d5d8      	bpl.n	8003742 <_printf_float+0x21a>
 8003790:	4653      	mov	r3, sl
 8003792:	465a      	mov	r2, fp
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f af12 	beq.w	80035c4 <_printf_float+0x9c>
 80037a0:	f04f 0900 	mov.w	r9, #0
 80037a4:	f104 0a1a 	add.w	sl, r4, #26
 80037a8:	9b07      	ldr	r3, [sp, #28]
 80037aa:	425b      	negs	r3, r3
 80037ac:	454b      	cmp	r3, r9
 80037ae:	dc01      	bgt.n	80037b4 <_printf_float+0x28c>
 80037b0:	9b08      	ldr	r3, [sp, #32]
 80037b2:	e795      	b.n	80036e0 <_printf_float+0x1b8>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4652      	mov	r2, sl
 80037b8:	4631      	mov	r1, r6
 80037ba:	4628      	mov	r0, r5
 80037bc:	47b8      	blx	r7
 80037be:	3001      	adds	r0, #1
 80037c0:	f43f af00 	beq.w	80035c4 <_printf_float+0x9c>
 80037c4:	f109 0901 	add.w	r9, r9, #1
 80037c8:	e7ee      	b.n	80037a8 <_printf_float+0x280>
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	ffffffff 	.word	0xffffffff
 80037d4:	7fefffff 	.word	0x7fefffff
 80037d8:	080058f4 	.word	0x080058f4
 80037dc:	080058f8 	.word	0x080058f8
 80037e0:	08005900 	.word	0x08005900
 80037e4:	080058fc 	.word	0x080058fc
 80037e8:	08005904 	.word	0x08005904
 80037ec:	9a08      	ldr	r2, [sp, #32]
 80037ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bfa8      	it	ge
 80037f4:	461a      	movge	r2, r3
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	4691      	mov	r9, r2
 80037fa:	dc38      	bgt.n	800386e <_printf_float+0x346>
 80037fc:	2300      	movs	r3, #0
 80037fe:	9305      	str	r3, [sp, #20]
 8003800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003804:	f104 021a 	add.w	r2, r4, #26
 8003808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800380a:	9905      	ldr	r1, [sp, #20]
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	eba3 0309 	sub.w	r3, r3, r9
 8003812:	428b      	cmp	r3, r1
 8003814:	dc33      	bgt.n	800387e <_printf_float+0x356>
 8003816:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800381a:	429a      	cmp	r2, r3
 800381c:	db3c      	blt.n	8003898 <_printf_float+0x370>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	07da      	lsls	r2, r3, #31
 8003822:	d439      	bmi.n	8003898 <_printf_float+0x370>
 8003824:	9a08      	ldr	r2, [sp, #32]
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	9907      	ldr	r1, [sp, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	eba2 0901 	sub.w	r9, r2, r1
 8003830:	4599      	cmp	r9, r3
 8003832:	bfa8      	it	ge
 8003834:	4699      	movge	r9, r3
 8003836:	f1b9 0f00 	cmp.w	r9, #0
 800383a:	dc35      	bgt.n	80038a8 <_printf_float+0x380>
 800383c:	f04f 0800 	mov.w	r8, #0
 8003840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003844:	f104 0a1a 	add.w	sl, r4, #26
 8003848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	eba3 0309 	sub.w	r3, r3, r9
 8003852:	4543      	cmp	r3, r8
 8003854:	f77f af75 	ble.w	8003742 <_printf_float+0x21a>
 8003858:	2301      	movs	r3, #1
 800385a:	4652      	mov	r2, sl
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f aeae 	beq.w	80035c4 <_printf_float+0x9c>
 8003868:	f108 0801 	add.w	r8, r8, #1
 800386c:	e7ec      	b.n	8003848 <_printf_float+0x320>
 800386e:	4613      	mov	r3, r2
 8003870:	4631      	mov	r1, r6
 8003872:	4642      	mov	r2, r8
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	d1bf      	bne.n	80037fc <_printf_float+0x2d4>
 800387c:	e6a2      	b.n	80035c4 <_printf_float+0x9c>
 800387e:	2301      	movs	r3, #1
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	9204      	str	r2, [sp, #16]
 8003886:	47b8      	blx	r7
 8003888:	3001      	adds	r0, #1
 800388a:	f43f ae9b 	beq.w	80035c4 <_printf_float+0x9c>
 800388e:	9b05      	ldr	r3, [sp, #20]
 8003890:	9a04      	ldr	r2, [sp, #16]
 8003892:	3301      	adds	r3, #1
 8003894:	9305      	str	r3, [sp, #20]
 8003896:	e7b7      	b.n	8003808 <_printf_float+0x2e0>
 8003898:	4653      	mov	r3, sl
 800389a:	465a      	mov	r2, fp
 800389c:	4631      	mov	r1, r6
 800389e:	4628      	mov	r0, r5
 80038a0:	47b8      	blx	r7
 80038a2:	3001      	adds	r0, #1
 80038a4:	d1be      	bne.n	8003824 <_printf_float+0x2fc>
 80038a6:	e68d      	b.n	80035c4 <_printf_float+0x9c>
 80038a8:	9a04      	ldr	r2, [sp, #16]
 80038aa:	464b      	mov	r3, r9
 80038ac:	4442      	add	r2, r8
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1c1      	bne.n	800383c <_printf_float+0x314>
 80038b8:	e684      	b.n	80035c4 <_printf_float+0x9c>
 80038ba:	9a08      	ldr	r2, [sp, #32]
 80038bc:	2a01      	cmp	r2, #1
 80038be:	dc01      	bgt.n	80038c4 <_printf_float+0x39c>
 80038c0:	07db      	lsls	r3, r3, #31
 80038c2:	d537      	bpl.n	8003934 <_printf_float+0x40c>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4642      	mov	r2, r8
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f ae78 	beq.w	80035c4 <_printf_float+0x9c>
 80038d4:	4653      	mov	r3, sl
 80038d6:	465a      	mov	r2, fp
 80038d8:	4631      	mov	r1, r6
 80038da:	4628      	mov	r0, r5
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f ae70 	beq.w	80035c4 <_printf_float+0x9c>
 80038e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80038e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d01b      	beq.n	800392a <_printf_float+0x402>
 80038f2:	9b08      	ldr	r3, [sp, #32]
 80038f4:	f108 0201 	add.w	r2, r8, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	4631      	mov	r1, r6
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b8      	blx	r7
 8003900:	3001      	adds	r0, #1
 8003902:	d10e      	bne.n	8003922 <_printf_float+0x3fa>
 8003904:	e65e      	b.n	80035c4 <_printf_float+0x9c>
 8003906:	2301      	movs	r3, #1
 8003908:	464a      	mov	r2, r9
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f ae57 	beq.w	80035c4 <_printf_float+0x9c>
 8003916:	f108 0801 	add.w	r8, r8, #1
 800391a:	9b08      	ldr	r3, [sp, #32]
 800391c:	3b01      	subs	r3, #1
 800391e:	4543      	cmp	r3, r8
 8003920:	dcf1      	bgt.n	8003906 <_printf_float+0x3de>
 8003922:	9b04      	ldr	r3, [sp, #16]
 8003924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003928:	e6db      	b.n	80036e2 <_printf_float+0x1ba>
 800392a:	f04f 0800 	mov.w	r8, #0
 800392e:	f104 091a 	add.w	r9, r4, #26
 8003932:	e7f2      	b.n	800391a <_printf_float+0x3f2>
 8003934:	2301      	movs	r3, #1
 8003936:	4642      	mov	r2, r8
 8003938:	e7df      	b.n	80038fa <_printf_float+0x3d2>
 800393a:	2301      	movs	r3, #1
 800393c:	464a      	mov	r2, r9
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	47b8      	blx	r7
 8003944:	3001      	adds	r0, #1
 8003946:	f43f ae3d 	beq.w	80035c4 <_printf_float+0x9c>
 800394a:	f108 0801 	add.w	r8, r8, #1
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003952:	1a5b      	subs	r3, r3, r1
 8003954:	4543      	cmp	r3, r8
 8003956:	dcf0      	bgt.n	800393a <_printf_float+0x412>
 8003958:	e6f7      	b.n	800374a <_printf_float+0x222>
 800395a:	f04f 0800 	mov.w	r8, #0
 800395e:	f104 0919 	add.w	r9, r4, #25
 8003962:	e7f4      	b.n	800394e <_printf_float+0x426>

08003964 <_printf_common>:
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	4616      	mov	r6, r2
 800396a:	4699      	mov	r9, r3
 800396c:	688a      	ldr	r2, [r1, #8]
 800396e:	690b      	ldr	r3, [r1, #16]
 8003970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003974:	4293      	cmp	r3, r2
 8003976:	bfb8      	it	lt
 8003978:	4613      	movlt	r3, r2
 800397a:	6033      	str	r3, [r6, #0]
 800397c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003980:	4607      	mov	r7, r0
 8003982:	460c      	mov	r4, r1
 8003984:	b10a      	cbz	r2, 800398a <_printf_common+0x26>
 8003986:	3301      	adds	r3, #1
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	0699      	lsls	r1, r3, #26
 800398e:	bf42      	ittt	mi
 8003990:	6833      	ldrmi	r3, [r6, #0]
 8003992:	3302      	addmi	r3, #2
 8003994:	6033      	strmi	r3, [r6, #0]
 8003996:	6825      	ldr	r5, [r4, #0]
 8003998:	f015 0506 	ands.w	r5, r5, #6
 800399c:	d106      	bne.n	80039ac <_printf_common+0x48>
 800399e:	f104 0a19 	add.w	sl, r4, #25
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	6832      	ldr	r2, [r6, #0]
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	dc26      	bgt.n	80039fa <_printf_common+0x96>
 80039ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039b0:	1e13      	subs	r3, r2, #0
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	bf18      	it	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	0692      	lsls	r2, r2, #26
 80039ba:	d42b      	bmi.n	8003a14 <_printf_common+0xb0>
 80039bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d01e      	beq.n	8003a08 <_printf_common+0xa4>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	68e5      	ldr	r5, [r4, #12]
 80039ce:	6832      	ldr	r2, [r6, #0]
 80039d0:	f003 0306 	and.w	r3, r3, #6
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	bf08      	it	eq
 80039d8:	1aad      	subeq	r5, r5, r2
 80039da:	68a3      	ldr	r3, [r4, #8]
 80039dc:	6922      	ldr	r2, [r4, #16]
 80039de:	bf0c      	ite	eq
 80039e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e4:	2500      	movne	r5, #0
 80039e6:	4293      	cmp	r3, r2
 80039e8:	bfc4      	itt	gt
 80039ea:	1a9b      	subgt	r3, r3, r2
 80039ec:	18ed      	addgt	r5, r5, r3
 80039ee:	2600      	movs	r6, #0
 80039f0:	341a      	adds	r4, #26
 80039f2:	42b5      	cmp	r5, r6
 80039f4:	d11a      	bne.n	8003a2c <_printf_common+0xc8>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e008      	b.n	8003a0c <_printf_common+0xa8>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4652      	mov	r2, sl
 80039fe:	4649      	mov	r1, r9
 8003a00:	4638      	mov	r0, r7
 8003a02:	47c0      	blx	r8
 8003a04:	3001      	adds	r0, #1
 8003a06:	d103      	bne.n	8003a10 <_printf_common+0xac>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	3501      	adds	r5, #1
 8003a12:	e7c6      	b.n	80039a2 <_printf_common+0x3e>
 8003a14:	18e1      	adds	r1, r4, r3
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	2030      	movs	r0, #48	; 0x30
 8003a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1e:	4422      	add	r2, r4
 8003a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a28:	3302      	adds	r3, #2
 8003a2a:	e7c7      	b.n	80039bc <_printf_common+0x58>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4622      	mov	r2, r4
 8003a30:	4649      	mov	r1, r9
 8003a32:	4638      	mov	r0, r7
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d0e6      	beq.n	8003a08 <_printf_common+0xa4>
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7d9      	b.n	80039f2 <_printf_common+0x8e>
	...

08003a40 <_printf_i>:
 8003a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	460c      	mov	r4, r1
 8003a46:	4691      	mov	r9, r2
 8003a48:	7e27      	ldrb	r7, [r4, #24]
 8003a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a4c:	2f78      	cmp	r7, #120	; 0x78
 8003a4e:	4680      	mov	r8, r0
 8003a50:	469a      	mov	sl, r3
 8003a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a56:	d807      	bhi.n	8003a68 <_printf_i+0x28>
 8003a58:	2f62      	cmp	r7, #98	; 0x62
 8003a5a:	d80a      	bhi.n	8003a72 <_printf_i+0x32>
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	f000 80d8 	beq.w	8003c12 <_printf_i+0x1d2>
 8003a62:	2f58      	cmp	r7, #88	; 0x58
 8003a64:	f000 80a3 	beq.w	8003bae <_printf_i+0x16e>
 8003a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a70:	e03a      	b.n	8003ae8 <_printf_i+0xa8>
 8003a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a76:	2b15      	cmp	r3, #21
 8003a78:	d8f6      	bhi.n	8003a68 <_printf_i+0x28>
 8003a7a:	a001      	add	r0, pc, #4	; (adr r0, 8003a80 <_printf_i+0x40>)
 8003a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003a69 	.word	0x08003a69
 8003a8c:	08003a69 	.word	0x08003a69
 8003a90:	08003a69 	.word	0x08003a69
 8003a94:	08003a69 	.word	0x08003a69
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003a69 	.word	0x08003a69
 8003aa0:	08003a69 	.word	0x08003a69
 8003aa4:	08003a69 	.word	0x08003a69
 8003aa8:	08003a69 	.word	0x08003a69
 8003aac:	08003bf9 	.word	0x08003bf9
 8003ab0:	08003b1d 	.word	0x08003b1d
 8003ab4:	08003bdb 	.word	0x08003bdb
 8003ab8:	08003a69 	.word	0x08003a69
 8003abc:	08003a69 	.word	0x08003a69
 8003ac0:	08003c1b 	.word	0x08003c1b
 8003ac4:	08003a69 	.word	0x08003a69
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003a69 	.word	0x08003a69
 8003ad0:	08003a69 	.word	0x08003a69
 8003ad4:	08003be3 	.word	0x08003be3
 8003ad8:	680b      	ldr	r3, [r1, #0]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	600a      	str	r2, [r1, #0]
 8003ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0a3      	b.n	8003c34 <_printf_i+0x1f4>
 8003aec:	6825      	ldr	r5, [r4, #0]
 8003aee:	6808      	ldr	r0, [r1, #0]
 8003af0:	062e      	lsls	r6, r5, #24
 8003af2:	f100 0304 	add.w	r3, r0, #4
 8003af6:	d50a      	bpl.n	8003b0e <_printf_i+0xce>
 8003af8:	6805      	ldr	r5, [r0, #0]
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	da03      	bge.n	8003b08 <_printf_i+0xc8>
 8003b00:	232d      	movs	r3, #45	; 0x2d
 8003b02:	426d      	negs	r5, r5
 8003b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b08:	485e      	ldr	r0, [pc, #376]	; (8003c84 <_printf_i+0x244>)
 8003b0a:	230a      	movs	r3, #10
 8003b0c:	e019      	b.n	8003b42 <_printf_i+0x102>
 8003b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b12:	6805      	ldr	r5, [r0, #0]
 8003b14:	600b      	str	r3, [r1, #0]
 8003b16:	bf18      	it	ne
 8003b18:	b22d      	sxthne	r5, r5
 8003b1a:	e7ef      	b.n	8003afc <_printf_i+0xbc>
 8003b1c:	680b      	ldr	r3, [r1, #0]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	1d18      	adds	r0, r3, #4
 8003b22:	6008      	str	r0, [r1, #0]
 8003b24:	0628      	lsls	r0, r5, #24
 8003b26:	d501      	bpl.n	8003b2c <_printf_i+0xec>
 8003b28:	681d      	ldr	r5, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <_printf_i+0xf2>
 8003b2c:	0669      	lsls	r1, r5, #25
 8003b2e:	d5fb      	bpl.n	8003b28 <_printf_i+0xe8>
 8003b30:	881d      	ldrh	r5, [r3, #0]
 8003b32:	4854      	ldr	r0, [pc, #336]	; (8003c84 <_printf_i+0x244>)
 8003b34:	2f6f      	cmp	r7, #111	; 0x6f
 8003b36:	bf0c      	ite	eq
 8003b38:	2308      	moveq	r3, #8
 8003b3a:	230a      	movne	r3, #10
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b42:	6866      	ldr	r6, [r4, #4]
 8003b44:	60a6      	str	r6, [r4, #8]
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	bfa2      	ittt	ge
 8003b4a:	6821      	ldrge	r1, [r4, #0]
 8003b4c:	f021 0104 	bicge.w	r1, r1, #4
 8003b50:	6021      	strge	r1, [r4, #0]
 8003b52:	b90d      	cbnz	r5, 8003b58 <_printf_i+0x118>
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	d04d      	beq.n	8003bf4 <_printf_i+0x1b4>
 8003b58:	4616      	mov	r6, r2
 8003b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8003b62:	5dc7      	ldrb	r7, [r0, r7]
 8003b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b68:	462f      	mov	r7, r5
 8003b6a:	42bb      	cmp	r3, r7
 8003b6c:	460d      	mov	r5, r1
 8003b6e:	d9f4      	bls.n	8003b5a <_printf_i+0x11a>
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d10b      	bne.n	8003b8c <_printf_i+0x14c>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	07df      	lsls	r7, r3, #31
 8003b78:	d508      	bpl.n	8003b8c <_printf_i+0x14c>
 8003b7a:	6923      	ldr	r3, [r4, #16]
 8003b7c:	6861      	ldr	r1, [r4, #4]
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	bfde      	ittt	le
 8003b82:	2330      	movle	r3, #48	; 0x30
 8003b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b8c:	1b92      	subs	r2, r2, r6
 8003b8e:	6122      	str	r2, [r4, #16]
 8003b90:	f8cd a000 	str.w	sl, [sp]
 8003b94:	464b      	mov	r3, r9
 8003b96:	aa03      	add	r2, sp, #12
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7ff fee2 	bl	8003964 <_printf_common>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d14c      	bne.n	8003c3e <_printf_i+0x1fe>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	b004      	add	sp, #16
 8003baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bae:	4835      	ldr	r0, [pc, #212]	; (8003c84 <_printf_i+0x244>)
 8003bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	680e      	ldr	r6, [r1, #0]
 8003bb8:	061f      	lsls	r7, r3, #24
 8003bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bbe:	600e      	str	r6, [r1, #0]
 8003bc0:	d514      	bpl.n	8003bec <_printf_i+0x1ac>
 8003bc2:	07d9      	lsls	r1, r3, #31
 8003bc4:	bf44      	itt	mi
 8003bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003bca:	6023      	strmi	r3, [r4, #0]
 8003bcc:	b91d      	cbnz	r5, 8003bd6 <_printf_i+0x196>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f023 0320 	bic.w	r3, r3, #32
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	e7b0      	b.n	8003b3c <_printf_i+0xfc>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	2378      	movs	r3, #120	; 0x78
 8003be4:	4828      	ldr	r0, [pc, #160]	; (8003c88 <_printf_i+0x248>)
 8003be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bea:	e7e3      	b.n	8003bb4 <_printf_i+0x174>
 8003bec:	065e      	lsls	r6, r3, #25
 8003bee:	bf48      	it	mi
 8003bf0:	b2ad      	uxthmi	r5, r5
 8003bf2:	e7e6      	b.n	8003bc2 <_printf_i+0x182>
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	e7bb      	b.n	8003b70 <_printf_i+0x130>
 8003bf8:	680b      	ldr	r3, [r1, #0]
 8003bfa:	6826      	ldr	r6, [r4, #0]
 8003bfc:	6960      	ldr	r0, [r4, #20]
 8003bfe:	1d1d      	adds	r5, r3, #4
 8003c00:	600d      	str	r5, [r1, #0]
 8003c02:	0635      	lsls	r5, r6, #24
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	d501      	bpl.n	8003c0c <_printf_i+0x1cc>
 8003c08:	6018      	str	r0, [r3, #0]
 8003c0a:	e002      	b.n	8003c12 <_printf_i+0x1d2>
 8003c0c:	0671      	lsls	r1, r6, #25
 8003c0e:	d5fb      	bpl.n	8003c08 <_printf_i+0x1c8>
 8003c10:	8018      	strh	r0, [r3, #0]
 8003c12:	2300      	movs	r3, #0
 8003c14:	6123      	str	r3, [r4, #16]
 8003c16:	4616      	mov	r6, r2
 8003c18:	e7ba      	b.n	8003b90 <_printf_i+0x150>
 8003c1a:	680b      	ldr	r3, [r1, #0]
 8003c1c:	1d1a      	adds	r2, r3, #4
 8003c1e:	600a      	str	r2, [r1, #0]
 8003c20:	681e      	ldr	r6, [r3, #0]
 8003c22:	6862      	ldr	r2, [r4, #4]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7fc fb62 	bl	80002f0 <memchr>
 8003c2c:	b108      	cbz	r0, 8003c32 <_printf_i+0x1f2>
 8003c2e:	1b80      	subs	r0, r0, r6
 8003c30:	6060      	str	r0, [r4, #4]
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	2300      	movs	r3, #0
 8003c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c3c:	e7a8      	b.n	8003b90 <_printf_i+0x150>
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	4632      	mov	r2, r6
 8003c42:	4649      	mov	r1, r9
 8003c44:	4640      	mov	r0, r8
 8003c46:	47d0      	blx	sl
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d0ab      	beq.n	8003ba4 <_printf_i+0x164>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	079b      	lsls	r3, r3, #30
 8003c50:	d413      	bmi.n	8003c7a <_printf_i+0x23a>
 8003c52:	68e0      	ldr	r0, [r4, #12]
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	4298      	cmp	r0, r3
 8003c58:	bfb8      	it	lt
 8003c5a:	4618      	movlt	r0, r3
 8003c5c:	e7a4      	b.n	8003ba8 <_printf_i+0x168>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4632      	mov	r2, r6
 8003c62:	4649      	mov	r1, r9
 8003c64:	4640      	mov	r0, r8
 8003c66:	47d0      	blx	sl
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d09b      	beq.n	8003ba4 <_printf_i+0x164>
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	9903      	ldr	r1, [sp, #12]
 8003c72:	1a5b      	subs	r3, r3, r1
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dcf2      	bgt.n	8003c5e <_printf_i+0x21e>
 8003c78:	e7eb      	b.n	8003c52 <_printf_i+0x212>
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	f104 0619 	add.w	r6, r4, #25
 8003c80:	e7f5      	b.n	8003c6e <_printf_i+0x22e>
 8003c82:	bf00      	nop
 8003c84:	08005906 	.word	0x08005906
 8003c88:	08005917 	.word	0x08005917

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fc fe78 	bl	800098c <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	24000318 	.word	0x24000318

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f001 fba8 	bl	8005408 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	05db      	lsls	r3, r3, #23
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f000 fe8a 	bl	8004a00 <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f000 b817 	b.w	8003d34 <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 fe77 	bl	8004a00 <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b831 	b.w	8003d94 <_close_r>
	...

08003d34 <_write_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	; (8003d54 <_write_r+0x20>)
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	2200      	movs	r2, #0
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7ff f86a 	bl	8002e1c <_write>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_write_r+0x1e>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_write_r+0x1e>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	24000318 	.word	0x24000318

08003d58 <__assert_func>:
 8003d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d5a:	4614      	mov	r4, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <__assert_func+0x2c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4605      	mov	r5, r0
 8003d64:	68d8      	ldr	r0, [r3, #12]
 8003d66:	b14c      	cbz	r4, 8003d7c <__assert_func+0x24>
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <__assert_func+0x30>)
 8003d6a:	9100      	str	r1, [sp, #0]
 8003d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d70:	4906      	ldr	r1, [pc, #24]	; (8003d8c <__assert_func+0x34>)
 8003d72:	462b      	mov	r3, r5
 8003d74:	f000 fe2e 	bl	80049d4 <fiprintf>
 8003d78:	f001 fc18 	bl	80055ac <abort>
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <__assert_func+0x38>)
 8003d7e:	461c      	mov	r4, r3
 8003d80:	e7f3      	b.n	8003d6a <__assert_func+0x12>
 8003d82:	bf00      	nop
 8003d84:	24000014 	.word	0x24000014
 8003d88:	08005928 	.word	0x08005928
 8003d8c:	08005935 	.word	0x08005935
 8003d90:	08005963 	.word	0x08005963

08003d94 <_close_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	; (8003db0 <_close_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f001 fcf6 	bl	8005790 <_close>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_close_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_close_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	24000318 	.word	0x24000318

08003db4 <quorem>:
 8003db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	6903      	ldr	r3, [r0, #16]
 8003dba:	690c      	ldr	r4, [r1, #16]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	4607      	mov	r7, r0
 8003dc0:	f2c0 8081 	blt.w	8003ec6 <quorem+0x112>
 8003dc4:	3c01      	subs	r4, #1
 8003dc6:	f101 0814 	add.w	r8, r1, #20
 8003dca:	f100 0514 	add.w	r5, r0, #20
 8003dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	429a      	cmp	r2, r3
 8003de0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003de4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003de8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dec:	d331      	bcc.n	8003e52 <quorem+0x9e>
 8003dee:	f04f 0e00 	mov.w	lr, #0
 8003df2:	4640      	mov	r0, r8
 8003df4:	46ac      	mov	ip, r5
 8003df6:	46f2      	mov	sl, lr
 8003df8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003dfc:	b293      	uxth	r3, r2
 8003dfe:	fb06 e303 	mla	r3, r6, r3, lr
 8003e02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	ebaa 0303 	sub.w	r3, sl, r3
 8003e0c:	0c12      	lsrs	r2, r2, #16
 8003e0e:	f8dc a000 	ldr.w	sl, [ip]
 8003e12:	fb06 e202 	mla	r2, r6, r2, lr
 8003e16:	fa13 f38a 	uxtah	r3, r3, sl
 8003e1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003e1e:	fa1f fa82 	uxth.w	sl, r2
 8003e22:	f8dc 2000 	ldr.w	r2, [ip]
 8003e26:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003e2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e34:	4581      	cmp	r9, r0
 8003e36:	f84c 3b04 	str.w	r3, [ip], #4
 8003e3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e3e:	d2db      	bcs.n	8003df8 <quorem+0x44>
 8003e40:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e44:	b92b      	cbnz	r3, 8003e52 <quorem+0x9e>
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	3b04      	subs	r3, #4
 8003e4a:	429d      	cmp	r5, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	d32e      	bcc.n	8003eae <quorem+0xfa>
 8003e50:	613c      	str	r4, [r7, #16]
 8003e52:	4638      	mov	r0, r7
 8003e54:	f001 f870 	bl	8004f38 <__mcmp>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	db24      	blt.n	8003ea6 <quorem+0xf2>
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f04f 0c00 	mov.w	ip, #0
 8003e64:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e68:	f8d0 e000 	ldr.w	lr, [r0]
 8003e6c:	b293      	uxth	r3, r2
 8003e6e:	ebac 0303 	sub.w	r3, ip, r3
 8003e72:	0c12      	lsrs	r2, r2, #16
 8003e74:	fa13 f38e 	uxtah	r3, r3, lr
 8003e78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e86:	45c1      	cmp	r9, r8
 8003e88:	f840 3b04 	str.w	r3, [r0], #4
 8003e8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e90:	d2e8      	bcs.n	8003e64 <quorem+0xb0>
 8003e92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e9a:	b922      	cbnz	r2, 8003ea6 <quorem+0xf2>
 8003e9c:	3b04      	subs	r3, #4
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	d30a      	bcc.n	8003eba <quorem+0x106>
 8003ea4:	613c      	str	r4, [r7, #16]
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	b003      	add	sp, #12
 8003eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d1cc      	bne.n	8003e50 <quorem+0x9c>
 8003eb6:	3c01      	subs	r4, #1
 8003eb8:	e7c7      	b.n	8003e4a <quorem+0x96>
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <quorem+0xf0>
 8003ec2:	3c01      	subs	r4, #1
 8003ec4:	e7eb      	b.n	8003e9e <quorem+0xea>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7ee      	b.n	8003ea8 <quorem+0xf4>
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <_dtoa_r>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	ec59 8b10 	vmov	r8, r9, d0
 8003ed8:	b095      	sub	sp, #84	; 0x54
 8003eda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003edc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8003ede:	9107      	str	r1, [sp, #28]
 8003ee0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8003eea:	b975      	cbnz	r5, 8003f0a <_dtoa_r+0x3a>
 8003eec:	2010      	movs	r0, #16
 8003eee:	f7fe ffb5 	bl	8002e5c <__wrap_malloc>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8003ef6:	b920      	cbnz	r0, 8003f02 <_dtoa_r+0x32>
 8003ef8:	4bab      	ldr	r3, [pc, #684]	; (80041a8 <_dtoa_r+0x2d8>)
 8003efa:	21ea      	movs	r1, #234	; 0xea
 8003efc:	48ab      	ldr	r0, [pc, #684]	; (80041ac <_dtoa_r+0x2dc>)
 8003efe:	f7ff ff2b 	bl	8003d58 <__assert_func>
 8003f02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f06:	6005      	str	r5, [r0, #0]
 8003f08:	60c5      	str	r5, [r0, #12]
 8003f0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	b151      	cbz	r1, 8003f26 <_dtoa_r+0x56>
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	604a      	str	r2, [r1, #4]
 8003f14:	2301      	movs	r3, #1
 8003f16:	4093      	lsls	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 fdce 	bl	8004abc <_Bfree>
 8003f20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f1b9 0300 	subs.w	r3, r9, #0
 8003f2a:	bfbb      	ittet	lt
 8003f2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	9303      	strlt	r3, [sp, #12]
 8003f32:	2300      	movge	r3, #0
 8003f34:	2201      	movlt	r2, #1
 8003f36:	bfac      	ite	ge
 8003f38:	6023      	strge	r3, [r4, #0]
 8003f3a:	6022      	strlt	r2, [r4, #0]
 8003f3c:	4b9c      	ldr	r3, [pc, #624]	; (80041b0 <_dtoa_r+0x2e0>)
 8003f3e:	9c03      	ldr	r4, [sp, #12]
 8003f40:	43a3      	bics	r3, r4
 8003f42:	d11a      	bne.n	8003f7a <_dtoa_r+0xaa>
 8003f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f46:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003f50:	ea53 0308 	orrs.w	r3, r3, r8
 8003f54:	f000 8512 	beq.w	800497c <_dtoa_r+0xaac>
 8003f58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f5a:	b953      	cbnz	r3, 8003f72 <_dtoa_r+0xa2>
 8003f5c:	4b95      	ldr	r3, [pc, #596]	; (80041b4 <_dtoa_r+0x2e4>)
 8003f5e:	e01f      	b.n	8003fa0 <_dtoa_r+0xd0>
 8003f60:	4b95      	ldr	r3, [pc, #596]	; (80041b8 <_dtoa_r+0x2e8>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	9800      	ldr	r0, [sp, #0]
 8003f6c:	b015      	add	sp, #84	; 0x54
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	4b90      	ldr	r3, [pc, #576]	; (80041b4 <_dtoa_r+0x2e4>)
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	3303      	adds	r3, #3
 8003f78:	e7f5      	b.n	8003f66 <_dtoa_r+0x96>
 8003f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003f8a:	d10b      	bne.n	8003fa4 <_dtoa_r+0xd4>
 8003f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f8e:	2301      	movs	r3, #1
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 84ee 	beq.w	8004976 <_dtoa_r+0xaa6>
 8003f9a:	4888      	ldr	r0, [pc, #544]	; (80041bc <_dtoa_r+0x2ec>)
 8003f9c:	6018      	str	r0, [r3, #0]
 8003f9e:	1e43      	subs	r3, r0, #1
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	e7e2      	b.n	8003f6a <_dtoa_r+0x9a>
 8003fa4:	a913      	add	r1, sp, #76	; 0x4c
 8003fa6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003faa:	aa12      	add	r2, sp, #72	; 0x48
 8003fac:	4630      	mov	r0, r6
 8003fae:	f001 f867 	bl	8005080 <__d2b>
 8003fb2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d047      	beq.n	800404e <_dtoa_r+0x17e>
 8003fbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003fc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003fc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fc8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8003fcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003fd0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003fd4:	2400      	movs	r4, #0
 8003fd6:	ec43 2b16 	vmov	d6, r2, r3
 8003fda:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003fde:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004190 <_dtoa_r+0x2c0>
 8003fe2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003fe6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8004198 <_dtoa_r+0x2c8>
 8003fea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003fee:	eeb0 7b46 	vmov.f64	d7, d6
 8003ff2:	ee06 1a90 	vmov	s13, r1
 8003ff6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8003ffa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80041a0 <_dtoa_r+0x2d0>
 8003ffe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004002:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004006:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	ee16 ba90 	vmov	fp, s13
 8004012:	9411      	str	r4, [sp, #68]	; 0x44
 8004014:	d508      	bpl.n	8004028 <_dtoa_r+0x158>
 8004016:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800401a:	eeb4 6b47 	vcmp.f64	d6, d7
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	bf18      	it	ne
 8004024:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004028:	f1bb 0f16 	cmp.w	fp, #22
 800402c:	d832      	bhi.n	8004094 <_dtoa_r+0x1c4>
 800402e:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <_dtoa_r+0x2f0>)
 8004030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004034:	ed93 7b00 	vldr	d7, [r3]
 8004038:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800403c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004044:	d501      	bpl.n	800404a <_dtoa_r+0x17a>
 8004046:	f10b 3bff 	add.w	fp, fp, #4294967295
 800404a:	2300      	movs	r3, #0
 800404c:	e023      	b.n	8004096 <_dtoa_r+0x1c6>
 800404e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004050:	4401      	add	r1, r0
 8004052:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8004056:	2b20      	cmp	r3, #32
 8004058:	bfc3      	ittte	gt
 800405a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800405e:	fa04 f303 	lslgt.w	r3, r4, r3
 8004062:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004066:	f1c3 0320 	rsble	r3, r3, #32
 800406a:	bfc6      	itte	gt
 800406c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004070:	ea43 0308 	orrgt.w	r3, r3, r8
 8004074:	fa08 f303 	lslle.w	r3, r8, r3
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004080:	3901      	subs	r1, #1
 8004082:	ed8d 7b00 	vstr	d7, [sp]
 8004086:	9c01      	ldr	r4, [sp, #4]
 8004088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800408c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004090:	2401      	movs	r4, #1
 8004092:	e7a0      	b.n	8003fd6 <_dtoa_r+0x106>
 8004094:	2301      	movs	r3, #1
 8004096:	930f      	str	r3, [sp, #60]	; 0x3c
 8004098:	1a43      	subs	r3, r0, r1
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	bf45      	ittet	mi
 800409e:	f1c3 0301 	rsbmi	r3, r3, #1
 80040a2:	9305      	strmi	r3, [sp, #20]
 80040a4:	2300      	movpl	r3, #0
 80040a6:	2300      	movmi	r3, #0
 80040a8:	9206      	str	r2, [sp, #24]
 80040aa:	bf54      	ite	pl
 80040ac:	9305      	strpl	r3, [sp, #20]
 80040ae:	9306      	strmi	r3, [sp, #24]
 80040b0:	f1bb 0f00 	cmp.w	fp, #0
 80040b4:	db18      	blt.n	80040e8 <_dtoa_r+0x218>
 80040b6:	9b06      	ldr	r3, [sp, #24]
 80040b8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80040bc:	445b      	add	r3, fp
 80040be:	9306      	str	r3, [sp, #24]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9a07      	ldr	r2, [sp, #28]
 80040c4:	2a09      	cmp	r2, #9
 80040c6:	d849      	bhi.n	800415c <_dtoa_r+0x28c>
 80040c8:	2a05      	cmp	r2, #5
 80040ca:	bfc4      	itt	gt
 80040cc:	3a04      	subgt	r2, #4
 80040ce:	9207      	strgt	r2, [sp, #28]
 80040d0:	9a07      	ldr	r2, [sp, #28]
 80040d2:	f1a2 0202 	sub.w	r2, r2, #2
 80040d6:	bfcc      	ite	gt
 80040d8:	2400      	movgt	r4, #0
 80040da:	2401      	movle	r4, #1
 80040dc:	2a03      	cmp	r2, #3
 80040de:	d848      	bhi.n	8004172 <_dtoa_r+0x2a2>
 80040e0:	e8df f002 	tbb	[pc, r2]
 80040e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80040e8:	9b05      	ldr	r3, [sp, #20]
 80040ea:	2200      	movs	r2, #0
 80040ec:	eba3 030b 	sub.w	r3, r3, fp
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	920e      	str	r2, [sp, #56]	; 0x38
 80040f4:	f1cb 0300 	rsb	r3, fp, #0
 80040f8:	e7e3      	b.n	80040c2 <_dtoa_r+0x1f2>
 80040fa:	2200      	movs	r2, #0
 80040fc:	9208      	str	r2, [sp, #32]
 80040fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004100:	2a00      	cmp	r2, #0
 8004102:	dc39      	bgt.n	8004178 <_dtoa_r+0x2a8>
 8004104:	f04f 0a01 	mov.w	sl, #1
 8004108:	46d1      	mov	r9, sl
 800410a:	4652      	mov	r2, sl
 800410c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004110:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004112:	2100      	movs	r1, #0
 8004114:	6079      	str	r1, [r7, #4]
 8004116:	2004      	movs	r0, #4
 8004118:	f100 0c14 	add.w	ip, r0, #20
 800411c:	4594      	cmp	ip, r2
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	d92f      	bls.n	8004182 <_dtoa_r+0x2b2>
 8004122:	4630      	mov	r0, r6
 8004124:	930c      	str	r3, [sp, #48]	; 0x30
 8004126:	f000 fc89 	bl	8004a3c <_Balloc>
 800412a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800412c:	9000      	str	r0, [sp, #0]
 800412e:	4602      	mov	r2, r0
 8004130:	2800      	cmp	r0, #0
 8004132:	d149      	bne.n	80041c8 <_dtoa_r+0x2f8>
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <_dtoa_r+0x2f4>)
 8004136:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800413a:	e6df      	b.n	8003efc <_dtoa_r+0x2c>
 800413c:	2201      	movs	r2, #1
 800413e:	e7dd      	b.n	80040fc <_dtoa_r+0x22c>
 8004140:	2200      	movs	r2, #0
 8004142:	9208      	str	r2, [sp, #32]
 8004144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004146:	eb0b 0a02 	add.w	sl, fp, r2
 800414a:	f10a 0901 	add.w	r9, sl, #1
 800414e:	464a      	mov	r2, r9
 8004150:	2a01      	cmp	r2, #1
 8004152:	bfb8      	it	lt
 8004154:	2201      	movlt	r2, #1
 8004156:	e7db      	b.n	8004110 <_dtoa_r+0x240>
 8004158:	2201      	movs	r2, #1
 800415a:	e7f2      	b.n	8004142 <_dtoa_r+0x272>
 800415c:	2401      	movs	r4, #1
 800415e:	2200      	movs	r2, #0
 8004160:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004164:	f04f 3aff 	mov.w	sl, #4294967295
 8004168:	2100      	movs	r1, #0
 800416a:	46d1      	mov	r9, sl
 800416c:	2212      	movs	r2, #18
 800416e:	9109      	str	r1, [sp, #36]	; 0x24
 8004170:	e7ce      	b.n	8004110 <_dtoa_r+0x240>
 8004172:	2201      	movs	r2, #1
 8004174:	9208      	str	r2, [sp, #32]
 8004176:	e7f5      	b.n	8004164 <_dtoa_r+0x294>
 8004178:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800417c:	46d1      	mov	r9, sl
 800417e:	4652      	mov	r2, sl
 8004180:	e7c6      	b.n	8004110 <_dtoa_r+0x240>
 8004182:	3101      	adds	r1, #1
 8004184:	6079      	str	r1, [r7, #4]
 8004186:	0040      	lsls	r0, r0, #1
 8004188:	e7c6      	b.n	8004118 <_dtoa_r+0x248>
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w
 8004190:	636f4361 	.word	0x636f4361
 8004194:	3fd287a7 	.word	0x3fd287a7
 8004198:	8b60c8b3 	.word	0x8b60c8b3
 800419c:	3fc68a28 	.word	0x3fc68a28
 80041a0:	509f79fb 	.word	0x509f79fb
 80041a4:	3fd34413 	.word	0x3fd34413
 80041a8:	08005971 	.word	0x08005971
 80041ac:	08005988 	.word	0x08005988
 80041b0:	7ff00000 	.word	0x7ff00000
 80041b4:	0800596d 	.word	0x0800596d
 80041b8:	08005964 	.word	0x08005964
 80041bc:	08005905 	.word	0x08005905
 80041c0:	08005a80 	.word	0x08005a80
 80041c4:	080059e7 	.word	0x080059e7
 80041c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80041ca:	9900      	ldr	r1, [sp, #0]
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	f1b9 0f0e 	cmp.w	r9, #14
 80041d2:	d872      	bhi.n	80042ba <_dtoa_r+0x3ea>
 80041d4:	2c00      	cmp	r4, #0
 80041d6:	d070      	beq.n	80042ba <_dtoa_r+0x3ea>
 80041d8:	f1bb 0f00 	cmp.w	fp, #0
 80041dc:	f340 80a6 	ble.w	800432c <_dtoa_r+0x45c>
 80041e0:	49ca      	ldr	r1, [pc, #808]	; (800450c <_dtoa_r+0x63c>)
 80041e2:	f00b 020f 	and.w	r2, fp, #15
 80041e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80041ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80041ee:	ed92 7b00 	vldr	d7, [r2]
 80041f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80041f6:	f000 808d 	beq.w	8004314 <_dtoa_r+0x444>
 80041fa:	4ac5      	ldr	r2, [pc, #788]	; (8004510 <_dtoa_r+0x640>)
 80041fc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004200:	ed92 6b08 	vldr	d6, [r2, #32]
 8004204:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004208:	ed8d 6b02 	vstr	d6, [sp, #8]
 800420c:	f001 010f 	and.w	r1, r1, #15
 8004210:	2203      	movs	r2, #3
 8004212:	48bf      	ldr	r0, [pc, #764]	; (8004510 <_dtoa_r+0x640>)
 8004214:	2900      	cmp	r1, #0
 8004216:	d17f      	bne.n	8004318 <_dtoa_r+0x448>
 8004218:	ed9d 6b02 	vldr	d6, [sp, #8]
 800421c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004226:	2900      	cmp	r1, #0
 8004228:	f000 80b2 	beq.w	8004390 <_dtoa_r+0x4c0>
 800422c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004234:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	f140 80a8 	bpl.w	8004390 <_dtoa_r+0x4c0>
 8004240:	f1b9 0f00 	cmp.w	r9, #0
 8004244:	f000 80a4 	beq.w	8004390 <_dtoa_r+0x4c0>
 8004248:	f1ba 0f00 	cmp.w	sl, #0
 800424c:	dd31      	ble.n	80042b2 <_dtoa_r+0x3e2>
 800424e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004252:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004256:	ed8d 7b02 	vstr	d7, [sp, #8]
 800425a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800425e:	3201      	adds	r2, #1
 8004260:	4650      	mov	r0, sl
 8004262:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004266:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800426a:	ee07 2a90 	vmov	s15, r2
 800426e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004272:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004276:	ed8d 5b02 	vstr	d5, [sp, #8]
 800427a:	9c03      	ldr	r4, [sp, #12]
 800427c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004280:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8004284:	2800      	cmp	r0, #0
 8004286:	f040 8086 	bne.w	8004396 <_dtoa_r+0x4c6>
 800428a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800428e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004292:	ec42 1b17 	vmov	d7, r1, r2
 8004296:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	f300 8272 	bgt.w	8004786 <_dtoa_r+0x8b6>
 80042a2:	eeb1 7b47 	vneg.f64	d7, d7
 80042a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80042aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ae:	f100 8267 	bmi.w	8004780 <_dtoa_r+0x8b0>
 80042b2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80042b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80042ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042bc:	2a00      	cmp	r2, #0
 80042be:	f2c0 8129 	blt.w	8004514 <_dtoa_r+0x644>
 80042c2:	f1bb 0f0e 	cmp.w	fp, #14
 80042c6:	f300 8125 	bgt.w	8004514 <_dtoa_r+0x644>
 80042ca:	4b90      	ldr	r3, [pc, #576]	; (800450c <_dtoa_r+0x63c>)
 80042cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80042d0:	ed93 6b00 	vldr	d6, [r3]
 80042d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f280 80c3 	bge.w	8004462 <_dtoa_r+0x592>
 80042dc:	f1b9 0f00 	cmp.w	r9, #0
 80042e0:	f300 80bf 	bgt.w	8004462 <_dtoa_r+0x592>
 80042e4:	f040 824c 	bne.w	8004780 <_dtoa_r+0x8b0>
 80042e8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80042ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80042f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	464c      	mov	r4, r9
 80042fe:	464f      	mov	r7, r9
 8004300:	f280 8222 	bge.w	8004748 <_dtoa_r+0x878>
 8004304:	f8dd 8000 	ldr.w	r8, [sp]
 8004308:	2331      	movs	r3, #49	; 0x31
 800430a:	f808 3b01 	strb.w	r3, [r8], #1
 800430e:	f10b 0b01 	add.w	fp, fp, #1
 8004312:	e21e      	b.n	8004752 <_dtoa_r+0x882>
 8004314:	2202      	movs	r2, #2
 8004316:	e77c      	b.n	8004212 <_dtoa_r+0x342>
 8004318:	07cc      	lsls	r4, r1, #31
 800431a:	d504      	bpl.n	8004326 <_dtoa_r+0x456>
 800431c:	ed90 6b00 	vldr	d6, [r0]
 8004320:	3201      	adds	r2, #1
 8004322:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004326:	1049      	asrs	r1, r1, #1
 8004328:	3008      	adds	r0, #8
 800432a:	e773      	b.n	8004214 <_dtoa_r+0x344>
 800432c:	d02e      	beq.n	800438c <_dtoa_r+0x4bc>
 800432e:	f1cb 0100 	rsb	r1, fp, #0
 8004332:	4a76      	ldr	r2, [pc, #472]	; (800450c <_dtoa_r+0x63c>)
 8004334:	f001 000f 	and.w	r0, r1, #15
 8004338:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800433c:	ed92 7b00 	vldr	d7, [r2]
 8004340:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004344:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004348:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800434c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8004350:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8004354:	486e      	ldr	r0, [pc, #440]	; (8004510 <_dtoa_r+0x640>)
 8004356:	1109      	asrs	r1, r1, #4
 8004358:	2400      	movs	r4, #0
 800435a:	2202      	movs	r2, #2
 800435c:	b939      	cbnz	r1, 800436e <_dtoa_r+0x49e>
 800435e:	2c00      	cmp	r4, #0
 8004360:	f43f af60 	beq.w	8004224 <_dtoa_r+0x354>
 8004364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800436c:	e75a      	b.n	8004224 <_dtoa_r+0x354>
 800436e:	07cf      	lsls	r7, r1, #31
 8004370:	d509      	bpl.n	8004386 <_dtoa_r+0x4b6>
 8004372:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004376:	ed90 7b00 	vldr	d7, [r0]
 800437a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800437e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004382:	3201      	adds	r2, #1
 8004384:	2401      	movs	r4, #1
 8004386:	1049      	asrs	r1, r1, #1
 8004388:	3008      	adds	r0, #8
 800438a:	e7e7      	b.n	800435c <_dtoa_r+0x48c>
 800438c:	2202      	movs	r2, #2
 800438e:	e749      	b.n	8004224 <_dtoa_r+0x354>
 8004390:	465f      	mov	r7, fp
 8004392:	4648      	mov	r0, r9
 8004394:	e765      	b.n	8004262 <_dtoa_r+0x392>
 8004396:	ec42 1b17 	vmov	d7, r1, r2
 800439a:	4a5c      	ldr	r2, [pc, #368]	; (800450c <_dtoa_r+0x63c>)
 800439c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80043a0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80043a4:	9a00      	ldr	r2, [sp, #0]
 80043a6:	1814      	adds	r4, r2, r0
 80043a8:	9a08      	ldr	r2, [sp, #32]
 80043aa:	b352      	cbz	r2, 8004402 <_dtoa_r+0x532>
 80043ac:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80043b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80043b4:	f8dd 8000 	ldr.w	r8, [sp]
 80043b8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80043bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80043c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80043c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80043c8:	ee14 2a90 	vmov	r2, s9
 80043cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80043d0:	3230      	adds	r2, #48	; 0x30
 80043d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80043d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	f808 2b01 	strb.w	r2, [r8], #1
 80043e2:	d439      	bmi.n	8004458 <_dtoa_r+0x588>
 80043e4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80043e8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	d472      	bmi.n	80044d8 <_dtoa_r+0x608>
 80043f2:	45a0      	cmp	r8, r4
 80043f4:	f43f af5d 	beq.w	80042b2 <_dtoa_r+0x3e2>
 80043f8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80043fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004400:	e7e0      	b.n	80043c4 <_dtoa_r+0x4f4>
 8004402:	f8dd 8000 	ldr.w	r8, [sp]
 8004406:	ee27 7b04 	vmul.f64	d7, d7, d4
 800440a:	4621      	mov	r1, r4
 800440c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004410:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004414:	ee14 2a90 	vmov	r2, s9
 8004418:	3230      	adds	r2, #48	; 0x30
 800441a:	f808 2b01 	strb.w	r2, [r8], #1
 800441e:	45a0      	cmp	r8, r4
 8004420:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004424:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004428:	d118      	bne.n	800445c <_dtoa_r+0x58c>
 800442a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800442e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004432:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	dc4d      	bgt.n	80044d8 <_dtoa_r+0x608>
 800443c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004440:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	f57f af33 	bpl.w	80042b2 <_dtoa_r+0x3e2>
 800444c:	4688      	mov	r8, r1
 800444e:	3901      	subs	r1, #1
 8004450:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d0f9      	beq.n	800444c <_dtoa_r+0x57c>
 8004458:	46bb      	mov	fp, r7
 800445a:	e02a      	b.n	80044b2 <_dtoa_r+0x5e2>
 800445c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004460:	e7d6      	b.n	8004410 <_dtoa_r+0x540>
 8004462:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004466:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800446a:	f8dd 8000 	ldr.w	r8, [sp]
 800446e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004472:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004476:	ee15 3a10 	vmov	r3, s10
 800447a:	3330      	adds	r3, #48	; 0x30
 800447c:	f808 3b01 	strb.w	r3, [r8], #1
 8004480:	9b00      	ldr	r3, [sp, #0]
 8004482:	eba8 0303 	sub.w	r3, r8, r3
 8004486:	4599      	cmp	r9, r3
 8004488:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800448c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004490:	d133      	bne.n	80044fa <_dtoa_r+0x62a>
 8004492:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004496:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	dc1a      	bgt.n	80044d6 <_dtoa_r+0x606>
 80044a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	d103      	bne.n	80044b2 <_dtoa_r+0x5e2>
 80044aa:	ee15 3a10 	vmov	r3, s10
 80044ae:	07d9      	lsls	r1, r3, #31
 80044b0:	d411      	bmi.n	80044d6 <_dtoa_r+0x606>
 80044b2:	4629      	mov	r1, r5
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 fb01 	bl	8004abc <_Bfree>
 80044ba:	2300      	movs	r3, #0
 80044bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044be:	f888 3000 	strb.w	r3, [r8]
 80044c2:	f10b 0301 	add.w	r3, fp, #1
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f43f ad4d 	beq.w	8003f6a <_dtoa_r+0x9a>
 80044d0:	f8c3 8000 	str.w	r8, [r3]
 80044d4:	e549      	b.n	8003f6a <_dtoa_r+0x9a>
 80044d6:	465f      	mov	r7, fp
 80044d8:	4643      	mov	r3, r8
 80044da:	4698      	mov	r8, r3
 80044dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044e0:	2a39      	cmp	r2, #57	; 0x39
 80044e2:	d106      	bne.n	80044f2 <_dtoa_r+0x622>
 80044e4:	9a00      	ldr	r2, [sp, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d1f7      	bne.n	80044da <_dtoa_r+0x60a>
 80044ea:	9900      	ldr	r1, [sp, #0]
 80044ec:	2230      	movs	r2, #48	; 0x30
 80044ee:	3701      	adds	r7, #1
 80044f0:	700a      	strb	r2, [r1, #0]
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	3201      	adds	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e7ae      	b.n	8004458 <_dtoa_r+0x588>
 80044fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80044fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	d1b2      	bne.n	800446e <_dtoa_r+0x59e>
 8004508:	e7d3      	b.n	80044b2 <_dtoa_r+0x5e2>
 800450a:	bf00      	nop
 800450c:	08005a80 	.word	0x08005a80
 8004510:	08005a58 	.word	0x08005a58
 8004514:	9908      	ldr	r1, [sp, #32]
 8004516:	2900      	cmp	r1, #0
 8004518:	f000 80d1 	beq.w	80046be <_dtoa_r+0x7ee>
 800451c:	9907      	ldr	r1, [sp, #28]
 800451e:	2901      	cmp	r1, #1
 8004520:	f300 80b4 	bgt.w	800468c <_dtoa_r+0x7bc>
 8004524:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004526:	2900      	cmp	r1, #0
 8004528:	f000 80ac 	beq.w	8004684 <_dtoa_r+0x7b4>
 800452c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004530:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004534:	461c      	mov	r4, r3
 8004536:	930a      	str	r3, [sp, #40]	; 0x28
 8004538:	9b05      	ldr	r3, [sp, #20]
 800453a:	4413      	add	r3, r2
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	9b06      	ldr	r3, [sp, #24]
 8004540:	2101      	movs	r1, #1
 8004542:	4413      	add	r3, r2
 8004544:	4630      	mov	r0, r6
 8004546:	9306      	str	r3, [sp, #24]
 8004548:	f000 fb74 	bl	8004c34 <__i2b>
 800454c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800454e:	4607      	mov	r7, r0
 8004550:	f1b8 0f00 	cmp.w	r8, #0
 8004554:	dd0d      	ble.n	8004572 <_dtoa_r+0x6a2>
 8004556:	9a06      	ldr	r2, [sp, #24]
 8004558:	2a00      	cmp	r2, #0
 800455a:	dd0a      	ble.n	8004572 <_dtoa_r+0x6a2>
 800455c:	4542      	cmp	r2, r8
 800455e:	9905      	ldr	r1, [sp, #20]
 8004560:	bfa8      	it	ge
 8004562:	4642      	movge	r2, r8
 8004564:	1a89      	subs	r1, r1, r2
 8004566:	9105      	str	r1, [sp, #20]
 8004568:	9906      	ldr	r1, [sp, #24]
 800456a:	eba8 0802 	sub.w	r8, r8, r2
 800456e:	1a8a      	subs	r2, r1, r2
 8004570:	9206      	str	r2, [sp, #24]
 8004572:	b303      	cbz	r3, 80045b6 <_dtoa_r+0x6e6>
 8004574:	9a08      	ldr	r2, [sp, #32]
 8004576:	2a00      	cmp	r2, #0
 8004578:	f000 80a6 	beq.w	80046c8 <_dtoa_r+0x7f8>
 800457c:	2c00      	cmp	r4, #0
 800457e:	dd13      	ble.n	80045a8 <_dtoa_r+0x6d8>
 8004580:	4639      	mov	r1, r7
 8004582:	4622      	mov	r2, r4
 8004584:	4630      	mov	r0, r6
 8004586:	930c      	str	r3, [sp, #48]	; 0x30
 8004588:	f000 fc10 	bl	8004dac <__pow5mult>
 800458c:	462a      	mov	r2, r5
 800458e:	4601      	mov	r1, r0
 8004590:	4607      	mov	r7, r0
 8004592:	4630      	mov	r0, r6
 8004594:	f000 fb64 	bl	8004c60 <__multiply>
 8004598:	4629      	mov	r1, r5
 800459a:	900a      	str	r0, [sp, #40]	; 0x28
 800459c:	4630      	mov	r0, r6
 800459e:	f000 fa8d 	bl	8004abc <_Bfree>
 80045a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045a6:	4615      	mov	r5, r2
 80045a8:	1b1a      	subs	r2, r3, r4
 80045aa:	d004      	beq.n	80045b6 <_dtoa_r+0x6e6>
 80045ac:	4629      	mov	r1, r5
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 fbfc 	bl	8004dac <__pow5mult>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2101      	movs	r1, #1
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 fb3b 	bl	8004c34 <__i2b>
 80045be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	f340 8082 	ble.w	80046cc <_dtoa_r+0x7fc>
 80045c8:	461a      	mov	r2, r3
 80045ca:	4601      	mov	r1, r0
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 fbed 	bl	8004dac <__pow5mult>
 80045d2:	9b07      	ldr	r3, [sp, #28]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	4604      	mov	r4, r0
 80045d8:	dd7b      	ble.n	80046d2 <_dtoa_r+0x802>
 80045da:	2300      	movs	r3, #0
 80045dc:	930a      	str	r3, [sp, #40]	; 0x28
 80045de:	6922      	ldr	r2, [r4, #16]
 80045e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80045e4:	6910      	ldr	r0, [r2, #16]
 80045e6:	f000 fad5 	bl	8004b94 <__hi0bits>
 80045ea:	f1c0 0020 	rsb	r0, r0, #32
 80045ee:	9b06      	ldr	r3, [sp, #24]
 80045f0:	4418      	add	r0, r3
 80045f2:	f010 001f 	ands.w	r0, r0, #31
 80045f6:	f000 808d 	beq.w	8004714 <_dtoa_r+0x844>
 80045fa:	f1c0 0220 	rsb	r2, r0, #32
 80045fe:	2a04      	cmp	r2, #4
 8004600:	f340 8086 	ble.w	8004710 <_dtoa_r+0x840>
 8004604:	f1c0 001c 	rsb	r0, r0, #28
 8004608:	9b05      	ldr	r3, [sp, #20]
 800460a:	4403      	add	r3, r0
 800460c:	9305      	str	r3, [sp, #20]
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	4403      	add	r3, r0
 8004612:	4480      	add	r8, r0
 8004614:	9306      	str	r3, [sp, #24]
 8004616:	9b05      	ldr	r3, [sp, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dd05      	ble.n	8004628 <_dtoa_r+0x758>
 800461c:	4629      	mov	r1, r5
 800461e:	461a      	mov	r2, r3
 8004620:	4630      	mov	r0, r6
 8004622:	f000 fc1d 	bl	8004e60 <__lshift>
 8004626:	4605      	mov	r5, r0
 8004628:	9b06      	ldr	r3, [sp, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	dd05      	ble.n	800463a <_dtoa_r+0x76a>
 800462e:	4621      	mov	r1, r4
 8004630:	461a      	mov	r2, r3
 8004632:	4630      	mov	r0, r6
 8004634:	f000 fc14 	bl	8004e60 <__lshift>
 8004638:	4604      	mov	r4, r0
 800463a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d06b      	beq.n	8004718 <_dtoa_r+0x848>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fc78 	bl	8004f38 <__mcmp>
 8004648:	2800      	cmp	r0, #0
 800464a:	da65      	bge.n	8004718 <_dtoa_r+0x848>
 800464c:	2300      	movs	r3, #0
 800464e:	4629      	mov	r1, r5
 8004650:	220a      	movs	r2, #10
 8004652:	4630      	mov	r0, r6
 8004654:	f000 fa54 	bl	8004b00 <__multadd>
 8004658:	9b08      	ldr	r3, [sp, #32]
 800465a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800465e:	4605      	mov	r5, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8192 	beq.w	800498a <_dtoa_r+0xaba>
 8004666:	4639      	mov	r1, r7
 8004668:	2300      	movs	r3, #0
 800466a:	220a      	movs	r2, #10
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fa47 	bl	8004b00 <__multadd>
 8004672:	f1ba 0f00 	cmp.w	sl, #0
 8004676:	4607      	mov	r7, r0
 8004678:	f300 808e 	bgt.w	8004798 <_dtoa_r+0x8c8>
 800467c:	9b07      	ldr	r3, [sp, #28]
 800467e:	2b02      	cmp	r3, #2
 8004680:	dc51      	bgt.n	8004726 <_dtoa_r+0x856>
 8004682:	e089      	b.n	8004798 <_dtoa_r+0x8c8>
 8004684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800468a:	e751      	b.n	8004530 <_dtoa_r+0x660>
 800468c:	f109 34ff 	add.w	r4, r9, #4294967295
 8004690:	42a3      	cmp	r3, r4
 8004692:	bfbf      	itttt	lt
 8004694:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004696:	1ae3      	sublt	r3, r4, r3
 8004698:	18d2      	addlt	r2, r2, r3
 800469a:	4613      	movlt	r3, r2
 800469c:	bfb7      	itett	lt
 800469e:	930e      	strlt	r3, [sp, #56]	; 0x38
 80046a0:	1b1c      	subge	r4, r3, r4
 80046a2:	4623      	movlt	r3, r4
 80046a4:	2400      	movlt	r4, #0
 80046a6:	f1b9 0f00 	cmp.w	r9, #0
 80046aa:	bfb5      	itete	lt
 80046ac:	9a05      	ldrlt	r2, [sp, #20]
 80046ae:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80046b2:	eba2 0809 	sublt.w	r8, r2, r9
 80046b6:	464a      	movge	r2, r9
 80046b8:	bfb8      	it	lt
 80046ba:	2200      	movlt	r2, #0
 80046bc:	e73b      	b.n	8004536 <_dtoa_r+0x666>
 80046be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80046c2:	9f08      	ldr	r7, [sp, #32]
 80046c4:	461c      	mov	r4, r3
 80046c6:	e743      	b.n	8004550 <_dtoa_r+0x680>
 80046c8:	461a      	mov	r2, r3
 80046ca:	e76f      	b.n	80045ac <_dtoa_r+0x6dc>
 80046cc:	9b07      	ldr	r3, [sp, #28]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	dc18      	bgt.n	8004704 <_dtoa_r+0x834>
 80046d2:	9b02      	ldr	r3, [sp, #8]
 80046d4:	b9b3      	cbnz	r3, 8004704 <_dtoa_r+0x834>
 80046d6:	9b03      	ldr	r3, [sp, #12]
 80046d8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80046dc:	b9a2      	cbnz	r2, 8004708 <_dtoa_r+0x838>
 80046de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046e2:	0d12      	lsrs	r2, r2, #20
 80046e4:	0512      	lsls	r2, r2, #20
 80046e6:	b18a      	cbz	r2, 800470c <_dtoa_r+0x83c>
 80046e8:	9b05      	ldr	r3, [sp, #20]
 80046ea:	3301      	adds	r3, #1
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	9b06      	ldr	r3, [sp, #24]
 80046f0:	3301      	adds	r3, #1
 80046f2:	9306      	str	r3, [sp, #24]
 80046f4:	2301      	movs	r3, #1
 80046f6:	930a      	str	r3, [sp, #40]	; 0x28
 80046f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f47f af6f 	bne.w	80045de <_dtoa_r+0x70e>
 8004700:	2001      	movs	r0, #1
 8004702:	e774      	b.n	80045ee <_dtoa_r+0x71e>
 8004704:	2300      	movs	r3, #0
 8004706:	e7f6      	b.n	80046f6 <_dtoa_r+0x826>
 8004708:	9b02      	ldr	r3, [sp, #8]
 800470a:	e7f4      	b.n	80046f6 <_dtoa_r+0x826>
 800470c:	920a      	str	r2, [sp, #40]	; 0x28
 800470e:	e7f3      	b.n	80046f8 <_dtoa_r+0x828>
 8004710:	d081      	beq.n	8004616 <_dtoa_r+0x746>
 8004712:	4610      	mov	r0, r2
 8004714:	301c      	adds	r0, #28
 8004716:	e777      	b.n	8004608 <_dtoa_r+0x738>
 8004718:	f1b9 0f00 	cmp.w	r9, #0
 800471c:	dc37      	bgt.n	800478e <_dtoa_r+0x8be>
 800471e:	9b07      	ldr	r3, [sp, #28]
 8004720:	2b02      	cmp	r3, #2
 8004722:	dd34      	ble.n	800478e <_dtoa_r+0x8be>
 8004724:	46ca      	mov	sl, r9
 8004726:	f1ba 0f00 	cmp.w	sl, #0
 800472a:	d10d      	bne.n	8004748 <_dtoa_r+0x878>
 800472c:	4621      	mov	r1, r4
 800472e:	4653      	mov	r3, sl
 8004730:	2205      	movs	r2, #5
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f9e4 	bl	8004b00 <__multadd>
 8004738:	4601      	mov	r1, r0
 800473a:	4604      	mov	r4, r0
 800473c:	4628      	mov	r0, r5
 800473e:	f000 fbfb 	bl	8004f38 <__mcmp>
 8004742:	2800      	cmp	r0, #0
 8004744:	f73f adde 	bgt.w	8004304 <_dtoa_r+0x434>
 8004748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800474a:	f8dd 8000 	ldr.w	r8, [sp]
 800474e:	ea6f 0b03 	mvn.w	fp, r3
 8004752:	f04f 0900 	mov.w	r9, #0
 8004756:	4621      	mov	r1, r4
 8004758:	4630      	mov	r0, r6
 800475a:	f000 f9af 	bl	8004abc <_Bfree>
 800475e:	2f00      	cmp	r7, #0
 8004760:	f43f aea7 	beq.w	80044b2 <_dtoa_r+0x5e2>
 8004764:	f1b9 0f00 	cmp.w	r9, #0
 8004768:	d005      	beq.n	8004776 <_dtoa_r+0x8a6>
 800476a:	45b9      	cmp	r9, r7
 800476c:	d003      	beq.n	8004776 <_dtoa_r+0x8a6>
 800476e:	4649      	mov	r1, r9
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f9a3 	bl	8004abc <_Bfree>
 8004776:	4639      	mov	r1, r7
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f99f 	bl	8004abc <_Bfree>
 800477e:	e698      	b.n	80044b2 <_dtoa_r+0x5e2>
 8004780:	2400      	movs	r4, #0
 8004782:	4627      	mov	r7, r4
 8004784:	e7e0      	b.n	8004748 <_dtoa_r+0x878>
 8004786:	46bb      	mov	fp, r7
 8004788:	4604      	mov	r4, r0
 800478a:	4607      	mov	r7, r0
 800478c:	e5ba      	b.n	8004304 <_dtoa_r+0x434>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	46ca      	mov	sl, r9
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8100 	beq.w	8004998 <_dtoa_r+0xac8>
 8004798:	f1b8 0f00 	cmp.w	r8, #0
 800479c:	dd05      	ble.n	80047aa <_dtoa_r+0x8da>
 800479e:	4639      	mov	r1, r7
 80047a0:	4642      	mov	r2, r8
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 fb5c 	bl	8004e60 <__lshift>
 80047a8:	4607      	mov	r7, r0
 80047aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05d      	beq.n	800486c <_dtoa_r+0x99c>
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 f942 	bl	8004a3c <_Balloc>
 80047b8:	4680      	mov	r8, r0
 80047ba:	b928      	cbnz	r0, 80047c8 <_dtoa_r+0x8f8>
 80047bc:	4b82      	ldr	r3, [pc, #520]	; (80049c8 <_dtoa_r+0xaf8>)
 80047be:	4602      	mov	r2, r0
 80047c0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80047c4:	f7ff bb9a 	b.w	8003efc <_dtoa_r+0x2c>
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	3202      	adds	r2, #2
 80047cc:	0092      	lsls	r2, r2, #2
 80047ce:	f107 010c 	add.w	r1, r7, #12
 80047d2:	300c      	adds	r0, #12
 80047d4:	f7fe fd58 	bl	8003288 <memcpy>
 80047d8:	2201      	movs	r2, #1
 80047da:	4641      	mov	r1, r8
 80047dc:	4630      	mov	r0, r6
 80047de:	f000 fb3f 	bl	8004e60 <__lshift>
 80047e2:	9b00      	ldr	r3, [sp, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	4453      	add	r3, sl
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	46b9      	mov	r9, r7
 80047f6:	9308      	str	r3, [sp, #32]
 80047f8:	4607      	mov	r7, r0
 80047fa:	9b05      	ldr	r3, [sp, #20]
 80047fc:	4621      	mov	r1, r4
 80047fe:	3b01      	subs	r3, #1
 8004800:	4628      	mov	r0, r5
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	f7ff fad6 	bl	8003db4 <quorem>
 8004808:	4603      	mov	r3, r0
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	9006      	str	r0, [sp, #24]
 800480e:	4649      	mov	r1, r9
 8004810:	4628      	mov	r0, r5
 8004812:	930a      	str	r3, [sp, #40]	; 0x28
 8004814:	f000 fb90 	bl	8004f38 <__mcmp>
 8004818:	463a      	mov	r2, r7
 800481a:	4682      	mov	sl, r0
 800481c:	4621      	mov	r1, r4
 800481e:	4630      	mov	r0, r6
 8004820:	f000 fba6 	bl	8004f70 <__mdiff>
 8004824:	68c2      	ldr	r2, [r0, #12]
 8004826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004828:	4680      	mov	r8, r0
 800482a:	bb0a      	cbnz	r2, 8004870 <_dtoa_r+0x9a0>
 800482c:	4601      	mov	r1, r0
 800482e:	4628      	mov	r0, r5
 8004830:	f000 fb82 	bl	8004f38 <__mcmp>
 8004834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004836:	4602      	mov	r2, r0
 8004838:	4641      	mov	r1, r8
 800483a:	4630      	mov	r0, r6
 800483c:	920e      	str	r2, [sp, #56]	; 0x38
 800483e:	930a      	str	r3, [sp, #40]	; 0x28
 8004840:	f000 f93c 	bl	8004abc <_Bfree>
 8004844:	9b07      	ldr	r3, [sp, #28]
 8004846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004848:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800484c:	ea43 0102 	orr.w	r1, r3, r2
 8004850:	9b08      	ldr	r3, [sp, #32]
 8004852:	430b      	orrs	r3, r1
 8004854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004856:	d10d      	bne.n	8004874 <_dtoa_r+0x9a4>
 8004858:	2b39      	cmp	r3, #57	; 0x39
 800485a:	d029      	beq.n	80048b0 <_dtoa_r+0x9e0>
 800485c:	f1ba 0f00 	cmp.w	sl, #0
 8004860:	dd01      	ble.n	8004866 <_dtoa_r+0x996>
 8004862:	9b06      	ldr	r3, [sp, #24]
 8004864:	3331      	adds	r3, #49	; 0x31
 8004866:	9a02      	ldr	r2, [sp, #8]
 8004868:	7013      	strb	r3, [r2, #0]
 800486a:	e774      	b.n	8004756 <_dtoa_r+0x886>
 800486c:	4638      	mov	r0, r7
 800486e:	e7b8      	b.n	80047e2 <_dtoa_r+0x912>
 8004870:	2201      	movs	r2, #1
 8004872:	e7e1      	b.n	8004838 <_dtoa_r+0x968>
 8004874:	f1ba 0f00 	cmp.w	sl, #0
 8004878:	db06      	blt.n	8004888 <_dtoa_r+0x9b8>
 800487a:	9907      	ldr	r1, [sp, #28]
 800487c:	ea41 0a0a 	orr.w	sl, r1, sl
 8004880:	9908      	ldr	r1, [sp, #32]
 8004882:	ea5a 0101 	orrs.w	r1, sl, r1
 8004886:	d120      	bne.n	80048ca <_dtoa_r+0x9fa>
 8004888:	2a00      	cmp	r2, #0
 800488a:	ddec      	ble.n	8004866 <_dtoa_r+0x996>
 800488c:	4629      	mov	r1, r5
 800488e:	2201      	movs	r2, #1
 8004890:	4630      	mov	r0, r6
 8004892:	9305      	str	r3, [sp, #20]
 8004894:	f000 fae4 	bl	8004e60 <__lshift>
 8004898:	4621      	mov	r1, r4
 800489a:	4605      	mov	r5, r0
 800489c:	f000 fb4c 	bl	8004f38 <__mcmp>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	9b05      	ldr	r3, [sp, #20]
 80048a4:	dc02      	bgt.n	80048ac <_dtoa_r+0x9dc>
 80048a6:	d1de      	bne.n	8004866 <_dtoa_r+0x996>
 80048a8:	07da      	lsls	r2, r3, #31
 80048aa:	d5dc      	bpl.n	8004866 <_dtoa_r+0x996>
 80048ac:	2b39      	cmp	r3, #57	; 0x39
 80048ae:	d1d8      	bne.n	8004862 <_dtoa_r+0x992>
 80048b0:	9a02      	ldr	r2, [sp, #8]
 80048b2:	2339      	movs	r3, #57	; 0x39
 80048b4:	7013      	strb	r3, [r2, #0]
 80048b6:	4643      	mov	r3, r8
 80048b8:	4698      	mov	r8, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80048c0:	2a39      	cmp	r2, #57	; 0x39
 80048c2:	d051      	beq.n	8004968 <_dtoa_r+0xa98>
 80048c4:	3201      	adds	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e745      	b.n	8004756 <_dtoa_r+0x886>
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	dd03      	ble.n	80048d6 <_dtoa_r+0xa06>
 80048ce:	2b39      	cmp	r3, #57	; 0x39
 80048d0:	d0ee      	beq.n	80048b0 <_dtoa_r+0x9e0>
 80048d2:	3301      	adds	r3, #1
 80048d4:	e7c7      	b.n	8004866 <_dtoa_r+0x996>
 80048d6:	9a05      	ldr	r2, [sp, #20]
 80048d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048da:	f802 3c01 	strb.w	r3, [r2, #-1]
 80048de:	428a      	cmp	r2, r1
 80048e0:	d02b      	beq.n	800493a <_dtoa_r+0xa6a>
 80048e2:	4629      	mov	r1, r5
 80048e4:	2300      	movs	r3, #0
 80048e6:	220a      	movs	r2, #10
 80048e8:	4630      	mov	r0, r6
 80048ea:	f000 f909 	bl	8004b00 <__multadd>
 80048ee:	45b9      	cmp	r9, r7
 80048f0:	4605      	mov	r5, r0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	f04f 020a 	mov.w	r2, #10
 80048fa:	4649      	mov	r1, r9
 80048fc:	4630      	mov	r0, r6
 80048fe:	d107      	bne.n	8004910 <_dtoa_r+0xa40>
 8004900:	f000 f8fe 	bl	8004b00 <__multadd>
 8004904:	4681      	mov	r9, r0
 8004906:	4607      	mov	r7, r0
 8004908:	9b05      	ldr	r3, [sp, #20]
 800490a:	3301      	adds	r3, #1
 800490c:	9305      	str	r3, [sp, #20]
 800490e:	e774      	b.n	80047fa <_dtoa_r+0x92a>
 8004910:	f000 f8f6 	bl	8004b00 <__multadd>
 8004914:	4639      	mov	r1, r7
 8004916:	4681      	mov	r9, r0
 8004918:	2300      	movs	r3, #0
 800491a:	220a      	movs	r2, #10
 800491c:	4630      	mov	r0, r6
 800491e:	f000 f8ef 	bl	8004b00 <__multadd>
 8004922:	4607      	mov	r7, r0
 8004924:	e7f0      	b.n	8004908 <_dtoa_r+0xa38>
 8004926:	f1ba 0f00 	cmp.w	sl, #0
 800492a:	9a00      	ldr	r2, [sp, #0]
 800492c:	bfcc      	ite	gt
 800492e:	46d0      	movgt	r8, sl
 8004930:	f04f 0801 	movle.w	r8, #1
 8004934:	4490      	add	r8, r2
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	4629      	mov	r1, r5
 800493c:	2201      	movs	r2, #1
 800493e:	4630      	mov	r0, r6
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	f000 fa8d 	bl	8004e60 <__lshift>
 8004946:	4621      	mov	r1, r4
 8004948:	4605      	mov	r5, r0
 800494a:	f000 faf5 	bl	8004f38 <__mcmp>
 800494e:	2800      	cmp	r0, #0
 8004950:	dcb1      	bgt.n	80048b6 <_dtoa_r+0x9e6>
 8004952:	d102      	bne.n	800495a <_dtoa_r+0xa8a>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	07db      	lsls	r3, r3, #31
 8004958:	d4ad      	bmi.n	80048b6 <_dtoa_r+0x9e6>
 800495a:	4643      	mov	r3, r8
 800495c:	4698      	mov	r8, r3
 800495e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004962:	2a30      	cmp	r2, #48	; 0x30
 8004964:	d0fa      	beq.n	800495c <_dtoa_r+0xa8c>
 8004966:	e6f6      	b.n	8004756 <_dtoa_r+0x886>
 8004968:	9a00      	ldr	r2, [sp, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d1a4      	bne.n	80048b8 <_dtoa_r+0x9e8>
 800496e:	f10b 0b01 	add.w	fp, fp, #1
 8004972:	2331      	movs	r3, #49	; 0x31
 8004974:	e778      	b.n	8004868 <_dtoa_r+0x998>
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <_dtoa_r+0xafc>)
 8004978:	f7ff bb12 	b.w	8003fa0 <_dtoa_r+0xd0>
 800497c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800497e:	2b00      	cmp	r3, #0
 8004980:	f47f aaee 	bne.w	8003f60 <_dtoa_r+0x90>
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <_dtoa_r+0xb00>)
 8004986:	f7ff bb0b 	b.w	8003fa0 <_dtoa_r+0xd0>
 800498a:	f1ba 0f00 	cmp.w	sl, #0
 800498e:	dc03      	bgt.n	8004998 <_dtoa_r+0xac8>
 8004990:	9b07      	ldr	r3, [sp, #28]
 8004992:	2b02      	cmp	r3, #2
 8004994:	f73f aec7 	bgt.w	8004726 <_dtoa_r+0x856>
 8004998:	f8dd 8000 	ldr.w	r8, [sp]
 800499c:	4621      	mov	r1, r4
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fa08 	bl	8003db4 <quorem>
 80049a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80049a8:	f808 3b01 	strb.w	r3, [r8], #1
 80049ac:	9a00      	ldr	r2, [sp, #0]
 80049ae:	eba8 0202 	sub.w	r2, r8, r2
 80049b2:	4592      	cmp	sl, r2
 80049b4:	ddb7      	ble.n	8004926 <_dtoa_r+0xa56>
 80049b6:	4629      	mov	r1, r5
 80049b8:	2300      	movs	r3, #0
 80049ba:	220a      	movs	r2, #10
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f89f 	bl	8004b00 <__multadd>
 80049c2:	4605      	mov	r5, r0
 80049c4:	e7ea      	b.n	800499c <_dtoa_r+0xacc>
 80049c6:	bf00      	nop
 80049c8:	080059e7 	.word	0x080059e7
 80049cc:	08005904 	.word	0x08005904
 80049d0:	08005964 	.word	0x08005964

080049d4 <fiprintf>:
 80049d4:	b40e      	push	{r1, r2, r3}
 80049d6:	b503      	push	{r0, r1, lr}
 80049d8:	4601      	mov	r1, r0
 80049da:	ab03      	add	r3, sp, #12
 80049dc:	4805      	ldr	r0, [pc, #20]	; (80049f4 <fiprintf+0x20>)
 80049de:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e2:	6800      	ldr	r0, [r0, #0]
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	f000 fbdf 	bl	80051a8 <_vfiprintf_r>
 80049ea:	b002      	add	sp, #8
 80049ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f0:	b003      	add	sp, #12
 80049f2:	4770      	bx	lr
 80049f4:	24000014 	.word	0x24000014

080049f8 <_localeconv_r>:
 80049f8:	4800      	ldr	r0, [pc, #0]	; (80049fc <_localeconv_r+0x4>)
 80049fa:	4770      	bx	lr
 80049fc:	24000168 	.word	0x24000168

08004a00 <_lseek_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d07      	ldr	r5, [pc, #28]	; (8004a20 <_lseek_r+0x20>)
 8004a04:	4604      	mov	r4, r0
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f000 fee6 	bl	80057e0 <_lseek>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_lseek_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_lseek_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	24000318 	.word	0x24000318

08004a24 <__malloc_lock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__malloc_lock+0x8>)
 8004a26:	f7fe bc24 	b.w	8003272 <__retarget_lock_acquire_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	24000310 	.word	0x24000310

08004a30 <__malloc_unlock>:
 8004a30:	4801      	ldr	r0, [pc, #4]	; (8004a38 <__malloc_unlock+0x8>)
 8004a32:	f7fe bc1f 	b.w	8003274 <__retarget_lock_release_recursive>
 8004a36:	bf00      	nop
 8004a38:	24000310 	.word	0x24000310

08004a3c <_Balloc>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a40:	4604      	mov	r4, r0
 8004a42:	460d      	mov	r5, r1
 8004a44:	b976      	cbnz	r6, 8004a64 <_Balloc+0x28>
 8004a46:	2010      	movs	r0, #16
 8004a48:	f7fe fa08 	bl	8002e5c <__wrap_malloc>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6260      	str	r0, [r4, #36]	; 0x24
 8004a50:	b920      	cbnz	r0, 8004a5c <_Balloc+0x20>
 8004a52:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <_Balloc+0x78>)
 8004a54:	4818      	ldr	r0, [pc, #96]	; (8004ab8 <_Balloc+0x7c>)
 8004a56:	2166      	movs	r1, #102	; 0x66
 8004a58:	f7ff f97e 	bl	8003d58 <__assert_func>
 8004a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a60:	6006      	str	r6, [r0, #0]
 8004a62:	60c6      	str	r6, [r0, #12]
 8004a64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a66:	68f3      	ldr	r3, [r6, #12]
 8004a68:	b183      	cbz	r3, 8004a8c <_Balloc+0x50>
 8004a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a72:	b9b8      	cbnz	r0, 8004aa4 <_Balloc+0x68>
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f605 	lsl.w	r6, r1, r5
 8004a7a:	1d72      	adds	r2, r6, #5
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 fb5a 	bl	8005138 <_calloc_r>
 8004a84:	b160      	cbz	r0, 8004aa0 <_Balloc+0x64>
 8004a86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a8a:	e00e      	b.n	8004aaa <_Balloc+0x6e>
 8004a8c:	2221      	movs	r2, #33	; 0x21
 8004a8e:	2104      	movs	r1, #4
 8004a90:	4620      	mov	r0, r4
 8004a92:	f000 fb51 	bl	8005138 <_calloc_r>
 8004a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a98:	60f0      	str	r0, [r6, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e4      	bne.n	8004a6a <_Balloc+0x2e>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
 8004aa4:	6802      	ldr	r2, [r0, #0]
 8004aa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ab0:	e7f7      	b.n	8004aa2 <_Balloc+0x66>
 8004ab2:	bf00      	nop
 8004ab4:	08005971 	.word	0x08005971
 8004ab8:	080059f8 	.word	0x080059f8

08004abc <_Bfree>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	b976      	cbnz	r6, 8004ae4 <_Bfree+0x28>
 8004ac6:	2010      	movs	r0, #16
 8004ac8:	f7fe f9c8 	bl	8002e5c <__wrap_malloc>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6268      	str	r0, [r5, #36]	; 0x24
 8004ad0:	b920      	cbnz	r0, 8004adc <_Bfree+0x20>
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <_Bfree+0x3c>)
 8004ad4:	4809      	ldr	r0, [pc, #36]	; (8004afc <_Bfree+0x40>)
 8004ad6:	218a      	movs	r1, #138	; 0x8a
 8004ad8:	f7ff f93e 	bl	8003d58 <__assert_func>
 8004adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ae0:	6006      	str	r6, [r0, #0]
 8004ae2:	60c6      	str	r6, [r0, #12]
 8004ae4:	b13c      	cbz	r4, 8004af6 <_Bfree+0x3a>
 8004ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae8:	6862      	ldr	r2, [r4, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004af0:	6021      	str	r1, [r4, #0]
 8004af2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	08005971 	.word	0x08005971
 8004afc:	080059f8 	.word	0x080059f8

08004b00 <__multadd>:
 8004b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b04:	690e      	ldr	r6, [r1, #16]
 8004b06:	4607      	mov	r7, r0
 8004b08:	4698      	mov	r8, r3
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	f101 0014 	add.w	r0, r1, #20
 8004b10:	2300      	movs	r3, #0
 8004b12:	6805      	ldr	r5, [r0, #0]
 8004b14:	b2a9      	uxth	r1, r5
 8004b16:	fb02 8101 	mla	r1, r2, r1, r8
 8004b1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004b1e:	0c2d      	lsrs	r5, r5, #16
 8004b20:	fb02 c505 	mla	r5, r2, r5, ip
 8004b24:	b289      	uxth	r1, r1
 8004b26:	3301      	adds	r3, #1
 8004b28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004b2c:	429e      	cmp	r6, r3
 8004b2e:	f840 1b04 	str.w	r1, [r0], #4
 8004b32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004b36:	dcec      	bgt.n	8004b12 <__multadd+0x12>
 8004b38:	f1b8 0f00 	cmp.w	r8, #0
 8004b3c:	d022      	beq.n	8004b84 <__multadd+0x84>
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	42b3      	cmp	r3, r6
 8004b42:	dc19      	bgt.n	8004b78 <__multadd+0x78>
 8004b44:	6861      	ldr	r1, [r4, #4]
 8004b46:	4638      	mov	r0, r7
 8004b48:	3101      	adds	r1, #1
 8004b4a:	f7ff ff77 	bl	8004a3c <_Balloc>
 8004b4e:	4605      	mov	r5, r0
 8004b50:	b928      	cbnz	r0, 8004b5e <__multadd+0x5e>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <__multadd+0x8c>)
 8004b56:	480e      	ldr	r0, [pc, #56]	; (8004b90 <__multadd+0x90>)
 8004b58:	21b5      	movs	r1, #181	; 0xb5
 8004b5a:	f7ff f8fd 	bl	8003d58 <__assert_func>
 8004b5e:	6922      	ldr	r2, [r4, #16]
 8004b60:	3202      	adds	r2, #2
 8004b62:	f104 010c 	add.w	r1, r4, #12
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	300c      	adds	r0, #12
 8004b6a:	f7fe fb8d 	bl	8003288 <memcpy>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff ffa3 	bl	8004abc <_Bfree>
 8004b76:	462c      	mov	r4, r5
 8004b78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004b82:	6126      	str	r6, [r4, #16]
 8004b84:	4620      	mov	r0, r4
 8004b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8a:	bf00      	nop
 8004b8c:	080059e7 	.word	0x080059e7
 8004b90:	080059f8 	.word	0x080059f8

08004b94 <__hi0bits>:
 8004b94:	0c03      	lsrs	r3, r0, #16
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	b9d3      	cbnz	r3, 8004bd0 <__hi0bits+0x3c>
 8004b9a:	0400      	lsls	r0, r0, #16
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004ba2:	bf04      	itt	eq
 8004ba4:	0200      	lsleq	r0, r0, #8
 8004ba6:	3308      	addeq	r3, #8
 8004ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004bac:	bf04      	itt	eq
 8004bae:	0100      	lsleq	r0, r0, #4
 8004bb0:	3304      	addeq	r3, #4
 8004bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004bb6:	bf04      	itt	eq
 8004bb8:	0080      	lsleq	r0, r0, #2
 8004bba:	3302      	addeq	r3, #2
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	db05      	blt.n	8004bcc <__hi0bits+0x38>
 8004bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004bc4:	f103 0301 	add.w	r3, r3, #1
 8004bc8:	bf08      	it	eq
 8004bca:	2320      	moveq	r3, #32
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4770      	bx	lr
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e7e4      	b.n	8004b9e <__hi0bits+0xa>

08004bd4 <__lo0bits>:
 8004bd4:	6803      	ldr	r3, [r0, #0]
 8004bd6:	f013 0207 	ands.w	r2, r3, #7
 8004bda:	4601      	mov	r1, r0
 8004bdc:	d00b      	beq.n	8004bf6 <__lo0bits+0x22>
 8004bde:	07da      	lsls	r2, r3, #31
 8004be0:	d424      	bmi.n	8004c2c <__lo0bits+0x58>
 8004be2:	0798      	lsls	r0, r3, #30
 8004be4:	bf49      	itett	mi
 8004be6:	085b      	lsrmi	r3, r3, #1
 8004be8:	089b      	lsrpl	r3, r3, #2
 8004bea:	2001      	movmi	r0, #1
 8004bec:	600b      	strmi	r3, [r1, #0]
 8004bee:	bf5c      	itt	pl
 8004bf0:	600b      	strpl	r3, [r1, #0]
 8004bf2:	2002      	movpl	r0, #2
 8004bf4:	4770      	bx	lr
 8004bf6:	b298      	uxth	r0, r3
 8004bf8:	b9b0      	cbnz	r0, 8004c28 <__lo0bits+0x54>
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	2010      	movs	r0, #16
 8004bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c02:	bf04      	itt	eq
 8004c04:	0a1b      	lsreq	r3, r3, #8
 8004c06:	3008      	addeq	r0, #8
 8004c08:	071a      	lsls	r2, r3, #28
 8004c0a:	bf04      	itt	eq
 8004c0c:	091b      	lsreq	r3, r3, #4
 8004c0e:	3004      	addeq	r0, #4
 8004c10:	079a      	lsls	r2, r3, #30
 8004c12:	bf04      	itt	eq
 8004c14:	089b      	lsreq	r3, r3, #2
 8004c16:	3002      	addeq	r0, #2
 8004c18:	07da      	lsls	r2, r3, #31
 8004c1a:	d403      	bmi.n	8004c24 <__lo0bits+0x50>
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f100 0001 	add.w	r0, r0, #1
 8004c22:	d005      	beq.n	8004c30 <__lo0bits+0x5c>
 8004c24:	600b      	str	r3, [r1, #0]
 8004c26:	4770      	bx	lr
 8004c28:	4610      	mov	r0, r2
 8004c2a:	e7e8      	b.n	8004bfe <__lo0bits+0x2a>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	4770      	bx	lr
 8004c30:	2020      	movs	r0, #32
 8004c32:	4770      	bx	lr

08004c34 <__i2b>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	460c      	mov	r4, r1
 8004c38:	2101      	movs	r1, #1
 8004c3a:	f7ff feff 	bl	8004a3c <_Balloc>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	b928      	cbnz	r0, 8004c4e <__i2b+0x1a>
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <__i2b+0x24>)
 8004c44:	4805      	ldr	r0, [pc, #20]	; (8004c5c <__i2b+0x28>)
 8004c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c4a:	f7ff f885 	bl	8003d58 <__assert_func>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	6144      	str	r4, [r0, #20]
 8004c52:	6103      	str	r3, [r0, #16]
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	bf00      	nop
 8004c58:	080059e7 	.word	0x080059e7
 8004c5c:	080059f8 	.word	0x080059f8

08004c60 <__multiply>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	4614      	mov	r4, r2
 8004c66:	690a      	ldr	r2, [r1, #16]
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	bfb8      	it	lt
 8004c6e:	460b      	movlt	r3, r1
 8004c70:	460d      	mov	r5, r1
 8004c72:	bfbc      	itt	lt
 8004c74:	4625      	movlt	r5, r4
 8004c76:	461c      	movlt	r4, r3
 8004c78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004c7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004c80:	68ab      	ldr	r3, [r5, #8]
 8004c82:	6869      	ldr	r1, [r5, #4]
 8004c84:	eb0a 0709 	add.w	r7, sl, r9
 8004c88:	42bb      	cmp	r3, r7
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	bfb8      	it	lt
 8004c8e:	3101      	addlt	r1, #1
 8004c90:	f7ff fed4 	bl	8004a3c <_Balloc>
 8004c94:	b930      	cbnz	r0, 8004ca4 <__multiply+0x44>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <__multiply+0x144>)
 8004c9a:	4843      	ldr	r0, [pc, #268]	; (8004da8 <__multiply+0x148>)
 8004c9c:	f240 115d 	movw	r1, #349	; 0x15d
 8004ca0:	f7ff f85a 	bl	8003d58 <__assert_func>
 8004ca4:	f100 0614 	add.w	r6, r0, #20
 8004ca8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004cac:	4633      	mov	r3, r6
 8004cae:	2200      	movs	r2, #0
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	d31e      	bcc.n	8004cf2 <__multiply+0x92>
 8004cb4:	f105 0c14 	add.w	ip, r5, #20
 8004cb8:	f104 0314 	add.w	r3, r4, #20
 8004cbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004cc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004cc4:	9202      	str	r2, [sp, #8]
 8004cc6:	ebac 0205 	sub.w	r2, ip, r5
 8004cca:	3a15      	subs	r2, #21
 8004ccc:	f022 0203 	bic.w	r2, r2, #3
 8004cd0:	3204      	adds	r2, #4
 8004cd2:	f105 0115 	add.w	r1, r5, #21
 8004cd6:	458c      	cmp	ip, r1
 8004cd8:	bf38      	it	cc
 8004cda:	2204      	movcc	r2, #4
 8004cdc:	9201      	str	r2, [sp, #4]
 8004cde:	9a02      	ldr	r2, [sp, #8]
 8004ce0:	9303      	str	r3, [sp, #12]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d808      	bhi.n	8004cf8 <__multiply+0x98>
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	dc55      	bgt.n	8004d96 <__multiply+0x136>
 8004cea:	6107      	str	r7, [r0, #16]
 8004cec:	b005      	add	sp, #20
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	f843 2b04 	str.w	r2, [r3], #4
 8004cf6:	e7db      	b.n	8004cb0 <__multiply+0x50>
 8004cf8:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cfc:	f1ba 0f00 	cmp.w	sl, #0
 8004d00:	d020      	beq.n	8004d44 <__multiply+0xe4>
 8004d02:	f105 0e14 	add.w	lr, r5, #20
 8004d06:	46b1      	mov	r9, r6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004d0e:	f8d9 b000 	ldr.w	fp, [r9]
 8004d12:	b2a1      	uxth	r1, r4
 8004d14:	fa1f fb8b 	uxth.w	fp, fp
 8004d18:	fb0a b101 	mla	r1, sl, r1, fp
 8004d1c:	4411      	add	r1, r2
 8004d1e:	f8d9 2000 	ldr.w	r2, [r9]
 8004d22:	0c24      	lsrs	r4, r4, #16
 8004d24:	0c12      	lsrs	r2, r2, #16
 8004d26:	fb0a 2404 	mla	r4, sl, r4, r2
 8004d2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004d2e:	b289      	uxth	r1, r1
 8004d30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d34:	45f4      	cmp	ip, lr
 8004d36:	f849 1b04 	str.w	r1, [r9], #4
 8004d3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004d3e:	d8e4      	bhi.n	8004d0a <__multiply+0xaa>
 8004d40:	9901      	ldr	r1, [sp, #4]
 8004d42:	5072      	str	r2, [r6, r1]
 8004d44:	9a03      	ldr	r2, [sp, #12]
 8004d46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	d01f      	beq.n	8004d92 <__multiply+0x132>
 8004d52:	6834      	ldr	r4, [r6, #0]
 8004d54:	f105 0114 	add.w	r1, r5, #20
 8004d58:	46b6      	mov	lr, r6
 8004d5a:	f04f 0a00 	mov.w	sl, #0
 8004d5e:	880a      	ldrh	r2, [r1, #0]
 8004d60:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004d64:	fb09 b202 	mla	r2, r9, r2, fp
 8004d68:	4492      	add	sl, r2
 8004d6a:	b2a4      	uxth	r4, r4
 8004d6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004d70:	f84e 4b04 	str.w	r4, [lr], #4
 8004d74:	f851 4b04 	ldr.w	r4, [r1], #4
 8004d78:	f8be 2000 	ldrh.w	r2, [lr]
 8004d7c:	0c24      	lsrs	r4, r4, #16
 8004d7e:	fb09 2404 	mla	r4, r9, r4, r2
 8004d82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004d86:	458c      	cmp	ip, r1
 8004d88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004d8c:	d8e7      	bhi.n	8004d5e <__multiply+0xfe>
 8004d8e:	9a01      	ldr	r2, [sp, #4]
 8004d90:	50b4      	str	r4, [r6, r2]
 8004d92:	3604      	adds	r6, #4
 8004d94:	e7a3      	b.n	8004cde <__multiply+0x7e>
 8004d96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1a5      	bne.n	8004cea <__multiply+0x8a>
 8004d9e:	3f01      	subs	r7, #1
 8004da0:	e7a1      	b.n	8004ce6 <__multiply+0x86>
 8004da2:	bf00      	nop
 8004da4:	080059e7 	.word	0x080059e7
 8004da8:	080059f8 	.word	0x080059f8

08004dac <__pow5mult>:
 8004dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db0:	4615      	mov	r5, r2
 8004db2:	f012 0203 	ands.w	r2, r2, #3
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
 8004dba:	d007      	beq.n	8004dcc <__pow5mult+0x20>
 8004dbc:	4c25      	ldr	r4, [pc, #148]	; (8004e54 <__pow5mult+0xa8>)
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dc6:	f7ff fe9b 	bl	8004b00 <__multadd>
 8004dca:	4607      	mov	r7, r0
 8004dcc:	10ad      	asrs	r5, r5, #2
 8004dce:	d03d      	beq.n	8004e4c <__pow5mult+0xa0>
 8004dd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004dd2:	b97c      	cbnz	r4, 8004df4 <__pow5mult+0x48>
 8004dd4:	2010      	movs	r0, #16
 8004dd6:	f7fe f841 	bl	8002e5c <__wrap_malloc>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	6270      	str	r0, [r6, #36]	; 0x24
 8004dde:	b928      	cbnz	r0, 8004dec <__pow5mult+0x40>
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <__pow5mult+0xac>)
 8004de2:	481e      	ldr	r0, [pc, #120]	; (8004e5c <__pow5mult+0xb0>)
 8004de4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004de8:	f7fe ffb6 	bl	8003d58 <__assert_func>
 8004dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004df0:	6004      	str	r4, [r0, #0]
 8004df2:	60c4      	str	r4, [r0, #12]
 8004df4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004dfc:	b94c      	cbnz	r4, 8004e12 <__pow5mult+0x66>
 8004dfe:	f240 2171 	movw	r1, #625	; 0x271
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff ff16 	bl	8004c34 <__i2b>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	f04f 0900 	mov.w	r9, #0
 8004e16:	07eb      	lsls	r3, r5, #31
 8004e18:	d50a      	bpl.n	8004e30 <__pow5mult+0x84>
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f7ff ff1e 	bl	8004c60 <__multiply>
 8004e24:	4639      	mov	r1, r7
 8004e26:	4680      	mov	r8, r0
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff fe47 	bl	8004abc <_Bfree>
 8004e2e:	4647      	mov	r7, r8
 8004e30:	106d      	asrs	r5, r5, #1
 8004e32:	d00b      	beq.n	8004e4c <__pow5mult+0xa0>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	b938      	cbnz	r0, 8004e48 <__pow5mult+0x9c>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f7ff ff0f 	bl	8004c60 <__multiply>
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	f8c0 9000 	str.w	r9, [r0]
 8004e48:	4604      	mov	r4, r0
 8004e4a:	e7e4      	b.n	8004e16 <__pow5mult+0x6a>
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e52:	bf00      	nop
 8004e54:	08005b48 	.word	0x08005b48
 8004e58:	08005971 	.word	0x08005971
 8004e5c:	080059f8 	.word	0x080059f8

08004e60 <__lshift>:
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	460c      	mov	r4, r1
 8004e66:	6849      	ldr	r1, [r1, #4]
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e6e:	68a3      	ldr	r3, [r4, #8]
 8004e70:	4607      	mov	r7, r0
 8004e72:	4691      	mov	r9, r2
 8004e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e78:	f108 0601 	add.w	r6, r8, #1
 8004e7c:	42b3      	cmp	r3, r6
 8004e7e:	db0b      	blt.n	8004e98 <__lshift+0x38>
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff fddb 	bl	8004a3c <_Balloc>
 8004e86:	4605      	mov	r5, r0
 8004e88:	b948      	cbnz	r0, 8004e9e <__lshift+0x3e>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <__lshift+0xd0>)
 8004e8e:	4829      	ldr	r0, [pc, #164]	; (8004f34 <__lshift+0xd4>)
 8004e90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e94:	f7fe ff60 	bl	8003d58 <__assert_func>
 8004e98:	3101      	adds	r1, #1
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	e7ee      	b.n	8004e7c <__lshift+0x1c>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f100 0114 	add.w	r1, r0, #20
 8004ea4:	f100 0210 	add.w	r2, r0, #16
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4553      	cmp	r3, sl
 8004eac:	db33      	blt.n	8004f16 <__lshift+0xb6>
 8004eae:	6920      	ldr	r0, [r4, #16]
 8004eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004eb4:	f104 0314 	add.w	r3, r4, #20
 8004eb8:	f019 091f 	ands.w	r9, r9, #31
 8004ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ec4:	d02b      	beq.n	8004f1e <__lshift+0xbe>
 8004ec6:	f1c9 0e20 	rsb	lr, r9, #32
 8004eca:	468a      	mov	sl, r1
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8004ed4:	4302      	orrs	r2, r0
 8004ed6:	f84a 2b04 	str.w	r2, [sl], #4
 8004eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ede:	459c      	cmp	ip, r3
 8004ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ee4:	d8f3      	bhi.n	8004ece <__lshift+0x6e>
 8004ee6:	ebac 0304 	sub.w	r3, ip, r4
 8004eea:	3b15      	subs	r3, #21
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	f104 0015 	add.w	r0, r4, #21
 8004ef6:	4584      	cmp	ip, r0
 8004ef8:	bf38      	it	cc
 8004efa:	2304      	movcc	r3, #4
 8004efc:	50ca      	str	r2, [r1, r3]
 8004efe:	b10a      	cbz	r2, 8004f04 <__lshift+0xa4>
 8004f00:	f108 0602 	add.w	r6, r8, #2
 8004f04:	3e01      	subs	r6, #1
 8004f06:	4638      	mov	r0, r7
 8004f08:	612e      	str	r6, [r5, #16]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	f7ff fdd6 	bl	8004abc <_Bfree>
 8004f10:	4628      	mov	r0, r5
 8004f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	e7c5      	b.n	8004eaa <__lshift+0x4a>
 8004f1e:	3904      	subs	r1, #4
 8004f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f28:	459c      	cmp	ip, r3
 8004f2a:	d8f9      	bhi.n	8004f20 <__lshift+0xc0>
 8004f2c:	e7ea      	b.n	8004f04 <__lshift+0xa4>
 8004f2e:	bf00      	nop
 8004f30:	080059e7 	.word	0x080059e7
 8004f34:	080059f8 	.word	0x080059f8

08004f38 <__mcmp>:
 8004f38:	b530      	push	{r4, r5, lr}
 8004f3a:	6902      	ldr	r2, [r0, #16]
 8004f3c:	690c      	ldr	r4, [r1, #16]
 8004f3e:	1b12      	subs	r2, r2, r4
 8004f40:	d10e      	bne.n	8004f60 <__mcmp+0x28>
 8004f42:	f100 0314 	add.w	r3, r0, #20
 8004f46:	3114      	adds	r1, #20
 8004f48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f58:	42a5      	cmp	r5, r4
 8004f5a:	d003      	beq.n	8004f64 <__mcmp+0x2c>
 8004f5c:	d305      	bcc.n	8004f6a <__mcmp+0x32>
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4610      	mov	r0, r2
 8004f62:	bd30      	pop	{r4, r5, pc}
 8004f64:	4283      	cmp	r3, r0
 8004f66:	d3f3      	bcc.n	8004f50 <__mcmp+0x18>
 8004f68:	e7fa      	b.n	8004f60 <__mcmp+0x28>
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	e7f7      	b.n	8004f60 <__mcmp+0x28>

08004f70 <__mdiff>:
 8004f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	460c      	mov	r4, r1
 8004f76:	4606      	mov	r6, r0
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4617      	mov	r7, r2
 8004f7e:	f7ff ffdb 	bl	8004f38 <__mcmp>
 8004f82:	1e05      	subs	r5, r0, #0
 8004f84:	d110      	bne.n	8004fa8 <__mdiff+0x38>
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f7ff fd57 	bl	8004a3c <_Balloc>
 8004f8e:	b930      	cbnz	r0, 8004f9e <__mdiff+0x2e>
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <__mdiff+0x108>)
 8004f92:	4602      	mov	r2, r0
 8004f94:	f240 2132 	movw	r1, #562	; 0x232
 8004f98:	4838      	ldr	r0, [pc, #224]	; (800507c <__mdiff+0x10c>)
 8004f9a:	f7fe fedd 	bl	8003d58 <__assert_func>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	bfa4      	itt	ge
 8004faa:	463b      	movge	r3, r7
 8004fac:	4627      	movge	r7, r4
 8004fae:	4630      	mov	r0, r6
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	bfa6      	itte	ge
 8004fb4:	461c      	movge	r4, r3
 8004fb6:	2500      	movge	r5, #0
 8004fb8:	2501      	movlt	r5, #1
 8004fba:	f7ff fd3f 	bl	8004a3c <_Balloc>
 8004fbe:	b920      	cbnz	r0, 8004fca <__mdiff+0x5a>
 8004fc0:	4b2d      	ldr	r3, [pc, #180]	; (8005078 <__mdiff+0x108>)
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004fc8:	e7e6      	b.n	8004f98 <__mdiff+0x28>
 8004fca:	693e      	ldr	r6, [r7, #16]
 8004fcc:	60c5      	str	r5, [r0, #12]
 8004fce:	6925      	ldr	r5, [r4, #16]
 8004fd0:	f107 0114 	add.w	r1, r7, #20
 8004fd4:	f104 0914 	add.w	r9, r4, #20
 8004fd8:	f100 0e14 	add.w	lr, r0, #20
 8004fdc:	f107 0210 	add.w	r2, r7, #16
 8004fe0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004fe4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004fe8:	46f2      	mov	sl, lr
 8004fea:	2700      	movs	r7, #0
 8004fec:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004ff4:	fa1f f883 	uxth.w	r8, r3
 8004ff8:	fa17 f78b 	uxtah	r7, r7, fp
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	eba7 0808 	sub.w	r8, r7, r8
 8005002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800500a:	fa1f f888 	uxth.w	r8, r8
 800500e:	141f      	asrs	r7, r3, #16
 8005010:	454d      	cmp	r5, r9
 8005012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005016:	f84a 3b04 	str.w	r3, [sl], #4
 800501a:	d8e7      	bhi.n	8004fec <__mdiff+0x7c>
 800501c:	1b2b      	subs	r3, r5, r4
 800501e:	3b15      	subs	r3, #21
 8005020:	f023 0303 	bic.w	r3, r3, #3
 8005024:	3304      	adds	r3, #4
 8005026:	3415      	adds	r4, #21
 8005028:	42a5      	cmp	r5, r4
 800502a:	bf38      	it	cc
 800502c:	2304      	movcc	r3, #4
 800502e:	4419      	add	r1, r3
 8005030:	4473      	add	r3, lr
 8005032:	469e      	mov	lr, r3
 8005034:	460d      	mov	r5, r1
 8005036:	4565      	cmp	r5, ip
 8005038:	d30e      	bcc.n	8005058 <__mdiff+0xe8>
 800503a:	f10c 0203 	add.w	r2, ip, #3
 800503e:	1a52      	subs	r2, r2, r1
 8005040:	f022 0203 	bic.w	r2, r2, #3
 8005044:	3903      	subs	r1, #3
 8005046:	458c      	cmp	ip, r1
 8005048:	bf38      	it	cc
 800504a:	2200      	movcc	r2, #0
 800504c:	441a      	add	r2, r3
 800504e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005052:	b17b      	cbz	r3, 8005074 <__mdiff+0x104>
 8005054:	6106      	str	r6, [r0, #16]
 8005056:	e7a5      	b.n	8004fa4 <__mdiff+0x34>
 8005058:	f855 8b04 	ldr.w	r8, [r5], #4
 800505c:	fa17 f488 	uxtah	r4, r7, r8
 8005060:	1422      	asrs	r2, r4, #16
 8005062:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005066:	b2a4      	uxth	r4, r4
 8005068:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800506c:	f84e 4b04 	str.w	r4, [lr], #4
 8005070:	1417      	asrs	r7, r2, #16
 8005072:	e7e0      	b.n	8005036 <__mdiff+0xc6>
 8005074:	3e01      	subs	r6, #1
 8005076:	e7ea      	b.n	800504e <__mdiff+0xde>
 8005078:	080059e7 	.word	0x080059e7
 800507c:	080059f8 	.word	0x080059f8

08005080 <__d2b>:
 8005080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005084:	4689      	mov	r9, r1
 8005086:	2101      	movs	r1, #1
 8005088:	ec57 6b10 	vmov	r6, r7, d0
 800508c:	4690      	mov	r8, r2
 800508e:	f7ff fcd5 	bl	8004a3c <_Balloc>
 8005092:	4604      	mov	r4, r0
 8005094:	b930      	cbnz	r0, 80050a4 <__d2b+0x24>
 8005096:	4602      	mov	r2, r0
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <__d2b+0xb0>)
 800509a:	4826      	ldr	r0, [pc, #152]	; (8005134 <__d2b+0xb4>)
 800509c:	f240 310a 	movw	r1, #778	; 0x30a
 80050a0:	f7fe fe5a 	bl	8003d58 <__assert_func>
 80050a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80050a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050ac:	bb35      	cbnz	r5, 80050fc <__d2b+0x7c>
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	d028      	beq.n	8005106 <__d2b+0x86>
 80050b4:	4668      	mov	r0, sp
 80050b6:	9600      	str	r6, [sp, #0]
 80050b8:	f7ff fd8c 	bl	8004bd4 <__lo0bits>
 80050bc:	9900      	ldr	r1, [sp, #0]
 80050be:	b300      	cbz	r0, 8005102 <__d2b+0x82>
 80050c0:	9a01      	ldr	r2, [sp, #4]
 80050c2:	f1c0 0320 	rsb	r3, r0, #32
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	430b      	orrs	r3, r1
 80050cc:	40c2      	lsrs	r2, r0
 80050ce:	6163      	str	r3, [r4, #20]
 80050d0:	9201      	str	r2, [sp, #4]
 80050d2:	9b01      	ldr	r3, [sp, #4]
 80050d4:	61a3      	str	r3, [r4, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2202      	movne	r2, #2
 80050dc:	2201      	moveq	r2, #1
 80050de:	6122      	str	r2, [r4, #16]
 80050e0:	b1d5      	cbz	r5, 8005118 <__d2b+0x98>
 80050e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050e6:	4405      	add	r5, r0
 80050e8:	f8c9 5000 	str.w	r5, [r9]
 80050ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050f0:	f8c8 0000 	str.w	r0, [r8]
 80050f4:	4620      	mov	r0, r4
 80050f6:	b003      	add	sp, #12
 80050f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005100:	e7d5      	b.n	80050ae <__d2b+0x2e>
 8005102:	6161      	str	r1, [r4, #20]
 8005104:	e7e5      	b.n	80050d2 <__d2b+0x52>
 8005106:	a801      	add	r0, sp, #4
 8005108:	f7ff fd64 	bl	8004bd4 <__lo0bits>
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	6163      	str	r3, [r4, #20]
 8005110:	2201      	movs	r2, #1
 8005112:	6122      	str	r2, [r4, #16]
 8005114:	3020      	adds	r0, #32
 8005116:	e7e3      	b.n	80050e0 <__d2b+0x60>
 8005118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800511c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005120:	f8c9 0000 	str.w	r0, [r9]
 8005124:	6918      	ldr	r0, [r3, #16]
 8005126:	f7ff fd35 	bl	8004b94 <__hi0bits>
 800512a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800512e:	e7df      	b.n	80050f0 <__d2b+0x70>
 8005130:	080059e7 	.word	0x080059e7
 8005134:	080059f8 	.word	0x080059f8

08005138 <_calloc_r>:
 8005138:	b513      	push	{r0, r1, r4, lr}
 800513a:	434a      	muls	r2, r1
 800513c:	4611      	mov	r1, r2
 800513e:	9201      	str	r2, [sp, #4]
 8005140:	f7fe f908 	bl	8003354 <_malloc_r>
 8005144:	4604      	mov	r4, r0
 8005146:	b118      	cbz	r0, 8005150 <_calloc_r+0x18>
 8005148:	9a01      	ldr	r2, [sp, #4]
 800514a:	2100      	movs	r1, #0
 800514c:	f7fe f8aa 	bl	80032a4 <memset>
 8005150:	4620      	mov	r0, r4
 8005152:	b002      	add	sp, #8
 8005154:	bd10      	pop	{r4, pc}

08005156 <__sfputc_r>:
 8005156:	6893      	ldr	r3, [r2, #8]
 8005158:	3b01      	subs	r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	b410      	push	{r4}
 800515e:	6093      	str	r3, [r2, #8]
 8005160:	da08      	bge.n	8005174 <__sfputc_r+0x1e>
 8005162:	6994      	ldr	r4, [r2, #24]
 8005164:	42a3      	cmp	r3, r4
 8005166:	db01      	blt.n	800516c <__sfputc_r+0x16>
 8005168:	290a      	cmp	r1, #10
 800516a:	d103      	bne.n	8005174 <__sfputc_r+0x1e>
 800516c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005170:	f000 b95c 	b.w	800542c <__swbuf_r>
 8005174:	6813      	ldr	r3, [r2, #0]
 8005176:	1c58      	adds	r0, r3, #1
 8005178:	6010      	str	r0, [r2, #0]
 800517a:	7019      	strb	r1, [r3, #0]
 800517c:	4608      	mov	r0, r1
 800517e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005182:	4770      	bx	lr

08005184 <__sfputs_r>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	4606      	mov	r6, r0
 8005188:	460f      	mov	r7, r1
 800518a:	4614      	mov	r4, r2
 800518c:	18d5      	adds	r5, r2, r3
 800518e:	42ac      	cmp	r4, r5
 8005190:	d101      	bne.n	8005196 <__sfputs_r+0x12>
 8005192:	2000      	movs	r0, #0
 8005194:	e007      	b.n	80051a6 <__sfputs_r+0x22>
 8005196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519a:	463a      	mov	r2, r7
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff ffda 	bl	8005156 <__sfputc_r>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d1f3      	bne.n	800518e <__sfputs_r+0xa>
 80051a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051a8 <_vfiprintf_r>:
 80051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ac:	460d      	mov	r5, r1
 80051ae:	b09d      	sub	sp, #116	; 0x74
 80051b0:	4614      	mov	r4, r2
 80051b2:	4698      	mov	r8, r3
 80051b4:	4606      	mov	r6, r0
 80051b6:	b118      	cbz	r0, 80051c0 <_vfiprintf_r+0x18>
 80051b8:	6983      	ldr	r3, [r0, #24]
 80051ba:	b90b      	cbnz	r3, 80051c0 <_vfiprintf_r+0x18>
 80051bc:	f7fd ff96 	bl	80030ec <__sinit>
 80051c0:	4b89      	ldr	r3, [pc, #548]	; (80053e8 <_vfiprintf_r+0x240>)
 80051c2:	429d      	cmp	r5, r3
 80051c4:	d11b      	bne.n	80051fe <_vfiprintf_r+0x56>
 80051c6:	6875      	ldr	r5, [r6, #4]
 80051c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ca:	07d9      	lsls	r1, r3, #31
 80051cc:	d405      	bmi.n	80051da <_vfiprintf_r+0x32>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	059a      	lsls	r2, r3, #22
 80051d2:	d402      	bmi.n	80051da <_vfiprintf_r+0x32>
 80051d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d6:	f7fe f84c 	bl	8003272 <__retarget_lock_acquire_recursive>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	d501      	bpl.n	80051e4 <_vfiprintf_r+0x3c>
 80051e0:	692b      	ldr	r3, [r5, #16]
 80051e2:	b9eb      	cbnz	r3, 8005220 <_vfiprintf_r+0x78>
 80051e4:	4629      	mov	r1, r5
 80051e6:	4630      	mov	r0, r6
 80051e8:	f000 f972 	bl	80054d0 <__swsetup_r>
 80051ec:	b1c0      	cbz	r0, 8005220 <_vfiprintf_r+0x78>
 80051ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f0:	07dc      	lsls	r4, r3, #31
 80051f2:	d50e      	bpl.n	8005212 <_vfiprintf_r+0x6a>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	b01d      	add	sp, #116	; 0x74
 80051fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fe:	4b7b      	ldr	r3, [pc, #492]	; (80053ec <_vfiprintf_r+0x244>)
 8005200:	429d      	cmp	r5, r3
 8005202:	d101      	bne.n	8005208 <_vfiprintf_r+0x60>
 8005204:	68b5      	ldr	r5, [r6, #8]
 8005206:	e7df      	b.n	80051c8 <_vfiprintf_r+0x20>
 8005208:	4b79      	ldr	r3, [pc, #484]	; (80053f0 <_vfiprintf_r+0x248>)
 800520a:	429d      	cmp	r5, r3
 800520c:	bf08      	it	eq
 800520e:	68f5      	ldreq	r5, [r6, #12]
 8005210:	e7da      	b.n	80051c8 <_vfiprintf_r+0x20>
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	0598      	lsls	r0, r3, #22
 8005216:	d4ed      	bmi.n	80051f4 <_vfiprintf_r+0x4c>
 8005218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521a:	f7fe f82b 	bl	8003274 <__retarget_lock_release_recursive>
 800521e:	e7e9      	b.n	80051f4 <_vfiprintf_r+0x4c>
 8005220:	2300      	movs	r3, #0
 8005222:	9309      	str	r3, [sp, #36]	; 0x24
 8005224:	2320      	movs	r3, #32
 8005226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800522a:	f8cd 800c 	str.w	r8, [sp, #12]
 800522e:	2330      	movs	r3, #48	; 0x30
 8005230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053f4 <_vfiprintf_r+0x24c>
 8005234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005238:	f04f 0901 	mov.w	r9, #1
 800523c:	4623      	mov	r3, r4
 800523e:	469a      	mov	sl, r3
 8005240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005244:	b10a      	cbz	r2, 800524a <_vfiprintf_r+0xa2>
 8005246:	2a25      	cmp	r2, #37	; 0x25
 8005248:	d1f9      	bne.n	800523e <_vfiprintf_r+0x96>
 800524a:	ebba 0b04 	subs.w	fp, sl, r4
 800524e:	d00b      	beq.n	8005268 <_vfiprintf_r+0xc0>
 8005250:	465b      	mov	r3, fp
 8005252:	4622      	mov	r2, r4
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff ff94 	bl	8005184 <__sfputs_r>
 800525c:	3001      	adds	r0, #1
 800525e:	f000 80aa 	beq.w	80053b6 <_vfiprintf_r+0x20e>
 8005262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005264:	445a      	add	r2, fp
 8005266:	9209      	str	r2, [sp, #36]	; 0x24
 8005268:	f89a 3000 	ldrb.w	r3, [sl]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80a2 	beq.w	80053b6 <_vfiprintf_r+0x20e>
 8005272:	2300      	movs	r3, #0
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800527c:	f10a 0a01 	add.w	sl, sl, #1
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	9307      	str	r3, [sp, #28]
 8005284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005288:	931a      	str	r3, [sp, #104]	; 0x68
 800528a:	4654      	mov	r4, sl
 800528c:	2205      	movs	r2, #5
 800528e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005292:	4858      	ldr	r0, [pc, #352]	; (80053f4 <_vfiprintf_r+0x24c>)
 8005294:	f7fb f82c 	bl	80002f0 <memchr>
 8005298:	9a04      	ldr	r2, [sp, #16]
 800529a:	b9d8      	cbnz	r0, 80052d4 <_vfiprintf_r+0x12c>
 800529c:	06d1      	lsls	r1, r2, #27
 800529e:	bf44      	itt	mi
 80052a0:	2320      	movmi	r3, #32
 80052a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a6:	0713      	lsls	r3, r2, #28
 80052a8:	bf44      	itt	mi
 80052aa:	232b      	movmi	r3, #43	; 0x2b
 80052ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b0:	f89a 3000 	ldrb.w	r3, [sl]
 80052b4:	2b2a      	cmp	r3, #42	; 0x2a
 80052b6:	d015      	beq.n	80052e4 <_vfiprintf_r+0x13c>
 80052b8:	9a07      	ldr	r2, [sp, #28]
 80052ba:	4654      	mov	r4, sl
 80052bc:	2000      	movs	r0, #0
 80052be:	f04f 0c0a 	mov.w	ip, #10
 80052c2:	4621      	mov	r1, r4
 80052c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c8:	3b30      	subs	r3, #48	; 0x30
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d94e      	bls.n	800536c <_vfiprintf_r+0x1c4>
 80052ce:	b1b0      	cbz	r0, 80052fe <_vfiprintf_r+0x156>
 80052d0:	9207      	str	r2, [sp, #28]
 80052d2:	e014      	b.n	80052fe <_vfiprintf_r+0x156>
 80052d4:	eba0 0308 	sub.w	r3, r0, r8
 80052d8:	fa09 f303 	lsl.w	r3, r9, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	46a2      	mov	sl, r4
 80052e2:	e7d2      	b.n	800528a <_vfiprintf_r+0xe2>
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	1d19      	adds	r1, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	9103      	str	r1, [sp, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bfbb      	ittet	lt
 80052f0:	425b      	neglt	r3, r3
 80052f2:	f042 0202 	orrlt.w	r2, r2, #2
 80052f6:	9307      	strge	r3, [sp, #28]
 80052f8:	9307      	strlt	r3, [sp, #28]
 80052fa:	bfb8      	it	lt
 80052fc:	9204      	strlt	r2, [sp, #16]
 80052fe:	7823      	ldrb	r3, [r4, #0]
 8005300:	2b2e      	cmp	r3, #46	; 0x2e
 8005302:	d10c      	bne.n	800531e <_vfiprintf_r+0x176>
 8005304:	7863      	ldrb	r3, [r4, #1]
 8005306:	2b2a      	cmp	r3, #42	; 0x2a
 8005308:	d135      	bne.n	8005376 <_vfiprintf_r+0x1ce>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1d1a      	adds	r2, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	9203      	str	r2, [sp, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfb8      	it	lt
 8005316:	f04f 33ff 	movlt.w	r3, #4294967295
 800531a:	3402      	adds	r4, #2
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005404 <_vfiprintf_r+0x25c>
 8005322:	7821      	ldrb	r1, [r4, #0]
 8005324:	2203      	movs	r2, #3
 8005326:	4650      	mov	r0, sl
 8005328:	f7fa ffe2 	bl	80002f0 <memchr>
 800532c:	b140      	cbz	r0, 8005340 <_vfiprintf_r+0x198>
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	eba0 000a 	sub.w	r0, r0, sl
 8005334:	fa03 f000 	lsl.w	r0, r3, r0
 8005338:	9b04      	ldr	r3, [sp, #16]
 800533a:	4303      	orrs	r3, r0
 800533c:	3401      	adds	r4, #1
 800533e:	9304      	str	r3, [sp, #16]
 8005340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005344:	482c      	ldr	r0, [pc, #176]	; (80053f8 <_vfiprintf_r+0x250>)
 8005346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800534a:	2206      	movs	r2, #6
 800534c:	f7fa ffd0 	bl	80002f0 <memchr>
 8005350:	2800      	cmp	r0, #0
 8005352:	d03f      	beq.n	80053d4 <_vfiprintf_r+0x22c>
 8005354:	4b29      	ldr	r3, [pc, #164]	; (80053fc <_vfiprintf_r+0x254>)
 8005356:	bb1b      	cbnz	r3, 80053a0 <_vfiprintf_r+0x1f8>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	3307      	adds	r3, #7
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	3308      	adds	r3, #8
 8005362:	9303      	str	r3, [sp, #12]
 8005364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005366:	443b      	add	r3, r7
 8005368:	9309      	str	r3, [sp, #36]	; 0x24
 800536a:	e767      	b.n	800523c <_vfiprintf_r+0x94>
 800536c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005370:	460c      	mov	r4, r1
 8005372:	2001      	movs	r0, #1
 8005374:	e7a5      	b.n	80052c2 <_vfiprintf_r+0x11a>
 8005376:	2300      	movs	r3, #0
 8005378:	3401      	adds	r4, #1
 800537a:	9305      	str	r3, [sp, #20]
 800537c:	4619      	mov	r1, r3
 800537e:	f04f 0c0a 	mov.w	ip, #10
 8005382:	4620      	mov	r0, r4
 8005384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005388:	3a30      	subs	r2, #48	; 0x30
 800538a:	2a09      	cmp	r2, #9
 800538c:	d903      	bls.n	8005396 <_vfiprintf_r+0x1ee>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0c5      	beq.n	800531e <_vfiprintf_r+0x176>
 8005392:	9105      	str	r1, [sp, #20]
 8005394:	e7c3      	b.n	800531e <_vfiprintf_r+0x176>
 8005396:	fb0c 2101 	mla	r1, ip, r1, r2
 800539a:	4604      	mov	r4, r0
 800539c:	2301      	movs	r3, #1
 800539e:	e7f0      	b.n	8005382 <_vfiprintf_r+0x1da>
 80053a0:	ab03      	add	r3, sp, #12
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	462a      	mov	r2, r5
 80053a6:	4b16      	ldr	r3, [pc, #88]	; (8005400 <_vfiprintf_r+0x258>)
 80053a8:	a904      	add	r1, sp, #16
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7fe f8bc 	bl	8003528 <_printf_float>
 80053b0:	4607      	mov	r7, r0
 80053b2:	1c78      	adds	r0, r7, #1
 80053b4:	d1d6      	bne.n	8005364 <_vfiprintf_r+0x1bc>
 80053b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b8:	07d9      	lsls	r1, r3, #31
 80053ba:	d405      	bmi.n	80053c8 <_vfiprintf_r+0x220>
 80053bc:	89ab      	ldrh	r3, [r5, #12]
 80053be:	059a      	lsls	r2, r3, #22
 80053c0:	d402      	bmi.n	80053c8 <_vfiprintf_r+0x220>
 80053c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053c4:	f7fd ff56 	bl	8003274 <__retarget_lock_release_recursive>
 80053c8:	89ab      	ldrh	r3, [r5, #12]
 80053ca:	065b      	lsls	r3, r3, #25
 80053cc:	f53f af12 	bmi.w	80051f4 <_vfiprintf_r+0x4c>
 80053d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d2:	e711      	b.n	80051f8 <_vfiprintf_r+0x50>
 80053d4:	ab03      	add	r3, sp, #12
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	462a      	mov	r2, r5
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <_vfiprintf_r+0x258>)
 80053dc:	a904      	add	r1, sp, #16
 80053de:	4630      	mov	r0, r6
 80053e0:	f7fe fb2e 	bl	8003a40 <_printf_i>
 80053e4:	e7e4      	b.n	80053b0 <_vfiprintf_r+0x208>
 80053e6:	bf00      	nop
 80053e8:	080058b0 	.word	0x080058b0
 80053ec:	080058d0 	.word	0x080058d0
 80053f0:	08005890 	.word	0x08005890
 80053f4:	08005b54 	.word	0x08005b54
 80053f8:	08005b5e 	.word	0x08005b5e
 80053fc:	08003529 	.word	0x08003529
 8005400:	08005185 	.word	0x08005185
 8005404:	08005b5a 	.word	0x08005b5a

08005408 <_read_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d07      	ldr	r5, [pc, #28]	; (8005428 <_read_r+0x20>)
 800540c:	4604      	mov	r4, r0
 800540e:	4608      	mov	r0, r1
 8005410:	4611      	mov	r1, r2
 8005412:	2200      	movs	r2, #0
 8005414:	602a      	str	r2, [r5, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 f9ea 	bl	80057f0 <_read>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_read_r+0x1e>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	b103      	cbz	r3, 8005426 <_read_r+0x1e>
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	24000318 	.word	0x24000318

0800542c <__swbuf_r>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	460e      	mov	r6, r1
 8005430:	4614      	mov	r4, r2
 8005432:	4605      	mov	r5, r0
 8005434:	b118      	cbz	r0, 800543e <__swbuf_r+0x12>
 8005436:	6983      	ldr	r3, [r0, #24]
 8005438:	b90b      	cbnz	r3, 800543e <__swbuf_r+0x12>
 800543a:	f7fd fe57 	bl	80030ec <__sinit>
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <__swbuf_r+0x98>)
 8005440:	429c      	cmp	r4, r3
 8005442:	d12b      	bne.n	800549c <__swbuf_r+0x70>
 8005444:	686c      	ldr	r4, [r5, #4]
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	071a      	lsls	r2, r3, #28
 800544e:	d52f      	bpl.n	80054b0 <__swbuf_r+0x84>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	b36b      	cbz	r3, 80054b0 <__swbuf_r+0x84>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	1ac0      	subs	r0, r0, r3
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	b2f6      	uxtb	r6, r6
 800545e:	4283      	cmp	r3, r0
 8005460:	4637      	mov	r7, r6
 8005462:	dc04      	bgt.n	800546e <__swbuf_r+0x42>
 8005464:	4621      	mov	r1, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f7fd fdac 	bl	8002fc4 <_fflush_r>
 800546c:	bb30      	cbnz	r0, 80054bc <__swbuf_r+0x90>
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	3b01      	subs	r3, #1
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	701e      	strb	r6, [r3, #0]
 800547c:	6963      	ldr	r3, [r4, #20]
 800547e:	3001      	adds	r0, #1
 8005480:	4283      	cmp	r3, r0
 8005482:	d004      	beq.n	800548e <__swbuf_r+0x62>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	07db      	lsls	r3, r3, #31
 8005488:	d506      	bpl.n	8005498 <__swbuf_r+0x6c>
 800548a:	2e0a      	cmp	r6, #10
 800548c:	d104      	bne.n	8005498 <__swbuf_r+0x6c>
 800548e:	4621      	mov	r1, r4
 8005490:	4628      	mov	r0, r5
 8005492:	f7fd fd97 	bl	8002fc4 <_fflush_r>
 8005496:	b988      	cbnz	r0, 80054bc <__swbuf_r+0x90>
 8005498:	4638      	mov	r0, r7
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <__swbuf_r+0x9c>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <__swbuf_r+0x7a>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7cf      	b.n	8005446 <__swbuf_r+0x1a>
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <__swbuf_r+0xa0>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7ca      	b.n	8005446 <__swbuf_r+0x1a>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f80c 	bl	80054d0 <__swsetup_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0cb      	beq.n	8005454 <__swbuf_r+0x28>
 80054bc:	f04f 37ff 	mov.w	r7, #4294967295
 80054c0:	e7ea      	b.n	8005498 <__swbuf_r+0x6c>
 80054c2:	bf00      	nop
 80054c4:	080058b0 	.word	0x080058b0
 80054c8:	080058d0 	.word	0x080058d0
 80054cc:	08005890 	.word	0x08005890

080054d0 <__swsetup_r>:
 80054d0:	4b32      	ldr	r3, [pc, #200]	; (800559c <__swsetup_r+0xcc>)
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	4606      	mov	r6, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	b125      	cbz	r5, 80054e6 <__swsetup_r+0x16>
 80054dc:	69ab      	ldr	r3, [r5, #24]
 80054de:	b913      	cbnz	r3, 80054e6 <__swsetup_r+0x16>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f7fd fe03 	bl	80030ec <__sinit>
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <__swsetup_r+0xd0>)
 80054e8:	429c      	cmp	r4, r3
 80054ea:	d10f      	bne.n	800550c <__swsetup_r+0x3c>
 80054ec:	686c      	ldr	r4, [r5, #4]
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f4:	0719      	lsls	r1, r3, #28
 80054f6:	d42c      	bmi.n	8005552 <__swsetup_r+0x82>
 80054f8:	06dd      	lsls	r5, r3, #27
 80054fa:	d411      	bmi.n	8005520 <__swsetup_r+0x50>
 80054fc:	2309      	movs	r3, #9
 80054fe:	6033      	str	r3, [r6, #0]
 8005500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	e03e      	b.n	800558a <__swsetup_r+0xba>
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <__swsetup_r+0xd4>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <__swsetup_r+0x46>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7eb      	b.n	80054ee <__swsetup_r+0x1e>
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <__swsetup_r+0xd8>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7e6      	b.n	80054ee <__swsetup_r+0x1e>
 8005520:	0758      	lsls	r0, r3, #29
 8005522:	d512      	bpl.n	800554a <__swsetup_r+0x7a>
 8005524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005526:	b141      	cbz	r1, 800553a <__swsetup_r+0x6a>
 8005528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <__swsetup_r+0x66>
 8005530:	4630      	mov	r0, r6
 8005532:	f7fd febf 	bl	80032b4 <_free_r>
 8005536:	2300      	movs	r3, #0
 8005538:	6363      	str	r3, [r4, #52]	; 0x34
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	2300      	movs	r3, #0
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	b94b      	cbnz	r3, 800556a <__swsetup_r+0x9a>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d003      	beq.n	800556a <__swsetup_r+0x9a>
 8005562:	4621      	mov	r1, r4
 8005564:	4630      	mov	r0, r6
 8005566:	f000 f84d 	bl	8005604 <__smakebuf_r>
 800556a:	89a0      	ldrh	r0, [r4, #12]
 800556c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005570:	f010 0301 	ands.w	r3, r0, #1
 8005574:	d00a      	beq.n	800558c <__swsetup_r+0xbc>
 8005576:	2300      	movs	r3, #0
 8005578:	60a3      	str	r3, [r4, #8]
 800557a:	6963      	ldr	r3, [r4, #20]
 800557c:	425b      	negs	r3, r3
 800557e:	61a3      	str	r3, [r4, #24]
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	b943      	cbnz	r3, 8005596 <__swsetup_r+0xc6>
 8005584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005588:	d1ba      	bne.n	8005500 <__swsetup_r+0x30>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	0781      	lsls	r1, r0, #30
 800558e:	bf58      	it	pl
 8005590:	6963      	ldrpl	r3, [r4, #20]
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	e7f4      	b.n	8005580 <__swsetup_r+0xb0>
 8005596:	2000      	movs	r0, #0
 8005598:	e7f7      	b.n	800558a <__swsetup_r+0xba>
 800559a:	bf00      	nop
 800559c:	24000014 	.word	0x24000014
 80055a0:	080058b0 	.word	0x080058b0
 80055a4:	080058d0 	.word	0x080058d0
 80055a8:	08005890 	.word	0x08005890

080055ac <abort>:
 80055ac:	b508      	push	{r3, lr}
 80055ae:	2006      	movs	r0, #6
 80055b0:	f000 f8a2 	bl	80056f8 <raise>
 80055b4:	2001      	movs	r0, #1
 80055b6:	f000 f923 	bl	8005800 <_exit>

080055ba <__swhatbuf_r>:
 80055ba:	b570      	push	{r4, r5, r6, lr}
 80055bc:	460e      	mov	r6, r1
 80055be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c2:	2900      	cmp	r1, #0
 80055c4:	b096      	sub	sp, #88	; 0x58
 80055c6:	4614      	mov	r4, r2
 80055c8:	461d      	mov	r5, r3
 80055ca:	da07      	bge.n	80055dc <__swhatbuf_r+0x22>
 80055cc:	2300      	movs	r3, #0
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	89b3      	ldrh	r3, [r6, #12]
 80055d2:	061a      	lsls	r2, r3, #24
 80055d4:	d410      	bmi.n	80055f8 <__swhatbuf_r+0x3e>
 80055d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055da:	e00e      	b.n	80055fa <__swhatbuf_r+0x40>
 80055dc:	466a      	mov	r2, sp
 80055de:	f000 f8b5 	bl	800574c <_fstat_r>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	dbf2      	blt.n	80055cc <__swhatbuf_r+0x12>
 80055e6:	9a01      	ldr	r2, [sp, #4]
 80055e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055f0:	425a      	negs	r2, r3
 80055f2:	415a      	adcs	r2, r3
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	e7ee      	b.n	80055d6 <__swhatbuf_r+0x1c>
 80055f8:	2340      	movs	r3, #64	; 0x40
 80055fa:	2000      	movs	r0, #0
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	b016      	add	sp, #88	; 0x58
 8005600:	bd70      	pop	{r4, r5, r6, pc}
	...

08005604 <__smakebuf_r>:
 8005604:	898b      	ldrh	r3, [r1, #12]
 8005606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005608:	079d      	lsls	r5, r3, #30
 800560a:	4606      	mov	r6, r0
 800560c:	460c      	mov	r4, r1
 800560e:	d507      	bpl.n	8005620 <__smakebuf_r+0x1c>
 8005610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	6123      	str	r3, [r4, #16]
 8005618:	2301      	movs	r3, #1
 800561a:	6163      	str	r3, [r4, #20]
 800561c:	b002      	add	sp, #8
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	ab01      	add	r3, sp, #4
 8005622:	466a      	mov	r2, sp
 8005624:	f7ff ffc9 	bl	80055ba <__swhatbuf_r>
 8005628:	9900      	ldr	r1, [sp, #0]
 800562a:	4605      	mov	r5, r0
 800562c:	4630      	mov	r0, r6
 800562e:	f7fd fe91 	bl	8003354 <_malloc_r>
 8005632:	b948      	cbnz	r0, 8005648 <__smakebuf_r+0x44>
 8005634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005638:	059a      	lsls	r2, r3, #22
 800563a:	d4ef      	bmi.n	800561c <__smakebuf_r+0x18>
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	e7e3      	b.n	8005610 <__smakebuf_r+0xc>
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <__smakebuf_r+0x7c>)
 800564a:	62b3      	str	r3, [r6, #40]	; 0x28
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	6020      	str	r0, [r4, #0]
 8005650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	6163      	str	r3, [r4, #20]
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	6120      	str	r0, [r4, #16]
 800565e:	b15b      	cbz	r3, 8005678 <__smakebuf_r+0x74>
 8005660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f883 	bl	8005770 <_isatty_r>
 800566a:	b128      	cbz	r0, 8005678 <__smakebuf_r+0x74>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	89a0      	ldrh	r0, [r4, #12]
 800567a:	4305      	orrs	r5, r0
 800567c:	81a5      	strh	r5, [r4, #12]
 800567e:	e7cd      	b.n	800561c <__smakebuf_r+0x18>
 8005680:	08003085 	.word	0x08003085

08005684 <__ascii_mbtowc>:
 8005684:	b082      	sub	sp, #8
 8005686:	b901      	cbnz	r1, 800568a <__ascii_mbtowc+0x6>
 8005688:	a901      	add	r1, sp, #4
 800568a:	b142      	cbz	r2, 800569e <__ascii_mbtowc+0x1a>
 800568c:	b14b      	cbz	r3, 80056a2 <__ascii_mbtowc+0x1e>
 800568e:	7813      	ldrb	r3, [r2, #0]
 8005690:	600b      	str	r3, [r1, #0]
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	1e10      	subs	r0, r2, #0
 8005696:	bf18      	it	ne
 8005698:	2001      	movne	r0, #1
 800569a:	b002      	add	sp, #8
 800569c:	4770      	bx	lr
 800569e:	4610      	mov	r0, r2
 80056a0:	e7fb      	b.n	800569a <__ascii_mbtowc+0x16>
 80056a2:	f06f 0001 	mvn.w	r0, #1
 80056a6:	e7f8      	b.n	800569a <__ascii_mbtowc+0x16>

080056a8 <_raise_r>:
 80056a8:	291f      	cmp	r1, #31
 80056aa:	b538      	push	{r3, r4, r5, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
 80056b0:	d904      	bls.n	80056bc <_raise_r+0x14>
 80056b2:	2316      	movs	r3, #22
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80056be:	b112      	cbz	r2, 80056c6 <_raise_r+0x1e>
 80056c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056c4:	b94b      	cbnz	r3, 80056da <_raise_r+0x32>
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f830 	bl	800572c <_getpid_r>
 80056cc:	462a      	mov	r2, r5
 80056ce:	4601      	mov	r1, r0
 80056d0:	4620      	mov	r0, r4
 80056d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056d6:	f000 b817 	b.w	8005708 <_kill_r>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d00a      	beq.n	80056f4 <_raise_r+0x4c>
 80056de:	1c59      	adds	r1, r3, #1
 80056e0:	d103      	bne.n	80056ea <_raise_r+0x42>
 80056e2:	2316      	movs	r3, #22
 80056e4:	6003      	str	r3, [r0, #0]
 80056e6:	2001      	movs	r0, #1
 80056e8:	e7e7      	b.n	80056ba <_raise_r+0x12>
 80056ea:	2400      	movs	r4, #0
 80056ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80056f0:	4628      	mov	r0, r5
 80056f2:	4798      	blx	r3
 80056f4:	2000      	movs	r0, #0
 80056f6:	e7e0      	b.n	80056ba <_raise_r+0x12>

080056f8 <raise>:
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <raise+0xc>)
 80056fa:	4601      	mov	r1, r0
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	f7ff bfd3 	b.w	80056a8 <_raise_r>
 8005702:	bf00      	nop
 8005704:	24000014 	.word	0x24000014

08005708 <_kill_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d07      	ldr	r5, [pc, #28]	; (8005728 <_kill_r+0x20>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	f000 f85b 	bl	80057d0 <_kill>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d102      	bne.n	8005724 <_kill_r+0x1c>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	b103      	cbz	r3, 8005724 <_kill_r+0x1c>
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	bd38      	pop	{r3, r4, r5, pc}
 8005726:	bf00      	nop
 8005728:	24000318 	.word	0x24000318

0800572c <_getpid_r>:
 800572c:	f000 b840 	b.w	80057b0 <_getpid>

08005730 <__ascii_wctomb>:
 8005730:	b149      	cbz	r1, 8005746 <__ascii_wctomb+0x16>
 8005732:	2aff      	cmp	r2, #255	; 0xff
 8005734:	bf85      	ittet	hi
 8005736:	238a      	movhi	r3, #138	; 0x8a
 8005738:	6003      	strhi	r3, [r0, #0]
 800573a:	700a      	strbls	r2, [r1, #0]
 800573c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005740:	bf98      	it	ls
 8005742:	2001      	movls	r0, #1
 8005744:	4770      	bx	lr
 8005746:	4608      	mov	r0, r1
 8005748:	4770      	bx	lr
	...

0800574c <_fstat_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	; (800576c <_fstat_r+0x20>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f000 f821 	bl	80057a0 <_fstat>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d102      	bne.n	8005768 <_fstat_r+0x1c>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	b103      	cbz	r3, 8005768 <_fstat_r+0x1c>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	24000318 	.word	0x24000318

08005770 <_isatty_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d06      	ldr	r5, [pc, #24]	; (800578c <_isatty_r+0x1c>)
 8005774:	2300      	movs	r3, #0
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f000 f820 	bl	80057c0 <_isatty>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_isatty_r+0x1a>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_isatty_r+0x1a>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	24000318 	.word	0x24000318

08005790 <_close>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <_close+0xc>)
 8005792:	2258      	movs	r2, #88	; 0x58
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f04f 30ff 	mov.w	r0, #4294967295
 800579a:	4770      	bx	lr
 800579c:	24000318 	.word	0x24000318

080057a0 <_fstat>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <_fstat+0xc>)
 80057a2:	2258      	movs	r2, #88	; 0x58
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	4770      	bx	lr
 80057ac:	24000318 	.word	0x24000318

080057b0 <_getpid>:
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <_getpid+0xc>)
 80057b2:	2258      	movs	r2, #88	; 0x58
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ba:	4770      	bx	lr
 80057bc:	24000318 	.word	0x24000318

080057c0 <_isatty>:
 80057c0:	4b02      	ldr	r3, [pc, #8]	; (80057cc <_isatty+0xc>)
 80057c2:	2258      	movs	r2, #88	; 0x58
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	2000      	movs	r0, #0
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	24000318 	.word	0x24000318

080057d0 <_kill>:
 80057d0:	4b02      	ldr	r3, [pc, #8]	; (80057dc <_kill+0xc>)
 80057d2:	2258      	movs	r2, #88	; 0x58
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	4770      	bx	lr
 80057dc:	24000318 	.word	0x24000318

080057e0 <_lseek>:
 80057e0:	4b02      	ldr	r3, [pc, #8]	; (80057ec <_lseek+0xc>)
 80057e2:	2258      	movs	r2, #88	; 0x58
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ea:	4770      	bx	lr
 80057ec:	24000318 	.word	0x24000318

080057f0 <_read>:
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <_read+0xc>)
 80057f2:	2258      	movs	r2, #88	; 0x58
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	4770      	bx	lr
 80057fc:	24000318 	.word	0x24000318

08005800 <_exit>:
 8005800:	e7fe      	b.n	8005800 <_exit>
	...

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
